;;; Unit sets				-*- Mode: Verdi -*-
;;;

(load setrules)

(function is-unit-set (x) ()
  (some (y) (= x (unit y))))

(disabled
  (rule definition-1 (X)
    (= (is-unit-set X)
       (some (y) (all (z) (= (in z X) (= z y)))))))
(SPLIT (SOME (Y) (ALL (Z) (= (IN Z X) (= Z Y)))))
(SIMPLIFY)
(CASES)
(REDUCE)
(INSTANTIATE (Y$0 Y))
(USE =.EXTENSIONAL (X X) (Y (UNIT Y)))
(REDUCE)
(EQUALITY-SUBSTITUTE)
(INSTANTIATE (Z E$0))
(SIMPLIFY)
(NEXT)
(SPLIT (IS-UNIT-SET X))
(REDUCE)
(INSTANTIATE (Y$0 Y))
(EQUALITY-SUBSTITUTE)
(REWRITE)
(NEXT)


(disabled
  (rule defintion-2 (x)
    (= (is-unit-set x)
       (and (some (y) (in y x))
	    (all (y z) (implies (and (in y x) (in z x))
				(= y z)))))))
(SPLIT (IS-UNIT-SET X))
(SIMPLIFY)
(CASES)
(REDUCE)
(PRENEX)
(EQUALITY-SUBSTITUTE)
(REWRITE)
(NEXT)
(REDUCE)
(INSTANTIATE (Y Y$0))
(REWRITE)
(PRENEX)
(APPLY =.EXTENSIONAL.SUBSET (= X (SETADD Y (NULLSET))))
(REDUCE)
(INSTANTIATE (Y$1 Y) (Z E))
(SIMPLIFY)
(NEXT)

(rule is-unit-set-nullset ()
  (= (is-unit-set (nullset))
     (false)))
(reduce)

(rule is-unit-set-unit (x)
  (= (is-unit-set (unit x))
     (true)))
(reduce)

(rule is-unit-set-setadd (x s)
  (= (is-unit-set (setadd x s))
     (all (y) (implies (in y s)
		       (= y x)))))
(SPLIT (IS-UNIT-SET (SETADD X S)))
(REDUCE)
(APPLY =.EXTENSIONAL.SUBSET (= (SETADD X S) (SETADD Y (NULLSET))))
(REDUCE)
(INSTANTIATE (Y X))
(SIMPLIFY)

(function the-element (x) ()
  (cup x))

(rule the-element-unit (x)
  (= (the-element (unit x))
     x))
(reduce)

(rule the-element-unit-2 (x)
  (= (the-element (setadd x (nullset)))
     x))
(reduce)

(axiom the-element-of-unit-set (x)
  (implies (is-unit-set x)
	   (= x (unit (the-element x)))))
(INVOKE IS-UNIT-SET)
(PRENEX)
(EQUALITY-SUBSTITUTE X)
(REWRITE)

(axiom the-element-is-in (x)
  (implies (is-unit-set x)
	   (in (the-element x) x)))
(USE THE-ELEMENT-OF-UNIT-SET (X X))
(SPLIT (IN (THE-ELEMENT X) (UNIT (THE-ELEMENT X))))
(SIMPLIFY)
(REWRITE)
