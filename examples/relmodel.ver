;;;
;;; The theory of relations
;;; 

(load setrules)
(load pair)

;;; is-relation

(function is-relation (r) ()
  (all (x) (implies (in x r) (pair!is-pair x))))

(axiom is-relation-bool (r)
  (= (type-of (is-relation r))
     (bool)))
(REDUCE)

(axiom is-relation-monotonic (x y)
  (implies (and (is-relation y)
		(subset x y))
	   (is-relation x)))
(REDUCE)
(INSTANTIATE (E X$1))
(SIMPLIFY)

(rule is-relation-nullset ()
  (= (is-relation (nullset))
     (true)))
(REDUCE)

(rule is-relation-unit (x)
  (= (is-relation (unit x))
     (pair!is-pair x)))
(REDUCE)

(rule is-relation-union (x y)
  (= (is-relation (union x y))
     (and (is-relation x)
	  (is-relation y))))
(SPLIT (IS-RELATION (UNION X Y)))
(SIMPLIFY)
(REDUCE)
(SPLIT (IN X$0 Y))
(SIMPLIFY)
(INSTANTIATE (X$2 X$0))
(REDUCE)

(disabled
 (rule is-relation-cup (x)
   (= (is-relation (cup x))
      (all (y) (implies (in y x)
			(is-relation y))))))
(SPLIT (IS-RELATION (CUP X)))
(REDUCE)
(SIMPLIFY)
(PRENEX)
(SIMPLIFY)
(INSTANTIATE (Y$0 Y))
(SIMPLIFY)

(rule is-relation-cup-1 (x)
  (implies (all (y) (implies (in y x)
			     (is-relation y)))
	   (= (is-relation (cup x)) (true))))
(APPLY IS-RELATION-CUP)
(SIMPLIFY)

(rule is-relation-setadd (x y)
  (= (is-relation (setadd x y))
     (and (pair!is-pair x)
	  (is-relation y))))
(USE IS-RELATION-UNION (X (UNIT X)) (Y Y))
(USE IS-RELATION-UNIT (X X))
(REWRITE)

(rule is-relation-inter (x y)
  (implies (or (is-relation x)
	       (is-relation y))
	   (= (is-relation (inter x y)) (true))))
(USE IS-RELATION-MONOTONIC (X (INTER X Y)) (Y X))
(USE IS-RELATION-MONOTONIC (X (INTER X Y)) (Y Y))
(SIMPLIFY)

(rule is-relation-diff (x y)
  (implies (is-relation x)
	   (= (is-relation (diff x y)) (true))))
(USE IS-RELATION-MONOTONIC (X (DIFF X Y)) (Y X))
(SIMPLIFY)

(rule is-relation-delta (x y)
  (implies (and (is-relation x)
		(is-relation y))
	   (= (is-relation (delta x y)) (true))))
(REWRITE)

(rule is-relation-cross (x y)
  (= (is-relation (pair!cross x y))
     (true)))
(REDUCE)


;;; inversion
;;;
;;; I try to use duality to make half the proofs trivial.  So inversion
;;; is defined early.
;;;
;;; The odd definition here makes (inverse (inverse x)) = x for ANY set x,
;;; not just sets of pairs.  This is extremely convenient!

(function flip-pair (x) ()
  (if (pair!is-pair x)
      (pair!pair (pair!snd x) (pair!fst x))
      x))

(grule flip-pair-is-involution (x)
  (= (flip-pair (flip-pair x))
     x))
(REDUCE)

(rule fst-flip-pair (x)
  (implies (pair!is-pair x)
	   (= (pair!fst (flip-pair x))
	      (pair!snd x))))
(REDUCE)

(rule snd-flip-pair (x)
  (implies (pair!is-pair x)
	   (= (pair!snd (flip-pair x))
	      (pair!fst x))))
(REDUCE)

(rule is-pair-flip-pair (x)
  (= (pair!is-pair (flip-pair x))
     (pair!is-pair x)))
(REDUCE)

(rule flip-pair-pair (x y)
  (= (flip-pair (pair!pair x y))
     (pair!pair y x)))
(REDUCE)

(zf-function inverse (r)
  (map (flip-pair x)
    ((x) r)))

(rule in-inverse (x r)
  (= (in x (inverse r))
     (in (flip-pair x) r)))
(USE INVERSE.DEFINITION (R R) (X$0 X))
(SPLIT (IN X (INVERSE R)))
(SIMPLIFY)
(PRENEX)
(SIMPLIFY)
(INSTANTIATE (X$0 (FLIP-PAIR X)))
(SIMPLIFY)

(rule inverse-inverse (x)
  (= (inverse (inverse x))
     x))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule inverse-nullset ()
  (= (inverse (nullset))
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule inverse-unit (x)
  (= (inverse (unit x))
     (unit (flip-pair x))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule inverse-union (x y)
  (= (inverse (union x y))
     (union (inverse x) (inverse y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule inverse-setadd (x y)
  (= (inverse (setadd x y))
     (setadd (flip-pair x) (inverse y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule inverse-intersection (x y)
  (= (inverse (inter x y))
     (inter (inverse x)(inverse y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule inverse-diff (x y)
  (= (inverse (diff x y))
     (diff (inverse x) (inverse y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule inverse-cross (x y)
  (= (inverse (pair!cross x y))
     (pair!cross y x)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule subset-inverse-inverse (x y)
  (= (subset (inverse x)(inverse y))
     (subset x y)))
(SPLIT (SUBSET X Y))
(WITH-DISABLED (FLIP-PAIR) (REDUCE))
(INSTANTIATE (E$0 (FLIP-PAIR E)))
(SIMPLIFY)

(rule =-inverse-inverse (x y)
  (= (= (inverse x)(inverse y))
     (= x y)))
(USE INVERSE-INVERSE (X X))
(USE INVERSE-INVERSE (X Y))
(SPLIT (= X Y))
(SIMPLIFY)

(rule is-relation-inverse (x)
  (= (is-relation (inverse x))
     (is-relation x)))
(SPLIT (IS-RELATION X))
(REDUCE)
(INSTANTIATE (X$1 X$0))
(SIMPLIFY)
(SPLIT (PAIR!IS-PAIR X$0))
(SIMPLIFY)


;;; domain and range

(zf-function pairs (x) (select (a x) (pair!is-pair a)))

(zf-function dom (x) (map (pair!fst a) ((a) (pairs x))))

(rule in-dom (a x)
  (= (in a (dom x))
     (some (b) (in (pair!pair a b) x))))
(USE DOM.DEFINITION (A$0 A) (X X))
(SPLIT (IN A (DOM X)))
(REDUCE)
(PRENEX)
(INSTANTIATE (B$0 (PAIR!SND A$0)))
(REWRITE)
(INSTANTIATE (A$0 (PAIR!PAIR A B)))
(SIMPLIFY)

(axiom in-dom-1 (a b x)
  (implies (in (pair!pair a b) x)
	   (= (in a (dom x)) (true))))
(REWRITE)

(rule dom-nullset ()
  (= (dom (nullset))
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-unit (x)
  (= (dom (unit x))
     (if (pair!is-pair x)
	 (unit (pair!fst x))
	 (nullset))))
(APPLY SETRULES!EXTENSIONALITY)
(REDUCE)
(INSTANTIATE (B (PAIR!SND X)))
(SIMPLIFY)

(rule dom-union (x y)
  (= (dom (union x y))
     (union (dom x) (dom y))))
(APPLY SETRULES!EXTENSIONALITY)
(REDUCE)

(rule dom-setadd (x y)
  (= (dom (setadd x y))
     (if (pair!is-pair x)
	 (setadd (pair!fst x) (dom y))
	 (dom y))))
(USE DOM-UNIT (X X))
(USE DOM-UNION (X (UNIT X)) (Y Y))
(REWRITE)
(EQUALITY-SUBSTITUTE)
(EQUALITY-SUBSTITUTE (DOM (SETADD X (NULLSET))))
(REWRITE)

(rule dom-cross (x y)
  (= (dom (pair!cross x y))
     (if (= y (nullset))
	 (nullset)
	 x)))
(USE SETRULES!SET-CASES (X Y))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))


(zf-function ran (x) (map (pair!snd a) ((a) (pairs x))))

(rule in-ran (b x)
  (= (in b (ran x))
     (some (a) (in (pair!pair a b) x))))
(USE RAN.DEFINITION (A$0 B) (X X))
(SPLIT (IN B (RAN X)))
(REDUCE)
(PRENEX)
(INSTANTIATE (A$1 (PAIR!FST A)))
(REWRITE)
(INSTANTIATE (A (PAIR!PAIR A$0 B)))
(SIMPLIFY)

(axiom in-ran-1 (a b x)
  (implies (in (pair!pair a b) x)
	   (= (in b (ran x)) (true))))
(REWRITE)

(rule dom-inverse (r)
  (= (dom (inverse r))
     (ran r)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-inverse (r)
  (= (ran (inverse r))
     (dom r)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-nullset ()
  (= (ran (nullset))
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-union (x y)
  (= (ran (union x y))
     (union (ran x) (ran y))))
(USE DOM-INVERSE (R (UNION X Y)))
(REWRITE)

(rule ran-unit (x)
  (= (ran (unit x))
     (if (pair!is-pair x)
	 (unit (pair!snd x))
	 (nullset))))
(USE DOM-INVERSE (R (UNIT X)))
(REDUCE)

(rule ran-setadd (x y)
  (= (ran (setadd x y))
     (if (pair!is-pair x)
	 (setadd (pair!snd x) (ran y))
	 (ran y))))
(USE DOM-INVERSE (R (SETADD X Y)))
(REDUCE)

(rule ran-cross (x y)
  (= (ran (pair!cross x y))
     (if (= x (nullset))
	 (nullset)
	 y)))
(USE DOM-INVERSE (R (PAIR!CROSS X Y)))
(REWRITE)

(axiom dom-subset (x y)
  (implies (subset x y)
	   (= (subset (dom x) (dom y)) (true))))
(REDUCE)
(INSTANTIATE (E (PAIR!PAIR E$0 B)))
(SIMPLIFY)

(axiom ran-subset (x y)
  (implies (subset x y)
	   (= (subset (ran x) (ran y)) (true))))
(REDUCE)
(INSTANTIATE (E (PAIR!PAIR A E$0)))
(SIMPLIFY)

(axiom ran-null-imp-dom-null (x)
  (implies (not (= (ran x) (nullset)))
	   (not (= (dom x) (nullset)))))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)
(PRENEX)
(SIMPLIFY)

(axiom dom-null-iff-ran-null (x)
  (= (= (dom x) (nullset))
     (= (ran x) (nullset))))
(USE RAN-NULL-IMP-DOM-NULL (X X))
(USE RAN-NULL-IMP-DOM-NULL (X (INVERSE X)))
(REWRITE)

(disabled
 (rule subset-cross (a x y)
  (= (subset a (pair!cross x y))
     (and (is-relation a)
	  (subset (dom a) x)
	  (subset (ran a) y)))))
(SPLIT (SUBSET A (PAIR!CROSS X Y)))
(SIMPLIFY)
(CASES)
(USE DOM-SUBSET (X A) (Y (PAIR!CROSS X Y)))
(USE RAN-SUBSET (X A) (Y (PAIR!CROSS X Y)))
(REWRITE)
(INVOKE (SUBSET A (PAIR!CROSS X Y)))
(INVOKE IS-RELATION)
(REWRITE)
(NEXT)
(SPLIT (AND (IS-RELATION A)
	    (SUBSET (DOM A) X)
	    (SUBSET (RAN A) Y)))
(SIMPLIFY)
(REDUCE)
(INSTANTIATE (X$0 E$1))
(INSTANTIATE (E$0 (PAIR!FST E)))
(INSTANTIATE (E$1 (PAIR!SND E)))
(INSTANTIATE (B (PAIR!SND E)))
(INSTANTIATE (A$0 (PAIR!FST E)))
(REWRITE)
(NEXT)


;;; image

(zf-function image (r x)
  (select (y (ran r)) (some (z) (and (in z x) (in (pair!pair z y) r)))))

(rule in-image (r x y)
  (= (in y (image r x))
     (some (z) (and (in z x) (in (pair!pair z y) r)))))
(REWRITE)

(rule image-of-nullset (r)
  (= (image r (nullset))
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule image-through-nullset (x)
  (= (image (nullset) x)
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule image-of-union (r x y)
  (= (image r (union x y))
     (union (image r x)
	    (image r y))))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)
(CASES)
(PRENEX)
(SIMPLIFY)
(NEXT)
(INSTANTIATE (Z Z$2))
(SIMPLIFY)
(NEXT)

(rule image-through-union (r s x)
  (= (image (union r s) x)
     (union (image r x)
	    (image s x))))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)
(INSTANTIATE (Z$1 Z))
(SIMPLIFY)

;;; now redundant; see image-of-superset-of-dom
;;; but maybe useful for trivial-rewrite
;;;
(rule image-dom (r)
  (= (image r (dom r))
     (ran r)))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REWRITE)
(CASES)
(PRENEX)
(REWRITE)
(NEXT)
(INSTANTIATE (Z A$0) (B E))
(SIMPLIFY)
(NEXT)

(rule image-cross (x y z)
  (= (image (pair!cross x y) z)
     (if (= (inter z x) (nullset))
	 (nullset)
	 y)))
(REWRITE)
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(REWRITE)
(CASES)
(INSTANTIATE (E Z$0))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (Z$1 E))
(SIMPLIFY)
(NEXT)

(rule image-monotonic (r s x y)
  (implies (and (subset x y)
		(subset r s))
	   (= (subset (image r x) (image s y)) (true))))
(REDUCE)
(INSTANTIATE (Z$0 Z))
(SIMPLIFY)

(axiom image-subset-ran (r x)
  (subset (image r x) (ran r)))
(REDUCE)
(SIMPLIFY)

(rule image-of-superset-of-dom (r x)
  (implies (subset (dom r) x)
	   (= (image r x)
	      (ran r))))
(USE IMAGE-DOM (R R))
(USE IMAGE-MONOTONIC (R R)(S R)(X (DOM R))(Y X))
(USE IMAGE-SUBSET-RAN (R R)(X X))
(USE =.EXTENSIONAL.SUBSET (X (IMAGE R X)) (Y (RAN R)))
(REWRITE)


;;; composition

(zf-function comp (r s)
  (select (a (pair!cross (dom r) (ran s)))
    (some (z) (and (in (pair!pair (pair!fst a) z) r)
		   (in (pair!pair z (pair!snd a)) s)))))

(rule in-comp (x r s)
  (= (in x (comp r s))
     (and (pair!is-pair x)
	  (some (y) (and (in (pair!pair (pair!fst x) y) r)
			 (in (pair!pair y (pair!snd x)) s))))))
(REWRITE)

(rule is-relation-comp (r s)
  (= (is-relation (comp r s))
     (true)))
(REDUCE)

(rule inverse-comp (r s)
  (= (inverse (comp r s))
     (comp (inverse s) (inverse r))))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REDUCE)
(CASES)
(INSTANTIATE (Y$0 Y))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (Y Y$1))
(SIMPLIFY)
(NEXT)

(rule dom-comp (r s)
  (= (dom (comp r s))
     (image (inverse r) (dom s))))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REDUCE)
(CASES)
(INSTANTIATE (Z Y) (B$0 B))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (B B$1) (Y Z$0))
(SIMPLIFY)
(NEXT)

(rule ran-comp (r s)
  (= (ran (comp r s))
     (image s (ran r))))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REDUCE)
(CASES)
(INSTANTIATE (Z Y) (A$0 A))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (A A$1) (Y Z$0))
(SIMPLIFY)
(NEXT)

(rule image-comp (x r s)
  (= (image (comp r s) x)
     (image s (image r x))))
(APPLY SETRULES!EXTENSIONALITY)
(REDUCE)
(CASES)
(INSTANTIATE (Z$0 Y) (Z$1 Z))
(SIMPLIFY)
(NEXT)
(PRENEX)
(SIMPLIFY)
(INSTANTIATE (Z$1 Z$0))
(SIMPLIFY)
(NEXT)

(rule comp-nullset-left (r)
  (= (comp (nullset) r)
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule comp-nullset-right (r)
  (= (comp r (nullset))
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule comp-associative (r s t)
  (= (comp (comp r s) t)
     (comp r (comp s t))))
(APPLY SETRULES!EXTENSIONALITY)
(REDUCE)
(CASES)
(INSTANTIATE (Y$1 Y$0) (Y$2 Y))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (Y Y$4) (Y$0 Y$3))
(SIMPLIFY)
(NEXT)

(rule comp-monotonic (a b c d)
  (implies (and (subset a c)
		(subset b d))
	   (= (subset (comp a b) (comp c d)) (true))))
(REDUCE)
(INSTANTIATE (Y$0 Y))
(SIMPLIFY)

;;; restriction

(zf-function dom-restrict (x r)
  (select (p r)
    (and (pair!is-pair p)
	 (in (pair!fst p) x))))

(axiom in-dom-restrict (x r y)
  (= (in x (dom-restrict y r))
     (and (pair!is-pair x)
	  (in x r)
	  (in (pair!fst x) y))))
(REWRITE)

(zf-function ran-restrict (r x)
  (select (p r)
    (and (pair!is-pair p)
	 (in (pair!snd p) x))))

(axiom in-ran-restrict (x r y)
  (= (in x (ran-restrict r y))
     (and (pair!is-pair x)
	  (in x r)
	  (in (pair!snd x) y))))
(REWRITE)

(axiom dom-restrict-subset (x r)
  (subset (dom-restrict x r) r))
(REDUCE)

(axiom ran-restrict-subset (r x)
  (subset (ran-restrict r x) r))
(REDUCE)

(rule is-relation-dom-restrict (x r)
  (= (is-relation (dom-restrict x r))
     (true)))
(REDUCE)

(rule is-relation-ran-restrict (r x)
  (= (is-relation (ran-restrict r x))
     (true)))
(REDUCE)

(rule inverse-dom-restrict (x r)
  (= (inverse (dom-restrict x r))
     (ran-restrict (inverse r) x)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule inverse-ran-restrict (r x)
  (= (inverse (ran-restrict r x))
     (dom-restrict x (inverse r))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-dom-restrict (x r)
  (= (dom (dom-restrict x r))
     (inter x (dom r))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-dom-restrict (x r)
  (= (ran (dom-restrict x r))
     (image r x)))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REWRITE)
(SPLIT (IN A X))
(SIMPLIFY)

(rule dom-ran-restrict (r x)
  (= (dom (ran-restrict r x))
     (image (inverse r) x)))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REWRITE)
(SPLIT (IN B X))
(SIMPLIFY)

(rule ran-ran-restrict (r x)
  (= (ran (ran-restrict r x))
     (inter (ran r) x)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(axiom dom-restrict-ignores-off-domain (x r)
  (= (dom-restrict x r)
     (dom-restrict (inter x (dom r)) r)))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)
(INSTANTIATE (B (PAIR!SND E)))
(SIMPLIFY)

(axiom ran-restrict-ignores-off-ran (x r)
  (= (ran-restrict r x)
     (ran-restrict r (inter x (ran r)))))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)
(INSTANTIATE (A (PAIR!FST E)))
(SIMPLIFY)

(rule ran-restrict-dom-restrict (x r y)
  (= (ran-restrict (dom-restrict x r) y)
     (dom-restrict x (ran-restrict r y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-restrict-dom-restrict (x y r)
  (= (dom-restrict x (dom-restrict y r))
     (dom-restrict (inter x y) r)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-restrict-ran-restrict (r x y)
  (= (ran-restrict (ran-restrict r x) y)
     (ran-restrict r (inter x y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-restrict-by-nullset (r)
  (= (dom-restrict (nullset) r)
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-restrict-nullset (x)
  (= (dom-restrict x (nullset))
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-restrict-by-nullset (r)
  (= (ran-restrict r (nullset))
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-restrict-nullset (x)
     (= (ran-restrict (nullset) x)
	(nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-restrict-union (x r s)
  (= (dom-restrict x (union r s))
     (union (dom-restrict x r)
	    (dom-restrict x s))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-restrict-union (x r s)
  (= (ran-restrict (union r s) x)
     (union (ran-restrict r x)
	    (ran-restrict s x))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-restrict-unit (x y)
  (= (dom-restrict x (unit y))
     (if (and (pair!is-pair y)
	      (in (pair!fst y) x))
	 (unit y)
	 (nullset))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-restrict-unit (x y)
  (= (ran-restrict (unit x) y)
     (if (and (pair!is-pair x)
	      (in (pair!snd x) y))
	 (unit x)
	 (nullset))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule image-dom-restrict (x r y)
  (= (image (dom-restrict x r) y)
     (image r (inter x y))))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REWRITE)
(SPLIT (IN Z X))
(SIMPLIFY)

(rule image-ran-restrict (r x y)
  (= (image (ran-restrict r x) y)
     (inter (image r y) x)))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REWRITE)
(SPLIT (IN E X))
(SIMPLIFY)

(rule dom-restrict-by-superset-dom (r x)
  (implies (and (is-relation r)
		(subset (dom r) x))
	   (= (dom-restrict x r) r)))
(APPLY SETRULES!EXTENSIONALITY)
(REDUCE)
(INSTANTIATE (X$0 E$0))
(INSTANTIATE (E$0 (PAIR!FST E)))
(INSTANTIATE (B (PAIR!SND E)))
(REWRITE)

(rule ran-restrict-by-superset-ran (r x)
  (implies (and (is-relation r)
		(subset (ran r) x))
	   (= (ran-restrict r x) r)))
(USE INVERSE-DOM-RESTRICT (X X) (R (INVERSE R)))
(SPLIT (SUBSET (RAN R) X))
(SPLIT (IS-RELATION R))
(REWRITE)

;;; anti-restriction

(function dom-remove (x r) ()
  (dom-restrict (diff (dom r) x) r))

(rule in-dom-remove (x r y)
  (= (in x (dom-remove y r))
     (and (pair!is-pair x)
	  (in x r)
	  (not (in (pair!fst x) y)))))
(REDUCE)
(INSTANTIATE (B (PAIR!SND X)))
(REWRITE)

(function ran-remove (r x) ()
  (ran-restrict r (diff (ran r) x)))

(rule in-ran-remove (x r y)
  (= (in x (ran-remove r y))
     (and (pair!is-pair x)
	  (in x r)
	  (not (in (pair!snd x) y)))))
(REDUCE)
(INSTANTIATE (A (PAIR!FST X)))
(REWRITE)

(axiom dom-remove-subset (x r)
  (subset (dom-remove x r) r))
(REDUCE)

(axiom ran-remove-subset (r x)
  (subset (ran-remove r x) r))
(REDUCE)

(rule is-relation-dom-remove (x r)
  (= (is-relation (dom-remove x r)) (true)))
(REDUCE)

(rule is-relation-ran-remove (r x)
  (= (is-relation (ran-remove r x)) (true)))
(REDUCE)

(rule inverse-dom-remove(x r)
  (= (inverse (dom-remove x r))
     (ran-remove (inverse r) x)))
(REDUCE)

(rule inverse-ran-remove (r x)
  (= (inverse (ran-remove r x))
     (dom-remove x (inverse r))))
(REDUCE)

(rule dom-dom-remove (x r)
  (= (dom (dom-remove x r))
     (diff (dom r) x)))
(REDUCE)

(axiom ran-dom-remove (x r)
  (subset (diff (ran r) (image r x))
	  (ran (dom-remove x r))))
(REDUCE)
(INSTANTIATE (Z$0 A))
(INSTANTIATE (Z A))
(SIMPLIFY)

(rule ran-ran-remove (r x)
  (= (ran (ran-remove r x))
     (diff (ran r) x)))
(REDUCE)

(axiom dom-ran-remove (r x)
  (subset (diff (dom r) (image (inverse r) x))
	  (dom (ran-remove r x))))
(REDUCE)
(INSTANTIATE (Z$0 B))
(INSTANTIATE (Z B))
(SIMPLIFY)

(axiom dom-remove-ignores-off-domain (x r)
  (= (dom-remove x r)
     (dom-remove (inter x (dom r)) r)))
(REDUCE)

(axiom ran-remove-ignores-off-ran (x r)
  (= (ran-remove r x)
     (ran-remove r (inter x (ran r)))))
(REDUCE)

(rule ran-remove-dom-remove (x r y)
  (= (ran-remove (dom-remove x r) y)
     (dom-remove x (ran-remove r y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-remove-dom-restrict (x r y)
  (= (ran-remove (dom-restrict x r) y)
     (dom-restrict x (ran-remove r y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-restrict-dom-remove (x r y)
  (= (ran-restrict (dom-remove x r) y)
     (dom-remove x (ran-restrict r y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-remove-dom-remove (x y r)
  (= (dom-remove x (dom-remove y r))
     (dom-remove (union x y) r)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-remove-dom-restrict (x y r)
  (= (dom-remove x (dom-restrict y r))
     (dom-restrict (diff y x) r)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-restrict-dom-remove (x y r)
  (= (dom-restrict x (dom-remove y r))
     (dom-restrict (diff x y) r)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-remove-ran-remove (r x y)
  (= (ran-remove (ran-remove r x) y)
     (ran-remove r (union x y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-remove-ran-restrict (r x y)
  (= (ran-remove (ran-restrict r x) y)
     (ran-restrict r (diff x y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-restrict-ran-remove (r x y)
  (= (ran-restrict (ran-remove r x) y)
     (ran-restrict r (diff y x))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-remove-by-nullset (r)
  (implies (is-relation r)
	   (= (dom-remove (nullset) r)
	      r)))
(REDUCE)

(rule dom-remove-nullset (x)
  (= (dom-remove x (nullset))
     (nullset)))
(REDUCE)

(rule ran-remove-by-nullset (r)
  (implies (is-relation r)
	   (= (ran-remove r (nullset))
	      r)))
(REDUCE)

(rule ran-remove-nullset (x)
  (= (ran-remove (nullset) x)
     (nullset)))
(REDUCE)

(rule dom-remove-union (x r s)
  (= (dom-remove x (union r s))
     (union (dom-remove x r) (dom-remove x s))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-remove-union (x r s)
  (= (ran-remove (union r s) x)
     (union (ran-remove r x) (ran-remove s x))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-remove-unit (x y)
  (= (dom-remove x (unit y))
     (if (and (pair!is-pair y)
	      (not (in (pair!fst y) x)))
	 (unit y)
	 (nullset))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-remove-unit (x y)
  (= (ran-remove (unit x) y)
     (if (and (pair!is-pair x)
	      (not (in (pair!snd x) y)))
	 (unit x)
	 (nullset))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule image-dom-remove (x r y)
  (= (image (dom-remove x r) y)
     (image r (diff y x))))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REWRITE)
(SPLIT (IN Z X))
(SIMPLIFY)
(PRENEX)
(SIMPLIFY)

(rule image-ran-remove (r x y)
  (= (image (ran-remove r x) y)
     (diff (image r y) x)))
(APPLY SETRULES!EXTENSIONALITY-SUBGOAL)
(PRENEX)
(REWRITE)
(SPLIT (IN E X))
(SIMPLIFY)

(rule dom-remove-by-superset-dom (r x)
  (implies (and (is-relation r)
		(subset (dom r) x))
	   (= (dom-remove x r)
	      (nullset))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REDUCE))

(rule ran-remove-by-superset-ran (r x)
  (implies (and (is-relation r)
		(subset (ran r) x))
	   (= (ran-remove r x)
	      (nullset))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REDUCE))

;;; identity relation

(zf-function id (x)
  (select (p (pair!cross x x))
    (= (pair!fst p) (pair!snd p))))

(rule is-relation-id (x)
  (= (is-relation (id x))
     (true)))
(reduce)

(rule inverse-id (x)
  (= (inverse (id x)) (id x)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-id (x)
  (= (dom (id x)) x))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-id (x)
  (= (ran (id x)) x))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(axiom in-id (x y)
  (= (in x (id y))
     (and (pair!is-pair x)
	  (in (pair!fst x) y)
	  (= (pair!snd x)(pair!fst x)))))
(REWRITE)

(rule image-id (x y)
  (= (image (id x) y)
     (inter x y)))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)

(rule dom-restrict-id (x y)
  (= (dom-restrict x (id y))
     (id (inter x y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-restrict-id (x y)
  (= (ran-restrict (id x) y)
     (id (inter x y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule dom-remove-id (x y)
  (= (dom-remove x (id y))
     (id (diff y x))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule ran-remove-id (x y)
  (= (ran-remove (id x) y)
     (id (diff x y))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule comp-id-left (x r)
  (= (comp (id x) r)
     (dom-restrict x r)))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)

(rule comp-id-right (x r)
  (= (comp r (id x))
     (ran-restrict r x)))
(USE INVERSE-COMP (R (ID X)) (S (INVERSE R)))
(REWRITE)

(rule id-nullset ()
  (= (id (nullset))
     (nullset)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule subset-id-id (x y)
  (= (subset (id x) (id y))
     (subset x y)))
(SPLIT (SUBSET X Y))
(REDUCE)
(INSTANTIATE (E$0 (PAIR!PAIR E E)))
(REWRITE)

(rule =-id-id (x y)
  (= (= (id x) (id y))
     (= x y)))
(SPLIT (= X Y))
(USE DOM-ID (X X))
(USE DOM-ID (X Y))
(SIMPLIFY)


;;; (rel x y)
;;;

(function rel (x y) ()
   (powerset (pair!cross x y)))

(axiom in-rel (r x y)
    (= (in r (rel x y))
       (and (is-relation r)
	    (subset (dom r) x)
	    (subset (ran r) y))))
(INVOKE REL)
(WITH-ENABLED (SUBSET-CROSS) (REWRITE))

(rule rel-nullset-left (x)
  (= (rel (nullset) x)
     (unit (nullset))))
(REDUCE)
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule rel-nullset-right (x)
  (= (rel x (nullset))
     (unit (nullset))))
(REDUCE)
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))
