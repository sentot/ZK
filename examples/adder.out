
Reading "/home/sentot/zk/version1/ZK/examples/adder.ver"
IS-SIGNAL
IS-SIGNAL-TYPE
Beginning proof of IS-SIGNAL-TYPE ...
(IMPLIES (IS-SIGNAL X) (= (TYPE-OF X) (BOOL)))
Which simplifies
 with invocation of IS-SIGNAL to ...
(TRUE)
POWER
GROUND
SIGNAL-VALUE
SIGNAL-VALUE-TYPE
Beginning proof of SIGNAL-VALUE-TYPE ...
(= (TYPE-OF (SIGNAL-VALUE X)) (INT))
Which simplifies
 with invocation of SIGNAL-VALUE to ...
(TRUE)
P-TRANSISTOR
N-TRANSISTOR
ADDER
ADDER-SPEC
Beginning proof of ADDER-SPEC ...
(IMPLIES
 (AND (IS-SIGNAL IN0) (IS-SIGNAL IN1) (IS-SIGNAL CARRY-IN) (IS-SIGNAL OUT)
  (IS-SIGNAL CARRY-OUT))
 (= (ADDER IN0 IN1 CARRY-IN OUT CARRY-OUT)
  (= (+ (* 2 (SIGNAL-VALUE CARRY-OUT)) (SIGNAL-VALUE OUT))
   (+ (SIGNAL-VALUE IN0) (SIGNAL-VALUE IN1) (SIGNAL-VALUE CARRY-IN)))))
Which simplifies
 with invocation of SIGNAL-VALUE, N-TRANSISTOR, P-TRANSISTOR, ADDER, IS-SIGNAL
 forward chaining using IS-SIGNAL-TYPE
 with the assumptions SIGNAL-VALUE-TYPE to ...
(TRUE)
IS-BUS
DROP-LSB
DROP-LSB-IS-BUS
Beginning proof of DROP-LSB-IS-BUS ...
(IMPLIES (AND (IS-BUS BUS WIDTH) (>= WIDTH 1))
 (IS-BUS (DROP-LSB BUS) (+ -1 WIDTH)))
LSB
LSB-IS-SIGNAL
Beginning proof of LSB-IS-SIGNAL ...
(IMPLIES (AND (IS-BUS BUS WIDTH) (>= WIDTH 1)) (IS-SIGNAL (LSB BUS)))
BUS-VALUE
Beginning proof of BUS-VALUE ...
(IF (>= WIDTH 1) (M< (+ -1 WIDTH) WIDTH) (TRUE))
Which simplifies
 when rewriting with M<.NAT
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
BUS-VALUE-TYPE
Beginning proof of BUS-VALUE-TYPE ...
(IMPLIES (IS-BUS BUS WIDTH) (= (TYPE-OF (BUS-VALUE BUS WIDTH)) (INT)))
Inducting using the following scheme ...
 (AND
  (IMPLIES (AND (>= WIDTH 1) (*P* (DROP-LSB BUS) (+ -1 WIDTH)))
   (*P* BUS WIDTH))
  (IMPLIES (NOT (>= WIDTH 1)) (*P* BUS WIDTH)))
 produces ...
(AND
 (IMPLIES
  (AND (>= WIDTH 1)
   (IMPLIES (IS-BUS (DROP-LSB BUS) (+ -1 WIDTH))
    (= (TYPE-OF (BUS-VALUE (DROP-LSB BUS) (+ -1 WIDTH))) (INT))))
  (IMPLIES (IS-BUS BUS WIDTH) (= (TYPE-OF (BUS-VALUE BUS WIDTH)) (INT))))
 (IMPLIES (NOT (>= WIDTH 1))
  (IMPLIES (IS-BUS BUS WIDTH) (= (TYPE-OF (BUS-VALUE BUS WIDTH)) (INT)))))
Which simplifies
 with invocation of BUS-VALUE
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
BUS-ADDER
Beginning proof of BUS-ADDER ...
(IF (>= WIDTH 1) (M< (+ -1 WIDTH) WIDTH) (TRUE))
Which simplifies
 when rewriting with M<.NAT
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
POSITION-VALUE
Beginning proof of POSITION-VALUE ...
(IF (>= POS 2) (M< (+ -1 POS) POS) (TRUE))
Which simplifies
 when rewriting with M<.NAT
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
BUS-ADDER-SPEC
Beginning proof of BUS-ADDER-SPEC ...
(IMPLIES
 (AND (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH) (IS-SIGNAL CARRY-IN)
  (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
  (BUS-ADDER B0 B1 CARRY-IN OUT CARRY-OUT WIDTH))
 (=
  (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
   (BUS-VALUE OUT WIDTH))
  (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH))))
Inducting using the following scheme ...
 (AND
  (IMPLIES
   (AND (>= WIDTH 1)
    (ALL (INTERNAL-CARRY)
     (*P* (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY CARRY-OUT (DROP-LSB OUT)
      (+ -1 WIDTH))))
   (*P* B0 B1 CARRY-IN CARRY-OUT OUT WIDTH))
  (IMPLIES (NOT (>= WIDTH 1)) (*P* B0 B1 CARRY-IN CARRY-OUT OUT WIDTH)))
 produces ...
(AND
 (IMPLIES
  (AND (>= WIDTH 1)
   (ALL (INTERNAL-CARRY)
    (IMPLIES
     (AND (>= (+ -1 WIDTH) 0) (IS-BUS (DROP-LSB B0) (+ -1 WIDTH))
      (IS-BUS (DROP-LSB B1) (+ -1 WIDTH)) (IS-SIGNAL INTERNAL-CARRY)
      (IS-BUS (DROP-LSB OUT) (+ -1 WIDTH)) (IS-SIGNAL CARRY-OUT)
      (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY (DROP-LSB OUT)
       CARRY-OUT (+ -1 WIDTH)))
     (=
      (+ (* (POSITION-VALUE (+ -1 WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
       (BUS-VALUE (DROP-LSB OUT) (+ -1 WIDTH)))
      (+ (SIGNAL-VALUE INTERNAL-CARRY) (BUS-VALUE (DROP-LSB B0) (+ -1 WIDTH))
       (BUS-VALUE (DROP-LSB B1) (+ -1 WIDTH)))))))
  (IMPLIES
   (AND (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH) (IS-SIGNAL CARRY-IN)
    (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
    (BUS-ADDER B0 B1 CARRY-IN OUT CARRY-OUT WIDTH))
   (=
    (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
     (BUS-VALUE OUT WIDTH))
    (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH)))))
 (IMPLIES (NOT (>= WIDTH 1))
  (IMPLIES
   (AND (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH) (IS-SIGNAL CARRY-IN)
    (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
    (BUS-ADDER B0 B1 CARRY-IN OUT CARRY-OUT WIDTH))
   (=
    (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
     (BUS-VALUE OUT WIDTH))
    (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH))))))
Starting case 2 ...
(IMPLIES
 (AND (>= WIDTH 1)
  (ALL (INTERNAL-CARRY)
   (IMPLIES
    (AND (>= (+ -1 WIDTH) 0) (IS-BUS (DROP-LSB B0) (+ -1 WIDTH))
     (IS-BUS (DROP-LSB B1) (+ -1 WIDTH)) (IS-SIGNAL INTERNAL-CARRY)
     (IS-BUS (DROP-LSB OUT) (+ -1 WIDTH)) (IS-SIGNAL CARRY-OUT)
     (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY (DROP-LSB OUT)
      CARRY-OUT (+ -1 WIDTH)))
    (=
     (+ (* (POSITION-VALUE (+ -1 WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
      (BUS-VALUE (DROP-LSB OUT) (+ -1 WIDTH)))
     (+ (SIGNAL-VALUE INTERNAL-CARRY) (BUS-VALUE (DROP-LSB B0) (+ -1 WIDTH))
      (BUS-VALUE (DROP-LSB B1) (+ -1 WIDTH))))))
  (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH) (IS-SIGNAL CARRY-IN)
  (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
  (BUS-ADDER B0 B1 CARRY-IN OUT CARRY-OUT WIDTH))
 (=
  (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
   (BUS-VALUE OUT WIDTH))
  (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH))))
Invoking (BUS-ADDER B0 B1 CARRY-IN OUT CARRY-OUT WIDTH) gives ...
(IMPLIES
 (AND (>= WIDTH 1)
  (ALL (INTERNAL-CARRY)
   (IMPLIES
    (AND (>= (+ -1 WIDTH) 0) (IS-BUS (DROP-LSB B0) (+ -1 WIDTH))
     (IS-BUS (DROP-LSB B1) (+ -1 WIDTH)) (IS-SIGNAL INTERNAL-CARRY)
     (IS-BUS (DROP-LSB OUT) (+ -1 WIDTH)) (IS-SIGNAL CARRY-OUT)
     (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY (DROP-LSB OUT)
      CARRY-OUT (+ -1 WIDTH)))
    (=
     (+ (* (POSITION-VALUE (+ -1 WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
      (BUS-VALUE (DROP-LSB OUT) (+ -1 WIDTH)))
     (+ (SIGNAL-VALUE INTERNAL-CARRY) (BUS-VALUE (DROP-LSB B0) (+ -1 WIDTH))
      (BUS-VALUE (DROP-LSB B1) (+ -1 WIDTH))))))
  (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH) (IS-SIGNAL CARRY-IN)
  (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
  (IF (>= WIDTH 1)
   (SOME (INTERNAL-CARRY$0)
    (AND (IS-SIGNAL INTERNAL-CARRY$0)
     (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY$0 (DROP-LSB OUT)
      CARRY-OUT (+ -1 WIDTH))
     (ADDER (LSB B0) (LSB B1) CARRY-IN (LSB OUT) INTERNAL-CARRY$0)))
   (= CARRY-OUT CARRY-IN)))
 (=
  (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
   (BUS-VALUE OUT WIDTH))
  (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH))))
Prenexing produces ...
(IMPLIES
 (AND (>= WIDTH 1)
  (ALL (INTERNAL-CARRY$0)
   (IMPLIES
    (AND (>= (+ -1 WIDTH) 0) (IS-BUS (DROP-LSB B0) (+ -1 WIDTH))
     (IS-BUS (DROP-LSB B1) (+ -1 WIDTH)) (IS-SIGNAL INTERNAL-CARRY$0)
     (IS-BUS (DROP-LSB OUT) (+ -1 WIDTH)) (IS-SIGNAL CARRY-OUT)
     (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY$0 (DROP-LSB OUT)
      CARRY-OUT (+ -1 WIDTH)))
    (=
     (+ (* (POSITION-VALUE (+ -1 WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
      (BUS-VALUE (DROP-LSB OUT) (+ -1 WIDTH)))
     (+ (SIGNAL-VALUE INTERNAL-CARRY$0) (BUS-VALUE (DROP-LSB B0) (+ -1 WIDTH))
      (BUS-VALUE (DROP-LSB B1) (+ -1 WIDTH))))))
  (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH) (IS-SIGNAL CARRY-IN)
  (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
  (IF (>= WIDTH 1)
   (AND (IS-SIGNAL INTERNAL-CARRY)
    (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY (DROP-LSB OUT)
     CARRY-OUT (+ -1 WIDTH))
    (ADDER (LSB B0) (LSB B1) CARRY-IN (LSB OUT) INTERNAL-CARRY))
   (= CARRY-OUT CARRY-IN)))
 (=
  (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
   (BUS-VALUE OUT WIDTH))
  (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH))))
Instantiating (= INTERNAL-CARRY$0 INTERNAL-CARRY) gives ...
(IMPLIES
 (AND (>= WIDTH 1)
  (IMPLIES
   (AND (>= (+ -1 WIDTH) 0) (IS-BUS (DROP-LSB B0) (+ -1 WIDTH))
    (IS-BUS (DROP-LSB B1) (+ -1 WIDTH)) (IS-SIGNAL INTERNAL-CARRY)
    (IS-BUS (DROP-LSB OUT) (+ -1 WIDTH)) (IS-SIGNAL CARRY-OUT)
    (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY (DROP-LSB OUT)
     CARRY-OUT (+ -1 WIDTH)))
   (=
    (+ (* (POSITION-VALUE (+ -1 WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
     (BUS-VALUE (DROP-LSB OUT) (+ -1 WIDTH)))
    (+ (SIGNAL-VALUE INTERNAL-CARRY) (BUS-VALUE (DROP-LSB B0) (+ -1 WIDTH))
     (BUS-VALUE (DROP-LSB B1) (+ -1 WIDTH)))))
  (ALL (INTERNAL-CARRY$0)
   (IMPLIES
    (AND (>= (+ -1 WIDTH) 0) (IS-BUS (DROP-LSB B0) (+ -1 WIDTH))
     (IS-BUS (DROP-LSB B1) (+ -1 WIDTH)) (IS-SIGNAL INTERNAL-CARRY$0)
     (IS-BUS (DROP-LSB OUT) (+ -1 WIDTH)) (IS-SIGNAL CARRY-OUT)
     (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY$0 (DROP-LSB OUT)
      CARRY-OUT (+ -1 WIDTH)))
    (=
     (+ (* (POSITION-VALUE (+ -1 WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
      (BUS-VALUE (DROP-LSB OUT) (+ -1 WIDTH)))
     (+ (SIGNAL-VALUE INTERNAL-CARRY$0) (BUS-VALUE (DROP-LSB B0) (+ -1 WIDTH))
      (BUS-VALUE (DROP-LSB B1) (+ -1 WIDTH))))))
  (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH) (IS-SIGNAL CARRY-IN)
  (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
  (IF (>= WIDTH 1)
   (AND (IS-SIGNAL INTERNAL-CARRY)
    (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY (DROP-LSB OUT)
     CARRY-OUT (+ -1 WIDTH))
    (ADDER (LSB B0) (LSB B1) CARRY-IN (LSB OUT) INTERNAL-CARRY))
   (= CARRY-OUT CARRY-IN)))
 (=
  (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
   (BUS-VALUE OUT WIDTH))
  (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH))))
Rearranging gives ...
(IMPLIES
 (AND (>= WIDTH 1) (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH)
  (IS-SIGNAL CARRY-IN) (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
  (IMPLIES
   (AND (>= (+ -1 WIDTH) 0) (IS-BUS (DROP-LSB B0) (+ -1 WIDTH))
    (IS-BUS (DROP-LSB B1) (+ -1 WIDTH)) (IS-SIGNAL INTERNAL-CARRY)
    (IS-BUS (DROP-LSB OUT) (+ -1 WIDTH)) (IS-SIGNAL CARRY-OUT)
    (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY (DROP-LSB OUT)
     CARRY-OUT (+ -1 WIDTH)))
   (=
    (+ (* (POSITION-VALUE (+ -1 WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
     (BUS-VALUE (DROP-LSB OUT) (+ -1 WIDTH)))
    (+ (SIGNAL-VALUE INTERNAL-CARRY) (BUS-VALUE (DROP-LSB B0) (+ -1 WIDTH))
     (BUS-VALUE (DROP-LSB B1) (+ -1 WIDTH)))))
  (ALL (INTERNAL-CARRY$0)
   (IMPLIES
    (AND (>= (+ -1 WIDTH) 0) (IS-BUS (DROP-LSB B0) (+ -1 WIDTH))
     (IS-BUS (DROP-LSB B1) (+ -1 WIDTH)) (IS-SIGNAL INTERNAL-CARRY$0)
     (IS-BUS (DROP-LSB OUT) (+ -1 WIDTH)) (IS-SIGNAL CARRY-OUT)
     (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY$0 (DROP-LSB OUT)
      CARRY-OUT (+ -1 WIDTH)))
    (=
     (+ (* (POSITION-VALUE (+ -1 WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
      (BUS-VALUE (DROP-LSB OUT) (+ -1 WIDTH)))
     (+ (SIGNAL-VALUE INTERNAL-CARRY$0) (BUS-VALUE (DROP-LSB B0) (+ -1 WIDTH))
      (BUS-VALUE (DROP-LSB B1) (+ -1 WIDTH))))))
  (IF (>= WIDTH 1)
   (AND (IS-SIGNAL INTERNAL-CARRY)
    (BUS-ADDER (DROP-LSB B0) (DROP-LSB B1) INTERNAL-CARRY (DROP-LSB OUT)
     CARRY-OUT (+ -1 WIDTH))
    (ADDER (LSB B0) (LSB B1) CARRY-IN (LSB OUT) INTERNAL-CARRY))
   (= CARRY-OUT CARRY-IN)))
 (=
  (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
   (BUS-VALUE OUT WIDTH))
  (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH))))
Which simplifies
 with invocation of BUS-VALUE, POSITION-VALUE
 when rewriting with ADDER-SPEC
 forward chaining using IS-SIGNAL-TYPE, >=.SAME.TYPE
 with the assumptions LSB-IS-SIGNAL, BUS-VALUE-TYPE, SIGNAL-VALUE-TYPE,
DROP-LSB-IS-BUS to ...
(TRUE)
Starting case 1 ...
(IMPLIES
 (AND (NOT (>= WIDTH 1)) (>= WIDTH 0) (IS-BUS B0 WIDTH) (IS-BUS B1 WIDTH)
  (IS-SIGNAL CARRY-IN) (IS-BUS OUT WIDTH) (IS-SIGNAL CARRY-OUT)
  (BUS-ADDER B0 B1 CARRY-IN OUT CARRY-OUT WIDTH))
 (=
  (+ (* (POSITION-VALUE (+ WIDTH 1)) (SIGNAL-VALUE CARRY-OUT))
   (BUS-VALUE OUT WIDTH))
  (+ (SIGNAL-VALUE CARRY-IN) (BUS-VALUE B0 WIDTH) (BUS-VALUE B1 WIDTH))))
Which simplifies
 with invocation of BUS-VALUE, SIGNAL-VALUE, POSITION-VALUE, BUS-ADDER,
IS-SIGNAL
 forward chaining using IS-SIGNAL-TYPE, >=.SAME.TYPE
 with the assumptions BUS-VALUE-TYPE, SIGNAL-VALUE-TYPE to ...
(TRUE)
Completing all cases produces ...
(TRUE)
Done.