;;;
;;;  Finiteness
;;;
;;; 

(load setrules)
(load nat)
(load fn)
(load intfn)
(load pairfn)
(load elem)

(function is-finite (x) ()
  (some (n f)
    (and (in n (nat!nat))
	 (in f (fn!surj (range 1 n) x)))))

(axiom type-of-is-finite (x)
  (= (type-of (is-finite x))
     (bool)))
(REDUCE)

(zf-function possible-counts (x)
  (select (n (nat!nat))
    (some (f) (in f (fn!surj (range 1 n) x)))))

(function card (x) ()
  (nat!smallest-nat-member (possible-counts x)))

(rule nat-zerop (n)
  (= (nat!zerop n)
     (implies (in n (int))
	      (<= n 0))))
(INVOKE NAT!ZEROP)
(SIMPLIFY)

;;; some necessary results

(axiom lemma-0 (n f x)
  (implies (and (in n (nat!nat))
		(in f (fn!surj (range 1 n) x)))
	   (and (is-finite x)
		(in (card x) (nat!nat))
		(<= (card x) n))))
(INVOKE IS-FINITE)
(SIMPLIFY)
(INVOKE CARD)
(USE NAT!SMALLEST-IS-SMALLEST-2 (N N) (X (POSSIBLE-COUNTS X)))
(REARRANGE)
(REWRITE)
(INSTANTIATE (N$0 N))
(SIMPLIFY)


(axiom lemma-0-version-2 (n f)
  (implies (and (in n (nat!nat))
		(fn!is-function f)
		(= (rel!dom f) (range 1 n)))
	   (and (is-finite (rel!ran f))
		(in (card (rel!ran f)) (nat!nat))
		(<= (card (rel!ran f)) n))))
(USE LEMMA-0 (F F) (N N) (X (REL!RAN F)))
(REARRANGE)
(WITH-ENABLED (FN!IN-SURJ) (REWRITE))

(axiom lemma-1 (x)
  (implies (is-finite x)
	   (and (in (card x) (nat!nat))
		(some (f) (in f (fn!surj (range 1 (card x)) x))))))
(REDUCE)
(PRENEX)
(USE NAT!SMALLEST-IS-SMALLEST-2 (N N) (X (POSSIBLE-COUNTS X)))
(REARRANGE)
(REWRITE)

;;; (count x n) = (card (inter x (range 1 n)))
;;;
(function count (x n)
    ((measure n))
  (if (>= n 1)
      (if (in n x)
	  (+ 1 (count x (+ -1 n)))
	  (count x (+ -1 n)))
      0))
(REDUCE)

;;; (enumerate x n) is a bijection between
;;; (range 1 (count x n)) and (inter x (range 1 n))
;;;
(function enumerate (x n)
    ((measure n))
  (if (>= n 1)
      (if (in n x)
	  (setadd (pair!pair (count x n) n)
		  (enumerate x (+ -1 n)))
	  (enumerate x (+ -1 n)))
      (nullset)))
(REDUCE)

(grule count-range-1 (x n)
  (<= 0 (count x n)))
(prove-by-induction)

(grule count-range-2 (x n)
  (implies (>= n 0)
	   (<= (count x n) n)))
(PROVE-BY-INDUCTION)

(rule in-int (x)
  (= (in x (int))
     (= (type-of x) (int))))
(SPLIT (= (TYPE-OF X) (INT)))
(SIMPLIFY)

(axiom count-maximum (x n)
  (implies (= (count x n) n)
	   (subset (range 1 n) x)))
(INDUCT (NAT!WEAK-INDUCTION N))
(REDUCE)
(SPLIT (= E$0 N))
(REDUCE)

(rule dom-enumerate (x n)
  (= (rel!dom (enumerate x n))
     (range 1 (count x n))))
(INDUCT)
(REDUCE)
(USE ELEM!RANGE-TOP-EXPANSION (X 1) (Y (+ (COUNT X (+ -1 N)) 1)))
(REARRANGE)
(REWRITE)

(rule ran-enumerate (x n)
  (= (rel!ran (enumerate x n))
     (inter x (range 1 n))))
(INDUCT)
(REDUCE)
(USE ELEM!RANGE-TOP-EXPANSION (X 1) (Y N))
(REARRANGE)
(REWRITE)
(EQUALITY-SUBSTITUTE)
(REWRITE)

(rule is-function-enumerate (x n)
  (= (fn!is-function (enumerate x n)) (true)))
(PROVE-BY-INDUCTION)

(rule is-function-inverse-enumerate (x n)
  (= (fn!is-function (rel!inverse (enumerate x n))) (true)))
(PROVE-BY-INDUCTION)

(axiom lemma-2 (n f)
  (implies (and (in n (nat!nat))
		(fn!is-function f)
		(subset (rel!dom f) (range 1 n)))
	   (and (is-finite (rel!ran f))
		(<= (card (rel!ran f)) (count (rel!dom f) n)))))
(USE LEMMA-0-VERSION-2
     (N (COUNT (REL!DOM F) N))
     (F (REL!COMP (ENUMERATE (REL!DOM F) N) F)))
(REARRANGE)
(REWRITE)

(axiom lemma-2-weak (n f)
  (implies (and (in n (nat!nat))
		(fn!is-function f)
		(subset (rel!dom f) (range 1 n)))
	   (and (is-finite (rel!ran f))
		(<= (card (rel!ran f)) n))))
(USE LEMMA-2 (N N)(F F))
(REARRANGE)
(REWRITE)

;;; now the main results

(frule finite-card-nat (x)
  (implies (is-finite x)
	   (>= (card x) 0)))
(USE LEMMA-1 (X X))
(REWRITE)

(axiom finite-has-enumeration (x)
  (implies (is-finite x)
	   (some (f) (in f (fn!surj (range 1 (card x)) x)))))
(USE LEMMA-1 (X X))
(REWRITE)

(rule is-finite-nullset ()
  (= (is-finite (nullset))
     (true)))
(USE LEMMA-0-VERSION-2 (N 0) (F (NULLSET)))
(REWRITE)

(rule card-nullset ()
  (= (card (nullset))
     0))
(USE LEMMA-0 (N 0) (F (NULLSET)) (X (NULLSET)))
(REWRITE)

(axiom possible-0-implies-nullset (x)
  (implies (in 0 (possible-counts x))
	   (= x (nullset))))
(REDUCE)

(axiom finite-implies-card-possible (x)
  (implies (is-finite x)
	   (in (card x) (possible-counts x))))
(USE LEMMA-1 (X X))
(REWRITE)

(axiom card-0-iff-nullset (x)
  (implies (is-finite x)
	   (= (= (card x) 0)
	      (= x (nullset)))))
(SPLIT (= X (NULLSET)))
(REWRITE)
(USE FINITE-IMPLIES-CARD-POSSIBLE (X X))
(USE POSSIBLE-0-IMPLIES-NULLSET (X X))
(SIMPLIFY)

(rule is-finite-unit (x)
  (= (is-finite (unit x))
     (true)))
(USE LEMMA-0-VERSION-2 (N 1) (F (UNIT (PAIR!PAIR 1 X))))
(REWRITE)

(rule card-unit (x)
  (= (card (unit x))
     1))
(USE LEMMA-0-VERSION-2 (N 1) (F (UNIT (PAIR!PAIR 1 X))))
(REWRITE)
(USE CARD-0-IFF-NULLSET (X (UNIT X)))
(REWRITE)

(axiom is-finite-monotonic (x y)
  (implies (and (is-finite y)
		(subset x y))
	   (and (is-finite x)
		(<= (card x) (card y)))))
(USE LEMMA-1 (X Y))
(SIMPLIFY)
(PRENEX)
(USE LEMMA-2 (F (REL!RAN-RESTRICT F X)) (N (CARD Y)))
(REARRANGE)
(REWRITE)
(USE REL!IMAGE-SUBSET-RAN (R (REL!INVERSE F)) (X X))
(WITH-ENABLED (FN!IN-SURJ) (REWRITE))

(grule is-finite-union-lemma (x y)
  (implies (and (is-finite x)
		(is-finite y))
	   (is-finite (union x y))))
(INVOKE (IS-FINITE X))
(INVOKE (IS-FINITE Y))
(PRENEX)
(USE LEMMA-0
     (N (+ N N$0))
     (X (UNION X Y))
     (F (UNION F (REL!COMP (INTFN!ADD (NEGATE N)) F$0))))
(REARRANGE)
(WITH-ENABLED (FN!IN-SURJ FN!IS-FUNCTION-UNION) (REWRITE))
(USE INTFN!IMAGE-ADD-RANGE (I N) (J 1) (K N$0))
(USE REL!IMAGE-OF-SUPERSET-OF-DOM (R F$0) (X (INT)))
(REARRANGE)
(EQUALITY-SUBSTITUTE (REL!DOM F))
(EQUALITY-SUBSTITUTE (REL!DOM F$0))
(WITH-DISABLED (IS-FINITE) (REDUCE))

(rule is-finite-union (x y)
  (= (is-finite (union x y))
     (and (is-finite x)
	  (is-finite y))))
(USE IS-FINITE-UNION-LEMMA (X X) (Y Y))
(USE IS-FINITE-MONOTONIC (X X) (Y (UNION X Y)))
(USE IS-FINITE-MONOTONIC (X Y) (Y (UNION X Y)))
(REWRITE)

(rule is-finite-setadd (x y)
  (= (is-finite (setadd x y))
     (is-finite y)))
(USE IS-FINITE-UNIT (X X))
(USE IS-FINITE-UNION (X (UNIT X)) (Y Y))
(REARRANGE)
(REWRITE)

(axiom card-setadd-lemma (x y)
  (implies (is-finite y)
	   (<= (card (setadd x y))
	       (+ 1 (card y)))))
(USE SETRULES!SETADD-MEMBER (A X) (X Y))
(SIMPLIFY)
(USE LEMMA-1 (X Y))
(SIMPLIFY)
(PRENEX)
(USE LEMMA-0
     (N (+ 1 (CARD Y)))
     (F (SETADD (PAIR!PAIR (+ 1 (CARD Y)) X) F))
     (X (SETADD X Y)))
(REARRANGE)
(WITH-ENABLED (FN!IN-SURJ) (REWRITE))
(USE ELEM!RANGE-TOP-EXPANSION (X 1) (Y (+ (CARD Y) 1)))
(REARRANGE)
(EQUALITY-SUBSTITUTE (REL!DOM F))
(REWRITE)

(axiom card-setadd-lemma-2 (f x)
  (implies (and (fn!is-function f)
		(in x (rel!ran f)))
	   (some (y) (and (in y (rel!dom f))
			  (= (fn!apply f y) x)))))
(APPLY REL!IN-RAN)
(INSTANTIATE (Y A))
(USE FN!APPLY-UNIQUE (F F) (X A) (Y X))
(REWRITE)

(axiom image-lemma (f x y)
  (implies (and (fn!is-function f)
		(subset x (rel!image (rel!inverse f) y)))
	   (subset (rel!image f x) y)))
(WITH-ENABLED (REL!IN-IMAGE) (REDUCE))
(PRENEX)
(INSTANTIATE (E$0 Z))
(USE FN!APPLY-UNIQUE (F F) (X Z) (Y E))
(REARRANGE)
(REWRITE)

(axiom card-strictly-monotonic (x y)
  (implies (and (is-finite y)
		(subset x y)
		(= (card x)(card y)))
	   (= x y)))
(USE LEMMA-1 (X Y))
(SIMPLIFY)
(PRENEX)
(USE LEMMA-2 (N (CARD Y)) (F (REL!RAN-RESTRICT F X)))
(USE REL!IMAGE-SUBSET-RAN (R (REL!INVERSE F)) (X X))
(USE COUNT-MAXIMUM (X (REL!IMAGE (REL!INVERSE F) X)) (N (CARD Y)))
(USE IMAGE-LEMMA (F F) (X (REL!DOM F)) (Y X))
(USE =.EXTENSIONAL.SUBSET (X X) (Y Y))
(REARRANGE)
(WITH-ENABLED (FN!IN-SURJ) (REWRITE))

(rule card-setadd (x y)
  (implies (is-finite y)
	   (= (card (setadd x y))
	      (if (in x y)
		  (card y)
		  (+ 1 (card y))))))
(USE SETRULES!SETADD-MEMBER (A X) (X Y))
(SIMPLIFY)
(USE CARD-SETADD-LEMMA (X X) (Y Y))
(USE CARD-STRICTLY-MONOTONIC (X Y) (Y (SETADD X Y)))
(REARRANGE)
(REWRITE)
(USE IS-FINITE-MONOTONIC (X Y) (Y (SETADD X Y)))
(REARRANGE)
(INVOKE SUBSET)
(REWRITE)


(axiom card-union-lemma (y n)
  (and (all (x)
	    (implies (and (is-finite x)
			  (is-finite y)
			  (= (card x) n))
		     (= (+ (card x) (card y))
			(+ (card (union x y)) (card (inter x y))))))
       (true)))
(INDUCT (NAT!WEAK-INDUCTION N))
(PRENEX)
(CASES)
(USE CARD-0-IFF-NULLSET (X X))
(REARRANGE)
(REWRITE)
(NEXT)
(PRENEX)
(USE CARD-0-IFF-NULLSET (X X))
(REARRANGE)
(REWRITE)
(USE SETRULES!SET-DECOMPOSITION (X X))
(SIMPLIFY)
(PRENEX)
(INSTANTIATE (X$0 B))
(EQUALITY-SUBSTITUTE X)
(REWRITE)
(SPLIT (IS-FINITE B))
(REWRITE)
(USE IS-FINITE-MONOTONIC (X (INTER B Y)) (Y Y))
(REWRITE)
(NEXT)

(axiom card-union (x y)
  (implies (and (is-finite x)
		(is-finite y))
	   (= (+ (card x) (card y))
	      (+ (card (union x y)) (card (inter x y))))))
(USE CARD-UNION-LEMMA (N (CARD X)) (Y Y))
(INSTANTIATE (X$0 X))
(REARRANGE)
(SIMPLIFY)

(rule is-finite-diff (x y)
  (implies (is-finite x)
	   (= (is-finite (diff x y)) (true))))
(USE IS-FINITE-MONOTONIC (X (DIFF X Y)) (Y X))
(REWRITE)

(rule card-diff (x y)
  (implies (is-finite x)
	   (= (card (diff x y))
	      (- (card x) (card (inter x y))))))
(USE CARD-UNION (X (DIFF X Y)) (Y (INTER X Y)))
(USE IS-FINITE-MONOTONIC (X (INTER X Y)) (Y X))
(REARRANGE)
(REWRITE)
(SPLIT (= X (UNION (INTER X Y) (DIFF X Y))))
(SIMPLIFY)
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))
(USE IS-FINITE-DIFF (X X) (Y Y))
(WITH-DISABLED (IS-FINITE-DIFF) (REWRITE))

(rule is-finite-simple-range (n)
  (= (is-finite (range 1 n)) (true)))
(INDUCT (NAT!WEAK-INDUCTION N))
(REWRITE)
(USE ELEM!RANGE-TOP-EXPANSION (X 1) (Y N))
(REARRANGE)
(REWRITE)
(EQUALITY-SUBSTITUTE)
(REWRITE)

;; rhs could also be (max 0 n) -- but not (max n 0)!
(rule card-simple-range (n)
  (= (card (range 1 n))
     (if (nat!zerop n)
	 0
	 n)))
(INDUCT (NAT!WEAK-INDUCTION N))
(REWRITE)
(USE ELEM!RANGE-TOP-EXPANSION (X 1) (Y N))
(REARRANGE)
(REWRITE)
(EQUALITY-SUBSTITUTE)
(REWRITE)

(axiom is-finite-range-lemma (n k)
    (implies (and (in n (int))
		  (in k (int)))
	     (and (is-finite (range n (+ n k)))
		  (= (card (range n (+ n k)))
		     (max 0 (+ 1 k))))))
(SPLIT (< K 0))
(INVOKE MAX)
(REWRITE)
(INDUCT (NAT!WEAK-INDUCTION K))
(REWRITE)
(USE ELEM!RANGE-TOP-EXPANSION (X N) (Y (+ K N)))
(REARRANGE)
(REWRITE)
(EQUALITY-SUBSTITUTE (RANGE N (+ K N)))
(REWRITE)

;(rule is-finite-range (x y)
;  (is-finite (range x y)))
;
;(rule card-range (x y)
;  (implies (elem-type-p (type-of x))
;	   (= (card (range x y))
;	      (if (= (type-of x)(type-of y))
;		  (max 0 (+ 1 (- (ord x)(ord y))))
;		  0))))


(axiom finite-function-dom-ran (f)
  (implies (and (fn!is-function f)
		(is-finite (rel!dom f)))
	   (and (is-finite (rel!ran f))
		(<= (card (rel!ran f)) (card (rel!dom f))))))
(USE LEMMA-1 (X (REL!DOM F)))
(SIMPLIFY)
(PRENEX)
(USE LEMMA-0-VERSION-2 (N (CARD (REL!DOM F))) (F (REL!COMP F$0 F)))
(REARRANGE)
(WITH-ENABLED (FN!IN-SURJ) (REWRITE))
(USE REL!IMAGE-DOM (R (REL!INVERSE F$0)))
(REARRANGE)
(EQUALITY-SUBSTITUTE (REL!RAN F$0))
(WITH-DISABLED (REL!IMAGE-OF-SUPERSET-OF-DOM) (REWRITE))

(axiom finite-function-dom-lemma (f)
  (fn!is-function (rel!inverse (pairfn!join (rel!id (rel!dom f)) f))))
(INVOKE FN!IS-FUNCTION)
(REWRITE)

(axiom finite-function-dom (f)
  (implies (and (fn!is-function f)
		(is-finite (rel!dom f)))
	   (and (is-finite f)
		(= (card f) (card (rel!dom f))))))
(USE FINITE-FUNCTION-DOM-RAN
     (F (REL!INVERSE (PAIRFN!JOIN (REL!ID (REL!DOM F)) F))))
(USE FINITE-FUNCTION-DOM-RAN (F (PAIRFN!JOIN (REL!ID (REL!DOM F)) F)))
(USE FINITE-FUNCTION-DOM-LEMMA (F F))
(REARRANGE)
(REWRITE)

(axiom finite-implies-dom-finite (x)
  (implies (is-finite x)
	   (and (is-finite (rel!dom x))
		(<= (card (rel!dom x)) (card x)))))
(USE FINITE-FUNCTION-DOM-RAN
     (F (REL!INVERSE (PAIRFN!JOIN (REL!ID (REL!DOM X)) X))))
(REARRANGE)
(REWRITE)
(USE IS-FINITE-MONOTONIC (Y X) (X (REL!DOM-RESTRICT (REL!DOM X) X)))
(INVOKE SUBSET)
(INVOKE FN!IS-FUNCTION)
(REWRITE)

(axiom finite-implies-ran-finite (x)
  (implies (is-finite x)
	   (and (is-finite (rel!ran x))
		(<= (card (rel!ran x)) (card x)))))
(USE FINITE-FUNCTION-DOM-RAN
     (F (REL!INVERSE (PAIRFN!JOIN (REL!INVERSE X) (REL!ID (REL!RAN X))))))
(REARRANGE)
(REWRITE)
(USE IS-FINITE-MONOTONIC (Y X) (X (REL!RAN-RESTRICT X (REL!RAN X))))
(INVOKE SUBSET)
(INVOKE FN!IS-FUNCTION)
(REWRITE)


;;; finite powerset

(zf-function finite-subsets (x)
  (select (y (powerset x))
    (is-finite y)))

(rule finite-subsets-of-finite-set (x)
  (implies (is-finite x)
	   (= (finite-subsets x)
	      (powerset x))))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)
(USE IS-FINITE-MONOTONIC (Y X))
(SIMPLIFY)

(function finite-set-induction (x)
    ((measure (card x)))
  (if (is-finite x)
      (if (= x (nullset))
	  (true)
	  (all (e) (if (in e x)
		       (finite-set-induction (diff x (unit e)))
		       (true))))
      (true)))
(USE CARD-0-IFF-NULLSET (X X))
(REWRITE)

(rule add-remove-member (x y)
  (implies (in x y)
	   (= (setadd x (diff y (setadd x (nullset))))
	      y)))
(APPLY SETRULES!EXTENSIONALITY)
(REWRITE)

(function absorbs (x y) ()
  (all (a b) (implies (and (in a x)
			   (in b y))
		      (in (setadd a b) y))))


(axiom finite-subsets-induction-lemma (x y)
  (implies (and (in (nullset) y)
		(absorbs x y))
	   (subset (finite-subsets x) y)))
(INVOKE SUBSET)
(PRENEX)
(INDUCT (FINITE-SET-INDUCTION E))
(REWRITE)
(REARRANGE)
(SIMPLIFY)
(USE SETRULES!SET-DECOMPOSITION (X E))
(SIMPLIFY)
(PRENEX)
(INSTANTIATE (E$0 A))
(INVOKE SUBSET)
(REWRITE)
(INVOKE ABSORBS)
(INSTANTIATE (A$0 A) (B$0 (DIFF E (SETADD A (NULLSET)))))
(REARRANGE)
(REWRITE)

(axiom finite-subsets-induction (x y)
  (implies (and (in (nullset) y)
		(all (a b) (implies (and (in a x)
					 (in b y))
				    (in (setadd a b) y))))
	   (subset (finite-subsets x) y)))
(USE FINITE-SUBSETS-INDUCTION-LEMMA (X X) (Y Y))
(INVOKE ABSORBS)
(INSTANTIATE (A$0 A) (B$0 B))
(PRENEX)
(SIMPLIFY)
