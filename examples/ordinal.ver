;;; Ordinal numbers
;;;

(load setrules)

;;;ordinal successor

(function sc (s) ()
  (setadd s s))

(rule self-in-sc (x)
  (= (in x (sc x))
     (true)))
(REDUCE)

(function is-transitive (s) ()
  (all (x)
    (implies (in x s)
	     (subset x s))))

(rule is-transitive-nullset ()
  (= (is-transitive (nullset))
     (true)))
(REDUCE)

(rule is-transitive-sc (s)
  (= (is-transitive (sc s))
     (is-transitive s)))
(SPLIT (IS-TRANSITIVE (SC S)))
(SIMPLIFY)
(CASES)
(NEXT)
(REDUCE)
(INSTANTIATE (X$0 X) (E$0 E))
(SIMPLIFY)
(NEXT)
(INVOKE IS-TRANSITIVE)
(INVOKE SC)
(REWRITE)
(PRENEX)
(USE SETRULES!NO-2-CYCLE (S X)(T S))
(INSTANTIATE (X$0 X))
(REDUCE)

(function every-member-is-transitive (s) ()
  (all (x) (implies (in x s)
		    (is-transitive x))))

(axiom is-transitive-cup (s)
  (implies (every-member-is-transitive s)
	   (is-transitive (cup s))))
(INVOKE IS-TRANSITIVE)
(REWRITE)
(INVOKE EVERY-MEMBER-IS-TRANSITIVE)
(INSTANTIATE (X Y))
(INVOKE (IS-TRANSITIVE Y))
(INSTANTIATE (X X$1))
(REWRITE)

;;; definition of an ordinal

(function is-ordinal (s) ()
  (and (is-transitive s)
       (every-member-is-transitive s)))

(rule is-ordinal-nullset ()
  (= (is-ordinal (nullset))
     (true)))
(REDUCE)

(rule every-member-is-transitive-setadd (x s)
  (= (every-member-is-transitive (setadd x s))
     (and (is-transitive x)
	  (every-member-is-transitive s))))
(SPLIT (EVERY-MEMBER-IS-TRANSITIVE (SETADD X S)))
(SIMPLIFY)
(WITH-DISABLED (IS-TRANSITIVE) (REDUCE))
(CASES)
(INSTANTIATE (X$0 X$1))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (X$2 X$0))
(SIMPLIFY)
(NEXT)

(rule is-ordinal-sc (s)
  (= (is-ordinal (sc s))
     (is-ordinal s)))
(INVOKE IS-ORDINAL)
(REWRITE)
(INVOKE SC)
(REWRITE)

(axiom is-ordinal-cup (s)
  (implies (all (x) (implies (in x s)
			     (is-ordinal x)))
	   (is-ordinal (cup s))))
(INVOKE IS-ORDINAL)
(USE IS-TRANSITIVE-CUP (S S))
(INVOKE EVERY-MEMBER-IS-TRANSITIVE)
(REWRITE)
(CASES)
(INSTANTIATE (X$0 Y) (X$1 X$2))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (X$3 X))
(SIMPLIFY)
(NEXT)

(axiom is-ordinal-inherited (x y)
  (implies (and (is-ordinal y)
		(in x y))
	   (is-ordinal x)))
(INVOKE IS-ORDINAL)
(INVOKE EVERY-MEMBER-IS-TRANSITIVE)
(INVOKE (IS-TRANSITIVE Y))
(INVOKE SUBSET)
(INSTANTIATE (X$0 X) (E X$2))
(SIMPLIFY)

(axiom ordinal-element (x y)
  (implies (and (is-ordinal y)
		(in x y))
	   (and (is-ordinal x)
		(subset x y))))
(USE IS-ORDINAL-INHERITED (X X)(Y Y))
(SIMPLIFY)
(INVOKE (IS-ORDINAL Y))
(INVOKE IS-TRANSITIVE)
(SIMPLIFY)

;;; this next function is used in the induction to show total order or ordinals

(function p (x y) ()
  (implies (and (is-ordinal x)
		(is-ordinal y)
		(subset x y)
		(not (= x y)))
	   (in x y)))

(axiom p-step (x y)
  (implies (all (a) (implies (in a y)
			     (p a x)))
	   (p x y)))
(USE AXIOM.OF.REGULAR.CHOICE (X (DIFF Y X)))
(INVOKE P)
(APPLY =.EXTENSIONAL.SUBSET (= X Y))
(REWRITE)
(USE ORDINAL-ELEMENT (X (CHOICE (DIFF Y X))) (Y Y))
(INSTANTIATE (A (CHOICE (DIFF Y X))))
(REWRITE)

(zf-function p-set (z)
  (select (y z)
	  (some (x) (not (p x y)))))

(axiom p-induction (z)
  (implies (is-transitive z)
	   (= (p-set z) (nullset))))
(USE AXIOM.OF.REGULAR.CHOICE (X (P-SET Z)))
(REWRITE)
(PRENEX)
(USE P-STEP (X X) (Y (CHOICE (P-SET Z))))
(SIMPLIFY)
(PRENEX)
(USE P-STEP (X A) (Y X))
(INVOKE (IS-TRANSITIVE Z))
(INVOKE SUBSET)
(SIMPLIFY)
(INSTANTIATE (E A))
(SIMPLIFY)
(CASES)
(INSTANTIATE (X$2 A$0))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (X$4 (CHOICE (P-SET Z))))
(SIMPLIFY)
(NEXT)


(axiom in-nullset-lemma (e s)
  (implies (= s (nullset))
	   (not (in e s))))
(EQUALITY-SUBSTITUTE)
(REWRITE)

(axiom total-order-with-p (x y)
  (p x y))
(USE IN-NULLSET-LEMMA (E Y) (S (P-SET (SC Y))))
(USE P-INDUCTION (Z (SC Y)))
(SPLIT (IN Y (P-SET (SC Y))))
(SIMPLIFY)
(REWRITE)
(INVOKE (P X Y))
(INVOKE (IS-ORDINAL Y))
(SIMPLIFY)

(load cap)

(axiom cap-transitive-subset (s)
  (implies (and (not (= s (nullset)))
		(is-transitive s))
	   (subset (cap!cap s) s)))
(USE SETRULES!SET-CASES (X S))
(REDUCE)
(INSTANTIATE (Z E))
(SIMPLIFY)
(INSTANTIATE (X E))
(SIMPLIFY)


(axiom cap-not-self (s)
  (implies (not (= s (nullset)))
	   (not (= (cap!cap s) s))))
(APPLY SETRULES!EXTENSIONALITY (= (CAP!CAP S) S))
(REDUCE)
(INSTANTIATE (Z E))
(REWRITE)

(axiom is-transitive-cap (x)
  (implies (every-member-is-transitive x)
	   (is-transitive (cap!cap x))))
(REDUCE)
(INSTANTIATE (E E$0) (X$0 Z$0) (X$1 X$2))
(SIMPLIFY)

(axiom is-ordinal-cap (s)
  (implies (all (x) (implies (in x s) (is-ordinal x)))
	   (is-ordinal (cap!cap s))))
(INVOKE IS-ORDINAL)
(USE IS-TRANSITIVE-CAP (X S))
(INVOKE EVERY-MEMBER-IS-TRANSITIVE)
(REWRITE)
(USE SETRULES!SET-CASES (X S))
(REARRANGE)
(REWRITE)
(CASES)
(PRENEX)
(INSTANTIATE (X$1 E) (X$2 X))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (X$3 X))
(SIMPLIFY)
(NEXT)

(axiom ordinal-set-has-minimum-lemma (x)
  (implies (and (not (= x (nullset)))
		(all (e) (implies (in e x) (is-ordinal e))))
	   (in (cap!cap x) x)))
(USE SETRULES!IN-SELF (S (CAP!CAP X)))
(REWRITE)
(PRENEX)
(USE TOTAL-ORDER-WITH-P (X (CAP!CAP X)) (Y Z))
(INVOKE P)
(USE IS-ORDINAL-CAP (S X))
(SIMPLIFY)
(SPLIT (IN Z X))
(REWRITE)

(axiom ordinal-set-has-minimum-lemma-2 (x b)
  (implies (and (in b x)
		(not (= b (cap!cap x)))
		(all (e) (implies (in e x) (is-ordinal e))))
	   (in (cap!cap x) b)))
(USE TOTAL-ORDER-WITH-P (X (CAP!CAP X)) (Y B))
(USE IS-ORDINAL-CAP (S X))
(INVOKE P)
(REWRITE)
(SPLIT (IN B X))
(REWRITE)

(function ordinal-< (x y) ()
  (in x y))

(function ordinal-<= (x y) ()
  (or (in x y) (= x y)))

(function smallest (x) ()
  (cap!cap x))

(axiom ordinal-set-has-minimum (x a)
  (implies (and (not (= x (nullset)))
		(all (e) (implies (in e x) (is-ordinal e))))
	   (and (in (smallest x) x)
		(implies (in a x)
			 (ordinal-<= (smallest x) a)))))
(INVOKE SMALLEST)
(INVOKE ORDINAL-<=)
(USE ORDINAL-SET-HAS-MINIMUM-LEMMA (X X))
(USE ORDINAL-SET-HAS-MINIMUM-LEMMA-2 (X X) (B A))
(SIMPLIFY)

(axiom total-order (x y)
  (implies (and (is-ordinal x)
		(is-ordinal y))
	   (= (ordinal-< x y)
	      (not (ordinal-<= y x)))))
(USE ORDINAL-SET-HAS-MINIMUM (X (SETADD X (SETADD Y (NULLSET)))))
(REARRANGE)
(REWRITE)
(INVOKE ORDINAL-<)
(INVOKE ORDINAL-<=)
(USE SETRULES!IN-SELF (S X))
(SIMPLIFY)
(USE SETRULES!NO-2-CYCLE (S X) (T Y))
(SIMPLIFY)
