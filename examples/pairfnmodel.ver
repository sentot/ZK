;;;
;;; functions operating on pairs

(load fn)
(load setrules)

(disabled
  (rule in-pair-function (x y f)		; loops with other rules
    (implies (fn!is-function f)
	     (= (in (pair!pair x y) f)
		(and (in x (rel!dom f))
		     (= y (fn!apply f x)))))))
(USE FN!APPLY-UNIQUE (F F) (X X) (Y Y))
(USE FN!APPLY-DEFINITION (F F) (X X))
(WITH-ENABLED (REL!IN-DOM) (REWRITE))


;;; relational join

(zf-function join (r s)
  (select (p (pair!cross (inter (rel!dom r) (rel!dom s))
		       (pair!cross (rel!ran r) (rel!ran s))))
    (and (in (pair!pair (pair!fst p) (pair!fst (pair!snd p))) r)
	 (in (pair!pair (pair!fst p) (pair!snd (pair!snd p))) s))))

(rule in-join (x r s)
  (= (in x (join r s))
     (and (pair!is-pair x)
	  (pair!is-pair (pair!snd x))
	  (in (pair!pair (pair!fst x) (pair!fst (pair!snd x))) r)
	  (in (pair!pair (pair!fst x) (pair!snd (pair!snd x))) s))))
(WITH-ENABLED (REL!IN-DOM REL!IN-RAN) (REWRITE))

(rule dom-join (r s)
  (= (rel!dom (join r s))
     (inter (rel!dom r) (rel!dom s))))
(APPLY SETRULES!EXTENSIONALITY)
(WITH-ENABLED (REL!IN-DOM) (REWRITE))
(CASES)
(PRENEX)
(REWRITE)
(NEXT)
(INSTANTIATE (B (PAIR!PAIR B$2 B$3)))
(REWRITE)
(NEXT)

(rule is-relation-join (f g)
  (= (rel!is-relation (join f g))
     (true)))
(WITH-ENABLED (REL!IS-RELATION) (REDUCE))

(rule is-function-join (f g)
  (implies (and (fn!is-function f)
		(fn!is-function g))
	   (= (fn!is-function (join f g)) (true))))
(INVOKE (FN!IS-FUNCTION (JOIN F G)))
(PRENEX)
(USE FN!FUNCTION-PROPERTY (F F) (A A) (B (PAIR!FST B)) (C (PAIR!FST C)))
(USE FN!FUNCTION-PROPERTY (F G) (A A) (B (PAIR!SND B)) (C (PAIR!SND C)))
(REWRITE)

(rule apply-join-functions (f g x)
  (implies (and (fn!is-function f)
		(fn!is-function g)
		(in x (rel!dom (join f g))))
	   (= (fn!apply (join f g) x)
	      (pair!pair (fn!apply f x)
			 (fn!apply g x)))))
(USE FN!APPLY-DEFINITION (F (JOIN F G)) (X X))
(USE FN!APPLY-UNIQUE (F F) (X X) (Y (PAIR!FST (FN!APPLY (JOIN F G) X))))
(USE FN!APPLY-UNIQUE (F G) (X X) (Y (PAIR!SND (FN!APPLY (JOIN F G) X))))
(REARRANGE)
(REWRITE)

(rule ran-join (r s)
  (= (rel!ran (join r s))
     (rel!comp (rel!inverse r) s)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL REL!IN-RAN REL!IN-COMP) (REWRITE))

(rule comp-join (r s t)
  (implies (fn!is-function r)
	   (= (rel!comp r (join s t))
	      (join (rel!comp r s) (rel!comp r t)))))
(APPLY SETRULES!EXTENSIONALITY)
(PRENEX)
(WITH-ENABLED (IN-PAIR-FUNCTION REL!IN-COMP) (REWRITE))

;;; projection functions

(function fst-fn (a b) ()
  (rel!inverse (join (rel!id a) (pair!cross a b))))

(rule is-relation-fst-fn (a b)
  (= (rel!is-relation (fst-fn a b)) (true)))
(REDUCE)

(rule is-function-fst-fn (a b)
  (= (fn!is-function (fst-fn a b)) (true)))
(WITH-ENABLED (FN!IS-FUNCTION) (REDUCE))

(rule dom-fst-fn (a b)
  (= (rel!dom (fst-fn a b))
     (pair!cross a b)))
(REDUCE)

(rule ran-fst-fn (a b)
  (= (rel!ran (fst-fn a b))
     (if (= b (nullset))
	 (nullset)
	 a)))
(REDUCE)

(rule apply-fst-fn (a b x)
  (implies (in x (pair!cross a b))
	   (= (fn!apply (fst-fn a b) x)
	      (pair!fst x))))
(USE FN!APPLY-DEFINITION (X X) (F (FST-FN A B)))
(REWRITE)
(REDUCE)

(rule pre-image-fst-fn (a b x)
  (= (rel!image (rel!inverse (fst-fn a b)) x)
     (pair!cross (inter a x) b)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))



(function snd-fn (a b) ()
  (rel!inverse (join (pair!cross b a) (rel!id b))))

(rule is-relation-snd-fn (a b)
  (= (rel!is-relation (snd-fn a b)) (true)))
(REDUCE)

(rule is-function-snd-fn (a b)
  (= (fn!is-function (snd-fn a b)) (true)))
(WITH-ENABLED (FN!IS-FUNCTION) (REDUCE))

(rule dom-snd-fn (a b)
  (= (rel!dom (snd-fn a b))
     (pair!cross a b)))
(REDUCE)

(rule ran-snd-fn (a b)
  (= (rel!ran (snd-fn a b))
     (if (= a (nullset))
	 (nullset)
	 b)))
(REDUCE)

(rule apply-snd-fn (a b x)
  (implies (in x (pair!cross a b))
	   (= (fn!apply (snd-fn a b) x)
	      (pair!snd x))))
(USE FN!APPLY-DEFINITION (X X) (F (SND-FN A B)))
(REWRITE)
(REDUCE)

(rule pre-image-snd-fn (a b x)
  (= (rel!image (rel!inverse (snd-fn a b)) x)
     (pair!cross a (inter b x))))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE))

(rule join-fst-snd (a b)
  (= (join (fst-fn a b) (snd-fn a b))
     (rel!id (pair!cross a b))))
(APPLY FN!FUNCTION-EXTENSIONALITY)
(REWRITE)

;;; Swapping

(function swap-fn (a b) ()
  (join (snd-fn a b) (fst-fn a b)))

(rule is-relation-swap-fn (a b)
  (= (rel!is-relation (swap-fn a b)) (true)))
(REDUCE)

(rule is-function-swap-fn (a b)
  (= (fn!is-function (swap-fn a b)) (true)))
(WITH-ENABLED (FN!IS-FUNCTION) (REDUCE))

(rule dom-swap-fn (a b)
  (= (rel!dom (swap-fn a b))
     (pair!cross a b)))
(REDUCE)

(rule ran-swap-fn (a b)
  (= (rel!ran (swap-fn a b))
     (pair!cross b a)))
(INVOKE SWAP-FN)
(REWRITE)
(APPLY SETRULES!EXTENSIONALITY)
(WITH-ENABLED (REL!IN-COMP IN-PAIR-FUNCTION) (REWRITE))
(SPLIT (= Y (PAIR!PAIR (PAIR!SND E) (PAIR!FST E))))
(REWRITE)

(rule apply-swap-fn (a b x)
  (implies (in x (pair!cross a b))
	   (= (fn!apply (swap-fn a b) x)
	      (rel!flip-pair x))))
(WITH-ENABLED (REL!FLIP-PAIR) (WITH-DISABLED (FST-FN SND-FN) (REDUCE)))

(rule inverse-swap-fn (a b)
  (= (rel!inverse (swap-fn a b))
     (swap-fn b a)))
(WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL IN-PAIR-FUNCTION) (REDUCE))

(rule image-swap (a b x)
  (= (rel!image (swap-fn a b) x)
     (inter (pair!cross b a) (rel!inverse x))))
(APPLY SETRULES!EXTENSIONALITY)
(WITH-ENABLED (REL!IN-IMAGE IN-PAIR-FUNCTION) (REWRITE))
(CASES)
(PRENEX)
(EQUALITY-SUBSTITUTE E)
(REWRITE)
(NEXT)
(INSTANTIATE (Z (REL!FLIP-PAIR E)))
(REARRANGE)
(REWRITE)
(NEXT)


(rule comp-swap-swap (a b c d)
  (= (rel!comp (swap-fn a b) (swap-fn c d))
     (rel!id (pair!cross (inter a d) (inter b c)))))
(APPLY FN!FUNCTION-EXTENSIONALITY)
(WITH-DISABLED (INTER.PERMUTATIVE INTER.COMMUTATIVE)
  (WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE)))

(rule comp-swap-fst (a b c d)
  (= (rel!comp (swap-fn a b) (fst-fn c d))
     (snd-fn (inter a d) (inter b c))))
(APPLY FN!FUNCTION-EXTENSIONALITY)
(WITH-DISABLED (INTER.PERMUTATIVE INTER.COMMUTATIVE)
  (WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE)))

(rule comp-swap-snd (a b c d)
  (= (rel!comp (swap-fn a b) (snd-fn c d))
     (fst-fn (inter a d) (inter b c))))
(APPLY FN!FUNCTION-EXTENSIONALITY)
(WITH-DISABLED (INTER.PERMUTATIVE INTER.COMMUTATIVE)
  (WITH-ENABLED (SETRULES!EXTENSIONALITY-SUBGOAL) (REWRITE)))

;;; Twisting
;;;
;;; (Twist A B C): ((A * B) * C) -> (A * (B * C))
;;;              = lambda <<x, y>, z> . <x, <y, z>>
;;;

(function twist (x) ()
  (pair!pair (pair!fst (pair!fst x))
	   (pair!pair (pair!snd (pair!fst x))
		    (pair!snd x))))

(function untwist (x) ()
  (pair!pair (pair!pair (pair!fst x)
		    (pair!fst (pair!snd x)))
	   (pair!snd (pair!snd x))))

(grule untwist-twist (x)
  (implies (and (pair!is-pair x)
		(pair!is-pair (pair!fst x)))
	   (= (untwist (twist x)) x)))
(REDUCE)

(grule twist-untwist (x)
  (implies (and (pair!is-pair x)
		(pair!is-pair (pair!snd x)))
	   (= (twist (untwist x)) x)))
(REDUCE)

(function twist-fn (a b c) ()
  (join (rel!comp (fst-fn (pair!cross a b) c) (fst-fn a b))
	(join (rel!comp (fst-fn (pair!cross a b) c) (snd-fn a b))
	      (snd-fn (pair!cross a b) c))))

(rule is-relation-twist-fn (a b c)
  (= (rel!is-relation (twist-fn a b c)) (true)))
(REDUCE)

(rule is-function-twist-fn (a b c)
  (= (fn!is-function (twist-fn a b c)) (true)))
(INVOKE TWIST-FN)
(REWRITE)

(rule dom-twist-fn (a b c)
  (= (rel!dom (twist-fn a b c))
     (pair!cross (pair!cross a b) c)))
(INVOKE TWIST-FN)
(REWRITE)

(rule ran-twist-fn (a b c)
  (= (rel!ran (twist-fn a b c))
     (pair!cross a (pair!cross b c))))
(APPLY SETRULES!EXTENSIONALITY)
(INVOKE TWIST-FN)
(WITH-ENABLED (REL!IN-COMP IN-PAIR-FUNCTION) (REWRITE))
(CASES)
(PRENEX)
(REWRITE)
(NEXT)
(INSTANTIATE (Y (UNTWIST E)))
(INVOKE UNTWIST)
(REWRITE)
(NEXT)

(rule apply-twist-fn (x a b c)
  (implies (in x (pair!cross (pair!cross a b) c))
	   (= (fn!apply (twist-fn a b c) x)
	      (twist x))))
(INVOKE TWIST-FN)
(INVOKE TWIST)
(REWRITE)

(rule is-function-inverse-twist-fn (a b c)
  (= (fn!is-function (rel!inverse (twist-fn a b c))) (true)))
(INVOKE FN!IS-FUNCTION)
(WITH-ENABLED (IN-PAIR-FUNCTION) (REWRITE))

(rule apply-inverse-twist-fn (x a b c)
  (implies (in x (pair!cross a (pair!cross b c)))
	   (= (fn!apply (rel!inverse (twist-fn a b c)) x)
	      (untwist x))))
(USE FN!APPLY-DEFINITION (F (REL!INVERSE (TWIST-FN A B C))) (X X))
(REWRITE)
(WITH-ENABLED (IN-PAIR-FUNCTION) (REWRITE))
(REWRITE)
