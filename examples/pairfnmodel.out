
Reading "/home/sentot/zk/version1/ZK/examples/pairfnmodel.ver"
Warning RULE-LOOPS for FN!FUNCTION-EXTENSIONALITY:
 The rule FN!FUNCTION-EXTENSIONALITY loops upon itself.
IN-PAIR-FUNCTION
Beginning proof of IN-PAIR-FUNCTION ...
(IMPLIES (FN!IS-FUNCTION F)
 (= (IN (PAIR!PAIR X Y) F) (AND (IN X (REL!DOM F)) (= Y (FN!APPLY F X)))))
Assuming FN!APPLY-UNIQUE with the
instantiations: (= F F) (= X X) (= Y Y) generates ...
(IMPLIES
 (AND
  (IMPLIES (AND (FN!IS-FUNCTION F) (IN (PAIR!PAIR X Y) F))
   (= Y (FN!APPLY F X)))
  (FN!IS-FUNCTION F))
 (= (IN (PAIR!PAIR X Y) F) (AND (IN X (REL!DOM F)) (= Y (FN!APPLY F X)))))
Assuming FN!APPLY-DEFINITION with the
instantiations: (= F F) (= X X) generates ...
(IMPLIES
 (AND
  (IMPLIES (AND (FN!IS-FUNCTION F) (IN X (REL!DOM F)))
   (IN (PAIR!PAIR X (FN!APPLY F X)) F))
  (IMPLIES (AND (FN!IS-FUNCTION F) (IN (PAIR!PAIR X Y) F))
   (= Y (FN!APPLY F X)))
  (FN!IS-FUNCTION F))
 (= (IN (PAIR!PAIR X Y) F) (AND (IN X (REL!DOM F)) (= Y (FN!APPLY F X)))))
Which simplifies
 when rewriting with REL!IN-DOM-1, REL!IN-DOM
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
FN!IS-FUNCTION-BOOL to ...
(TRUE)
JOIN
IN-JOIN
Beginning proof of IN-JOIN ...
(= (IN X (JOIN R S))
 (AND (PAIR!IS-PAIR X) (PAIR!IS-PAIR (PAIR!SND X))
  (IN (PAIR!PAIR (PAIR!FST X) (PAIR!FST (PAIR!SND X))) R)
  (IN (PAIR!PAIR (PAIR!FST X) (PAIR!SND (PAIR!SND X))) S)))
Which simplifies
 when rewriting with REL!IN-RAN, REL!IN-DOM, PAIR!IN-CROSS, INTER.DEFINITION,
PAIR!CROSS-INTER-LEFT, JOIN.DEFINITION
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL, SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2 to ...
(TRUE)
DOM-JOIN
Beginning proof of DOM-JOIN ...
(= (REL!DOM (JOIN R S)) (INTER (REL!DOM R) (REL!DOM S)))
Applying SETRULES!EXTENSIONALITY gives ...
(IF (IN E (REL!DOM (JOIN R S))) (IN E (INTER (REL!DOM R) (REL!DOM S)))
 (NOT (IN E (INTER (REL!DOM R) (REL!DOM S)))))
Which simplifies
 when rewriting with INTER.DEFINITION, IN-JOIN, REL!IN-DOM
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, PAIR!IS-PAIR-BOOL, PAIR!FST-PAIR,
PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR to ...
(IF
 (SOME (B)
  (AND (PAIR!IS-PAIR B) (IN (PAIR!PAIR E (PAIR!FST B)) R)
   (IN (PAIR!PAIR E (PAIR!SND B)) S)))
 (AND (SOME (B$0) (IN (PAIR!PAIR E B$0) R))
  (SOME (B$1) (IN (PAIR!PAIR E B$1) S)))
 (IMPLIES (SOME (B$2) (IN (PAIR!PAIR E B$2) R))
  (NOT (SOME (B$3) (IN (PAIR!PAIR E B$3) S)))))
Starting case 2 ...
(IMPLIES
 (SOME (B)
  (AND (PAIR!IS-PAIR B) (IN (PAIR!PAIR E (PAIR!FST B)) R)
   (IN (PAIR!PAIR E (PAIR!SND B)) S)))
 (AND (SOME (B$0) (IN (PAIR!PAIR E B$0) R))
  (SOME (B$1) (IN (PAIR!PAIR E B$1) S))))
Prenexing produces ...
(IMPLIES
 (AND (PAIR!IS-PAIR B) (IN (PAIR!PAIR E (PAIR!FST B)) R)
  (IN (PAIR!PAIR E (PAIR!SND B)) S))
 (AND (SOME (B$0) (IN (PAIR!PAIR E B$0) R))
  (SOME (B$1) (IN (PAIR!PAIR E B$1) S))))
Which simplifies
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL
 with the instantiations (= B$0 (PAIR!FST B)) (= B$1 (PAIR!SND B)) to ...
(TRUE)
Starting case 1 ...
(IMPLIES
 (AND
  (NOT
   (SOME (B)
    (AND (PAIR!IS-PAIR B) (IN (PAIR!PAIR E (PAIR!FST B)) R)
     (IN (PAIR!PAIR E (PAIR!SND B)) S))))
  (SOME (B$2) (IN (PAIR!PAIR E B$2) R)))
 (NOT (SOME (B$3) (IN (PAIR!PAIR E B$3) S))))
Instantiating (= B (PAIR!PAIR B$2 B$3)) gives ...
(IMPLIES
 (SOME (B$0)
  (AND
   (NOT
    (OR
     (AND (PAIR!IS-PAIR (PAIR!PAIR B$0 B))
      (IN (PAIR!PAIR E (PAIR!FST (PAIR!PAIR B$0 B))) R)
      (IN (PAIR!PAIR E (PAIR!SND (PAIR!PAIR B$0 B))) S))
     (SOME (B$1)
      (AND (PAIR!IS-PAIR B$1) (IN (PAIR!PAIR E (PAIR!FST B$1)) R)
       (IN (PAIR!PAIR E (PAIR!SND B$1)) S)))))
   (IN (PAIR!PAIR E B$0) R)))
 (NOT (IN (PAIR!PAIR E B) S)))
Which simplifies
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!IS-PAIR-BOOL, PAIR!FST-PAIR, PAIR!SND-PAIR,
PAIR!PAIR-IS-PAIR to ...
(TRUE)
Completing all cases produces ...
(TRUE)
IS-RELATION-JOIN
Beginning proof of IS-RELATION-JOIN ...
(= (REL!IS-RELATION (JOIN F G)) (TRUE))
Which simplifies
 with invocation of REL!IS-RELATION
 when rewriting with IN-JOIN
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL, REL!IS-RELATION-BOOL to ...
(TRUE)
IS-FUNCTION-JOIN
Beginning proof of IS-FUNCTION-JOIN ...
(IMPLIES (AND (FN!IS-FUNCTION F) (FN!IS-FUNCTION G))
 (= (FN!IS-FUNCTION (JOIN F G)) (TRUE)))
Invoking (FN!IS-FUNCTION (JOIN F G)) gives ...
(IMPLIES (AND (FN!IS-FUNCTION F) (FN!IS-FUNCTION G))
 (AND (REL!IS-RELATION (JOIN F G))
  (ALL (A B C)
   (IMPLIES
    (AND (IN (PAIR!PAIR A B) (JOIN F G)) (IN (PAIR!PAIR A C) (JOIN F G)))
    (= B C)))))
Prenexing produces ...
(IMPLIES (AND (FN!IS-FUNCTION F) (FN!IS-FUNCTION G))
 (AND (REL!IS-RELATION (JOIN F G))
  (IMPLIES
   (AND (IN (PAIR!PAIR A B) (JOIN F G)) (IN (PAIR!PAIR A C) (JOIN F G)))
   (= B C))))
Assuming FN!FUNCTION-PROPERTY with the
instantiations: (= F F) (= A A) (= B (PAIR!FST B))
                (= C (PAIR!FST C)) generates
...
(IMPLIES
 (AND
  (IMPLIES
   (AND (FN!IS-FUNCTION F) (IN (PAIR!PAIR A (PAIR!FST B)) F)
    (IN (PAIR!PAIR A (PAIR!FST C)) F))
   (= (PAIR!FST B) (PAIR!FST C)))
  (FN!IS-FUNCTION F) (FN!IS-FUNCTION G))
 (AND (REL!IS-RELATION (JOIN F G))
  (IMPLIES
   (AND (IN (PAIR!PAIR A B) (JOIN F G)) (IN (PAIR!PAIR A C) (JOIN F G)))
   (= B C))))
Assuming FN!FUNCTION-PROPERTY with the
instantiations: (= F G) (= A A) (= B (PAIR!SND B))
                (= C (PAIR!SND C)) generates
...
(IMPLIES
 (AND
  (IMPLIES
   (AND (FN!IS-FUNCTION G) (IN (PAIR!PAIR A (PAIR!SND B)) G)
    (IN (PAIR!PAIR A (PAIR!SND C)) G))
   (= (PAIR!SND B) (PAIR!SND C)))
  (IMPLIES
   (AND (FN!IS-FUNCTION F) (IN (PAIR!PAIR A (PAIR!FST B)) F)
    (IN (PAIR!PAIR A (PAIR!FST C)) F))
   (= (PAIR!FST B) (PAIR!FST C)))
  (FN!IS-FUNCTION F) (FN!IS-FUNCTION G))
 (AND (REL!IS-RELATION (JOIN F G))
  (IMPLIES
   (AND (IN (PAIR!PAIR A B) (JOIN F G)) (IN (PAIR!PAIR A C) (JOIN F G)))
   (= B C))))
Which simplifies
 when rewriting with IN-JOIN, IS-RELATION-JOIN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!IS-PAIR-BOOL, REL!IS-RELATION-BOOL, PAIR!FST-PAIR,
PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, FN!IS-FUNCTION-BOOL to ...
(TRUE)
APPLY-JOIN-FUNCTIONS
Beginning proof of APPLY-JOIN-FUNCTIONS ...
(IMPLIES
 (AND (FN!IS-FUNCTION F) (FN!IS-FUNCTION G) (IN X (REL!DOM (JOIN F G))))
 (= (FN!APPLY (JOIN F G) X) (PAIR!PAIR (FN!APPLY F X) (FN!APPLY G X))))
Assuming FN!APPLY-DEFINITION with the
instantiations: (= F (JOIN F G)) (= X X) generates ...
(IMPLIES
 (AND
  (IMPLIES (AND (FN!IS-FUNCTION (JOIN F G)) (IN X (REL!DOM (JOIN F G))))
   (IN (PAIR!PAIR X (FN!APPLY (JOIN F G) X)) (JOIN F G)))
  (FN!IS-FUNCTION F) (FN!IS-FUNCTION G) (IN X (REL!DOM (JOIN F G))))
 (= (FN!APPLY (JOIN F G) X) (PAIR!PAIR (FN!APPLY F X) (FN!APPLY G X))))
Assuming FN!APPLY-UNIQUE with the
instantiations: (= F F) (= X X)
                (= Y (PAIR!FST (FN!APPLY (JOIN F G) X))) generates
...
(IMPLIES
 (AND
  (IMPLIES
   (AND (FN!IS-FUNCTION F)
    (IN (PAIR!PAIR X (PAIR!FST (FN!APPLY (JOIN F G) X))) F))
   (= (PAIR!FST (FN!APPLY (JOIN F G) X)) (FN!APPLY F X)))
  (IMPLIES (AND (FN!IS-FUNCTION (JOIN F G)) (IN X (REL!DOM (JOIN F G))))
   (IN (PAIR!PAIR X (FN!APPLY (JOIN F G) X)) (JOIN F G)))
  (FN!IS-FUNCTION F) (FN!IS-FUNCTION G) (IN X (REL!DOM (JOIN F G))))
 (= (FN!APPLY (JOIN F G) X) (PAIR!PAIR (FN!APPLY F X) (FN!APPLY G X))))
Assuming FN!APPLY-UNIQUE with the
instantiations: (= F G) (= X X)
                (= Y (PAIR!SND (FN!APPLY (JOIN F G) X))) generates
...
(IMPLIES
 (AND
  (IMPLIES
   (AND (FN!IS-FUNCTION G)
    (IN (PAIR!PAIR X (PAIR!SND (FN!APPLY (JOIN F G) X))) G))
   (= (PAIR!SND (FN!APPLY (JOIN F G) X)) (FN!APPLY G X)))
  (IMPLIES
   (AND (FN!IS-FUNCTION F)
    (IN (PAIR!PAIR X (PAIR!FST (FN!APPLY (JOIN F G) X))) F))
   (= (PAIR!FST (FN!APPLY (JOIN F G) X)) (FN!APPLY F X)))
  (IMPLIES (AND (FN!IS-FUNCTION (JOIN F G)) (IN X (REL!DOM (JOIN F G))))
   (IN (PAIR!PAIR X (FN!APPLY (JOIN F G) X)) (JOIN F G)))
  (FN!IS-FUNCTION F) (FN!IS-FUNCTION G) (IN X (REL!DOM (JOIN F G))))
 (= (FN!APPLY (JOIN F G) X) (PAIR!PAIR (FN!APPLY F X) (FN!APPLY G X))))
Rearranging gives ...
(IMPLIES
 (AND (FN!IS-FUNCTION F) (FN!IS-FUNCTION G) (IN X (REL!DOM (JOIN F G)))
  (IMPLIES
   (AND (FN!IS-FUNCTION G)
    (IN (PAIR!PAIR X (PAIR!SND (FN!APPLY (JOIN F G) X))) G))
   (= (PAIR!SND (FN!APPLY (JOIN F G) X)) (FN!APPLY G X)))
  (IMPLIES
   (AND (FN!IS-FUNCTION F)
    (IN (PAIR!PAIR X (PAIR!FST (FN!APPLY (JOIN F G) X))) F))
   (= (PAIR!FST (FN!APPLY (JOIN F G) X)) (FN!APPLY F X)))
  (IMPLIES (AND (FN!IS-FUNCTION (JOIN F G)) (IN X (REL!DOM (JOIN F G))))
   (IN (PAIR!PAIR X (FN!APPLY (JOIN F G) X)) (JOIN F G))))
 (= (FN!APPLY (JOIN F G) X) (PAIR!PAIR (FN!APPLY F X) (FN!APPLY G X))))
Which simplifies
 when rewriting with IN-JOIN, IS-FUNCTION-JOIN, INTER.DEFINITION, DOM-JOIN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!IS-PAIR-BOOL, PAIR!FST-PAIR, PAIR!SND-PAIR,
PAIR!PAIR-IS-PAIR, SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, FN!IS-FUNCTION-BOOL to ...
(TRUE)
RAN-JOIN
Beginning proof of RAN-JOIN ...
(= (REL!RAN (JOIN R S)) (REL!COMP (REL!INVERSE R) S))
Which simplifies
 when rewriting with SETRULES!EXTENSIONALITY-SUBGOAL, REL!FLIP-PAIR-PAIR,
REL!IN-INVERSE, REL!IN-COMP, IN-JOIN, REL!IN-RAN
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!IS-PAIR-BOOL,
PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, REL!INVERSE-INVERSE to ...
(TRUE)
COMP-JOIN
Beginning proof of COMP-JOIN ...
(IMPLIES (FN!IS-FUNCTION R)
 (= (REL!COMP R (JOIN S T)) (JOIN (REL!COMP R S) (REL!COMP R T))))
Applying SETRULES!EXTENSIONALITY gives ...
(IMPLIES (FN!IS-FUNCTION R)
 (ALL (E)
  (IF (IN E (REL!COMP R (JOIN S T)))
   (IN E (JOIN (REL!COMP R S) (REL!COMP R T)))
   (NOT (IN E (JOIN (REL!COMP R S) (REL!COMP R T)))))))
Prenexing produces ...
(IMPLIES (FN!IS-FUNCTION R)
 (IF (IN E (REL!COMP R (JOIN S T)))
  (IN E (JOIN (REL!COMP R S) (REL!COMP R T)))
  (NOT (IN E (JOIN (REL!COMP R S) (REL!COMP R T))))))
Which simplifies
 when rewriting with IN-JOIN, IN-PAIR-FUNCTION, REL!IN-COMP
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL, FN!IS-FUNCTION-BOOL to ...
(TRUE)
FST-FN
IS-RELATION-FST-FN
Beginning proof of IS-RELATION-FST-FN ...
(= (REL!IS-RELATION (FST-FN A B)) (TRUE))
Which simplifies
 with invocation of FST-FN
 when rewriting with IS-RELATION-JOIN, REL!IS-RELATION-INVERSE
 with the assumptions REL!IS-RELATION-BOOL, REL!INVERSE-INVERSE to ...
(TRUE)
IS-FUNCTION-FST-FN
Beginning proof of IS-FUNCTION-FST-FN ...
(= (FN!IS-FUNCTION (FST-FN A B)) (TRUE))
Which simplifies
 with invocation of FN!IS-FUNCTION, FST-FN
 when rewriting with PAIR!IN-CROSS, REL!IN-ID, IN-JOIN, REL!FLIP-PAIR-PAIR,
REL!IN-INVERSE, IS-RELATION-JOIN, REL!IS-RELATION-INVERSE
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!IS-PAIR-BOOL, REL!FLIP-PAIR-IS-INVOLUTION,
PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, FN!IS-FUNCTION-BOOL,
REL!INVERSE-INVERSE to ...
(TRUE)
DOM-FST-FN
Beginning proof of DOM-FST-FN ...
(= (REL!DOM (FST-FN A B)) (PAIR!CROSS A B))
Which simplifies
 with invocation of FST-FN
 when rewriting with REL!DOM-RESTRICT-BY-SUPERSET-DOM, SUBSET.SELF,
SUBSET.NULLSET.LEFT, REL!DOM-CROSS, REL!IS-RELATION-CROSS, REL!COMP-ID-LEFT,
REL!INVERSE-ID, RAN-JOIN, REL!DOM-INVERSE
 with the assumptions REL!IS-RELATION-BOOL, REL!INVERSE-INVERSE to ...
(TRUE)
RAN-FST-FN
Beginning proof of RAN-FST-FN ...
(= (REL!RAN (FST-FN A B)) (IF (= B (NULLSET)) (NULLSET) A))
Which simplifies
 with invocation of FST-FN
 when rewriting with SETRULES!INTER-SUBSET-RIGHT, SUBSET.SELF,
SETRULES!INTER-SUBSET-LEFT, SUBSET.NULLSET.LEFT, REL!DOM-CROSS, REL!DOM-ID,
DOM-JOIN, REL!RAN-INVERSE
 with the assumptions SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, REL!INVERSE-INVERSE to ...
(TRUE)
APPLY-FST-FN
Beginning proof of APPLY-FST-FN ...
(IMPLIES (IN X (PAIR!CROSS A B)) (= (FN!APPLY (FST-FN A B) X) (PAIR!FST X)))
Assuming FN!APPLY-DEFINITION with the
instantiations: (= X X) (= F (FST-FN A B)) generates ...
(IMPLIES
 (AND
  (IMPLIES (AND (FN!IS-FUNCTION (FST-FN A B)) (IN X (REL!DOM (FST-FN A B))))
   (IN (PAIR!PAIR X (FN!APPLY (FST-FN A B) X)) (FST-FN A B)))
  (IN X (PAIR!CROSS A B)))
 (= (FN!APPLY (FST-FN A B) X) (PAIR!FST X)))
Which simplifies
 when rewriting with PAIR!IN-CROSS, DOM-FST-FN, IS-FUNCTION-FST-FN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL, FN!IS-FUNCTION-BOOL to ...
(IMPLIES
 (AND (PAIR!IS-PAIR X) (IN (PAIR!FST X) A) (IN (PAIR!SND X) B)
  (IN (PAIR!PAIR X (FN!APPLY (FST-FN A B) X)) (FST-FN A B)))
 (= (FN!APPLY (FST-FN A B) X) (PAIR!FST X)))
Which simplifies
 with invocation of FST-FN
 when rewriting with PAIR!IN-CROSS, REL!IN-ID, IN-JOIN, REL!FLIP-PAIR-PAIR,
REL!IN-INVERSE
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!FST-PAIR,
PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, REL!INVERSE-INVERSE, PAIR!IS-PAIR-BOOL to ...
(TRUE)
PRE-IMAGE-FST-FN
Beginning proof of PRE-IMAGE-FST-FN ...
(= (REL!IMAGE (REL!INVERSE (FST-FN A B)) X) (PAIR!CROSS (INTER A X) B))
Which simplifies
 when rewriting with SETRULES!EXTENSIONALITY-SUBGOAL, INTER.DEFINITION,
APPLY-FST-FN, PAIR!IN-CROSS, DOM-FST-FN, FN!IN-PRE-IMAGE-OF-FUNCTION,
IS-FUNCTION-FST-FN, PAIR!CROSS-INTER-LEFT
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!IS-PAIR-BOOL, FN!IS-FUNCTION-BOOL,
SETRULES!SUBSET-INTER-RELATION-1, SETRULES!SUBSET-INTER-RELATION-2,
REL!INVERSE-INVERSE to ...
(TRUE)
SND-FN
IS-RELATION-SND-FN
Beginning proof of IS-RELATION-SND-FN ...
(= (REL!IS-RELATION (SND-FN A B)) (TRUE))
Which simplifies
 with invocation of SND-FN
 when rewriting with IS-RELATION-JOIN, REL!IS-RELATION-INVERSE
 with the assumptions REL!IS-RELATION-BOOL, REL!INVERSE-INVERSE to ...
(TRUE)
IS-FUNCTION-SND-FN
Beginning proof of IS-FUNCTION-SND-FN ...
(= (FN!IS-FUNCTION (SND-FN A B)) (TRUE))
Which simplifies
 with invocation of FN!IS-FUNCTION, SND-FN
 when rewriting with REL!IN-ID, PAIR!IN-CROSS, IN-JOIN, REL!FLIP-PAIR-PAIR,
REL!IN-INVERSE, IS-RELATION-JOIN, REL!IS-RELATION-INVERSE
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!IS-PAIR-BOOL, REL!FLIP-PAIR-IS-INVOLUTION,
PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, FN!IS-FUNCTION-BOOL,
REL!INVERSE-INVERSE to ...
(TRUE)
DOM-SND-FN
Beginning proof of DOM-SND-FN ...
(= (REL!DOM (SND-FN A B)) (PAIR!CROSS A B))
Which simplifies
 with invocation of SND-FN
 when rewriting with REL!RAN-RESTRICT-BY-SUPERSET-RAN, SUBSET.SELF,
SUBSET.NULLSET.LEFT, REL!RAN-CROSS, REL!IS-RELATION-CROSS, REL!COMP-ID-RIGHT,
REL!INVERSE-CROSS, RAN-JOIN, REL!DOM-INVERSE
 with the assumptions REL!IS-RELATION-BOOL, REL!INVERSE-INVERSE to ...
(TRUE)
RAN-SND-FN
Beginning proof of RAN-SND-FN ...
(= (REL!RAN (SND-FN A B)) (IF (= A (NULLSET)) (NULLSET) B))
Which simplifies
 with invocation of SND-FN
 when rewriting with SUBSET.SELF, SETRULES!INTER-SUBSET-RIGHT,
SUBSET.NULLSET.LEFT, REL!DOM-ID, REL!DOM-CROSS, DOM-JOIN, REL!RAN-INVERSE
 with the assumptions SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, REL!INVERSE-INVERSE to ...
(TRUE)
APPLY-SND-FN
Beginning proof of APPLY-SND-FN ...
(IMPLIES (IN X (PAIR!CROSS A B)) (= (FN!APPLY (SND-FN A B) X) (PAIR!SND X)))
Assuming FN!APPLY-DEFINITION with the
instantiations: (= X X) (= F (SND-FN A B)) generates ...
(IMPLIES
 (AND
  (IMPLIES (AND (FN!IS-FUNCTION (SND-FN A B)) (IN X (REL!DOM (SND-FN A B))))
   (IN (PAIR!PAIR X (FN!APPLY (SND-FN A B) X)) (SND-FN A B)))
  (IN X (PAIR!CROSS A B)))
 (= (FN!APPLY (SND-FN A B) X) (PAIR!SND X)))
Which simplifies
 when rewriting with PAIR!IN-CROSS, DOM-SND-FN, IS-FUNCTION-SND-FN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL, FN!IS-FUNCTION-BOOL to ...
(IMPLIES
 (AND (PAIR!IS-PAIR X) (IN (PAIR!FST X) A) (IN (PAIR!SND X) B)
  (IN (PAIR!PAIR X (FN!APPLY (SND-FN A B) X)) (SND-FN A B)))
 (= (FN!APPLY (SND-FN A B) X) (PAIR!SND X)))
Which simplifies
 with invocation of SND-FN
 when rewriting with REL!IN-ID, PAIR!IN-CROSS, IN-JOIN, REL!FLIP-PAIR-PAIR,
REL!IN-INVERSE
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!FST-PAIR,
PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, REL!INVERSE-INVERSE, PAIR!IS-PAIR-BOOL to ...
(TRUE)
PRE-IMAGE-SND-FN
Beginning proof of PRE-IMAGE-SND-FN ...
(= (REL!IMAGE (REL!INVERSE (SND-FN A B)) X) (PAIR!CROSS A (INTER B X)))
Which simplifies
 when rewriting with SETRULES!EXTENSIONALITY-SUBGOAL, INTER.DEFINITION,
APPLY-SND-FN, PAIR!IN-CROSS, DOM-SND-FN, FN!IN-PRE-IMAGE-OF-FUNCTION,
IS-FUNCTION-SND-FN, PAIR!CROSS-INTER-RIGHT
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!IS-PAIR-BOOL, FN!IS-FUNCTION-BOOL,
SETRULES!SUBSET-INTER-RELATION-1, SETRULES!SUBSET-INTER-RELATION-2,
REL!INVERSE-INVERSE to ...
(TRUE)
JOIN-FST-SND
Beginning proof of JOIN-FST-SND ...
(= (JOIN (FST-FN A B) (SND-FN A B)) (REL!ID (PAIR!CROSS A B)))
Applying FN!FUNCTION-EXTENSIONALITY gives ...
(IF
 (AND (FN!IS-FUNCTION (JOIN (FST-FN A B) (SND-FN A B)))
  (FN!IS-FUNCTION (REL!ID (PAIR!CROSS A B))))
 (AND
  (= (REL!DOM (JOIN (FST-FN A B) (SND-FN A B)))
   (REL!DOM (REL!ID (PAIR!CROSS A B))))
  (ALL (X)
   (IMPLIES (IN X (REL!DOM (JOIN (FST-FN A B) (SND-FN A B))))
    (= (FN!APPLY (JOIN (FST-FN A B) (SND-FN A B)) X)
     (FN!APPLY (REL!ID (PAIR!CROSS A B)) X)))))
 (= (JOIN (FST-FN A B) (SND-FN A B)) (REL!ID (PAIR!CROSS A B))))
Which simplifies
 when rewriting with FN!APPLY-ID, APPLY-SND-FN, APPLY-FST-FN,
APPLY-JOIN-FUNCTIONS, PAIR!IN-CROSS, REL!DOM-ID, SETRULES!INTER-SUBSET-RIGHT,
SUBSET.SELF, PAIR!SUBSET-CROSS-CROSS, DOM-SND-FN, DOM-FST-FN, DOM-JOIN,
FN!IS-FUNCTION-ID, IS-FUNCTION-JOIN, IS-FUNCTION-SND-FN, IS-FUNCTION-FST-FN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL, SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, FN!IS-FUNCTION-BOOL to ...
(TRUE)
SWAP-FN
IS-RELATION-SWAP-FN
Beginning proof of IS-RELATION-SWAP-FN ...
(= (REL!IS-RELATION (SWAP-FN A B)) (TRUE))
Which simplifies
 with invocation of FST-FN, SND-FN, SWAP-FN
 when rewriting with IS-RELATION-JOIN
 with the assumptions REL!IS-RELATION-BOOL, REL!INVERSE-INVERSE to ...
(TRUE)
IS-FUNCTION-SWAP-FN
Beginning proof of IS-FUNCTION-SWAP-FN ...
(= (FN!IS-FUNCTION (SWAP-FN A B)) (TRUE))
Which simplifies
 with invocation of FN!IS-FUNCTION, FST-FN, SND-FN, SWAP-FN
 when rewriting with IS-FUNCTION-JOIN, REL!IN-ID, PAIR!IN-CROSS, IN-JOIN,
REL!FLIP-PAIR-PAIR, REL!IN-INVERSE, IS-RELATION-JOIN, REL!IS-RELATION-INVERSE
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions PAIR!IS-PAIR-BOOL, REL!FLIP-PAIR-IS-INVOLUTION,
PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, REL!IS-RELATION-BOOL,
FN!IS-FUNCTION-BOOL, REL!INVERSE-INVERSE to ...
(TRUE)
DOM-SWAP-FN
Beginning proof of DOM-SWAP-FN ...
(= (REL!DOM (SWAP-FN A B)) (PAIR!CROSS A B))
Which simplifies
 with invocation of FST-FN, SND-FN, SWAP-FN
 when rewriting with SETRULES!INTER-SUBSET-RIGHT, PAIR!SUBSET-CROSS-CROSS,
REL!DOM-RESTRICT-BY-SUPERSET-DOM, REL!DOM-CROSS, REL!COMP-ID-LEFT,
REL!INVERSE-ID, REL!RAN-RESTRICT-BY-SUPERSET-RAN, SUBSET.SELF,
SUBSET.NULLSET.LEFT, REL!RAN-CROSS, REL!IS-RELATION-CROSS, REL!COMP-ID-RIGHT,
REL!INVERSE-CROSS, RAN-JOIN, REL!DOM-INVERSE, DOM-JOIN
 with the assumptions SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, REL!IS-RELATION-BOOL, REL!INVERSE-INVERSE to
...
(TRUE)
RAN-SWAP-FN
Beginning proof of RAN-SWAP-FN ...
(= (REL!RAN (SWAP-FN A B)) (PAIR!CROSS B A))
Invoking SWAP-FN gives ...
(= (REL!RAN (JOIN (SND-FN A B) (FST-FN A B))) (PAIR!CROSS B A))
Which simplifies
 when rewriting with RAN-JOIN
 with the assumptions REL!INVERSE-INVERSE to ...
(= (REL!COMP (REL!INVERSE (SND-FN A B)) (FST-FN A B)) (PAIR!CROSS B A))
Applying SETRULES!EXTENSIONALITY gives ...
(IF (IN E (REL!COMP (REL!INVERSE (SND-FN A B)) (FST-FN A B)))
 (IN E (PAIR!CROSS B A)) (NOT (IN E (PAIR!CROSS B A))))
Which simplifies
 when rewriting with APPLY-FST-FN, DOM-FST-FN, IS-FUNCTION-FST-FN,
APPLY-SND-FN, PAIR!IN-CROSS, DOM-SND-FN, IN-PAIR-FUNCTION, IS-FUNCTION-SND-FN,
REL!FLIP-PAIR-PAIR, REL!IN-INVERSE, REL!IN-COMP
 forward chaining using FN!FUNCTION-IS-RELATION, PAIR!PAIR-COMPOSITION
 with the assumptions FN!IS-FUNCTION-BOOL, REL!FLIP-PAIR-IS-INVOLUTION,
PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, PAIR!IS-PAIR-BOOL,
REL!INVERSE-INVERSE to ...
(IMPLIES (PAIR!IS-PAIR E)
 (IF
  (SOME (Y)
   (AND (PAIR!IS-PAIR Y) (IN (PAIR!FST Y) A) (IN (PAIR!SND Y) B)
    (= (PAIR!FST E) (PAIR!SND Y)) (= (PAIR!SND E) (PAIR!FST Y))))
  (AND (IN (PAIR!FST E) B) (IN (PAIR!SND E) A))
  (IMPLIES (IN (PAIR!FST E) B) (NOT (IN (PAIR!SND E) A)))))
Splitting on (= Y (PAIR!PAIR (PAIR!SND E) (PAIR!FST E))) generates ...
(IMPLIES (PAIR!IS-PAIR E)
 (IF
  (SOME (Y)
   (IF (= Y (PAIR!PAIR (PAIR!SND E) (PAIR!FST E)))
    (AND (PAIR!IS-PAIR Y) (IN (PAIR!FST Y) A) (IN (PAIR!SND Y) B)
     (= (PAIR!FST E) (PAIR!SND Y)) (= (PAIR!SND E) (PAIR!FST Y)))
    (AND (PAIR!IS-PAIR Y) (IN (PAIR!FST Y) A) (IN (PAIR!SND Y) B)
     (= (PAIR!FST E) (PAIR!SND Y)) (= (PAIR!SND E) (PAIR!FST Y)))))
  (AND (IN (PAIR!FST E) B) (IN (PAIR!SND E) A))
  (IMPLIES (IN (PAIR!FST E) B) (NOT (IN (PAIR!SND E) A)))))
Which simplifies
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL
 with the instantiation (= Y (PAIR!PAIR (PAIR!SND E) (PAIR!FST E))) to ...
(TRUE)
APPLY-SWAP-FN
Beginning proof of APPLY-SWAP-FN ...
(IMPLIES (IN X (PAIR!CROSS A B))
 (= (FN!APPLY (SWAP-FN A B) X) (REL!FLIP-PAIR X)))
Which simplifies
 with invocation of REL!FLIP-PAIR, SWAP-FN
 when rewriting with APPLY-FST-FN, APPLY-SND-FN, APPLY-JOIN-FUNCTIONS,
SETRULES!INTER-SUBSET-RIGHT, SUBSET.SELF, PAIR!SUBSET-CROSS-CROSS, DOM-FST-FN,
DOM-SND-FN, DOM-JOIN, IS-FUNCTION-FST-FN, IS-FUNCTION-SND-FN, PAIR!IN-CROSS
 forward chaining using FN!FUNCTION-IS-RELATION, PAIR!PAIR-COMPOSITION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!FST-PAIR,
PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, FN!IS-FUNCTION-BOOL, PAIR!IS-PAIR-BOOL to ...
(TRUE)
INVERSE-SWAP-FN
Beginning proof of INVERSE-SWAP-FN ...
(= (REL!INVERSE (SWAP-FN A B)) (SWAP-FN B A))
Which simplifies
 with invocation of FST-FN, SND-FN, SWAP-FN
 when rewriting with SETRULES!EXTENSIONALITY-SUBGOAL, FN!APPLY-ID, REL!DOM-ID,
IN-PAIR-FUNCTION, FN!IS-FUNCTION-ID, PAIR!IN-CROSS, REL!FLIP-PAIR-PAIR,
REL!FST-FLIP-PAIR, REL!SND-FLIP-PAIR, REL!IS-PAIR-FLIP-PAIR, IN-JOIN,
REL!IN-INVERSE
 forward chaining using FN!FUNCTION-IS-RELATION, PAIR!PAIR-COMPOSITION
 with the assumptions FN!IS-FUNCTION-BOOL, PAIR!FST-PAIR, PAIR!SND-PAIR,
PAIR!PAIR-IS-PAIR, PAIR!IS-PAIR-BOOL, REL!FLIP-PAIR-IS-INVOLUTION,
REL!INVERSE-INVERSE to ...
(TRUE)
IMAGE-SWAP
Beginning proof of IMAGE-SWAP ...
(= (REL!IMAGE (SWAP-FN A B) X) (INTER (PAIR!CROSS B A) (REL!INVERSE X)))
Applying SETRULES!EXTENSIONALITY gives ...
(IF (IN E (REL!IMAGE (SWAP-FN A B) X))
 (IN E (INTER (PAIR!CROSS B A) (REL!INVERSE X)))
 (NOT (IN E (INTER (PAIR!CROSS B A) (REL!INVERSE X)))))
Which simplifies
 when rewriting with REL!IN-INVERSE, INTER.DEFINITION, APPLY-SWAP-FN,
PAIR!IN-CROSS, DOM-SWAP-FN, IN-PAIR-FUNCTION, IS-FUNCTION-SWAP-FN, REL!IN-IMAGE
 forward chaining using FN!FUNCTION-IS-RELATION, PAIR!PAIR-COMPOSITION
 with the assumptions SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, REL!INVERSE-INVERSE,
REL!FLIP-PAIR-IS-INVOLUTION, PAIR!IS-PAIR-BOOL, FN!IS-FUNCTION-BOOL,
PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR to ...
(IF
 (SOME (Z)
  (AND (IN Z X) (PAIR!IS-PAIR Z) (IN (PAIR!FST Z) A) (IN (PAIR!SND Z) B)
   (= E (REL!FLIP-PAIR Z))))
 (AND (PAIR!IS-PAIR E) (IN (PAIR!FST E) B) (IN (PAIR!SND E) A)
  (IN (REL!FLIP-PAIR E) X))
 (IMPLIES (AND (PAIR!IS-PAIR E) (IN (PAIR!FST E) B) (IN (PAIR!SND E) A))
  (NOT (IN (REL!FLIP-PAIR E) X))))
Starting case 2 ...
(IMPLIES
 (SOME (Z)
  (AND (IN Z X) (PAIR!IS-PAIR Z) (IN (PAIR!FST Z) A) (IN (PAIR!SND Z) B)
   (= E (REL!FLIP-PAIR Z))))
 (AND (PAIR!IS-PAIR E) (IN (PAIR!FST E) B) (IN (PAIR!SND E) A)
  (IN (REL!FLIP-PAIR E) X)))
Prenexing produces ...
(IMPLIES
 (AND (IN Z X) (PAIR!IS-PAIR Z) (IN (PAIR!FST Z) A) (IN (PAIR!SND Z) B)
  (= E (REL!FLIP-PAIR Z)))
 (AND (PAIR!IS-PAIR E) (IN (PAIR!FST E) B) (IN (PAIR!SND E) A)
  (IN (REL!FLIP-PAIR E) X)))
Substituting (= E (REL!FLIP-PAIR Z)) produces ...
(IMPLIES
 (AND (IN Z X) (PAIR!IS-PAIR Z) (IN (PAIR!FST Z) A) (IN (PAIR!SND Z) B)
  (= E (REL!FLIP-PAIR Z)))
 (AND (PAIR!IS-PAIR (REL!FLIP-PAIR Z)) (IN (PAIR!FST (REL!FLIP-PAIR Z)) B)
  (IN (PAIR!SND (REL!FLIP-PAIR Z)) A)
  (IN (REL!FLIP-PAIR (REL!FLIP-PAIR Z)) X)))
Which simplifies
 when rewriting with REL!SND-FLIP-PAIR, REL!FST-FLIP-PAIR,
REL!IS-PAIR-FLIP-PAIR
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!IS-PAIR-BOOL to ...
(TRUE)
Starting case 1 ...
(IMPLIES
 (AND
  (NOT
   (SOME (Z)
    (AND (IN Z X) (PAIR!IS-PAIR Z) (IN (PAIR!FST Z) A) (IN (PAIR!SND Z) B)
     (= E (REL!FLIP-PAIR Z)))))
  (PAIR!IS-PAIR E) (IN (PAIR!FST E) B) (IN (PAIR!SND E) A))
 (NOT (IN (REL!FLIP-PAIR E) X)))
Instantiating (= Z (REL!FLIP-PAIR E)) gives ...
(IMPLIES
 (AND
  (NOT
   (OR
    (AND (IN (REL!FLIP-PAIR E) X) (PAIR!IS-PAIR (REL!FLIP-PAIR E))
     (IN (PAIR!FST (REL!FLIP-PAIR E)) A) (IN (PAIR!SND (REL!FLIP-PAIR E)) B)
     (= E (REL!FLIP-PAIR (REL!FLIP-PAIR E))))
    (SOME (Z)
     (AND (IN Z X) (PAIR!IS-PAIR Z) (IN (PAIR!FST Z) A) (IN (PAIR!SND Z) B)
      (= E (REL!FLIP-PAIR Z))))))
  (PAIR!IS-PAIR E) (IN (PAIR!FST E) B) (IN (PAIR!SND E) A))
 (NOT (IN (REL!FLIP-PAIR E) X)))
Rearranging gives ...
(IMPLIES
 (AND (PAIR!IS-PAIR E) (IN (PAIR!FST E) B) (IN (PAIR!SND E) A)
  (NOT
   (OR
    (AND (= E (REL!FLIP-PAIR (REL!FLIP-PAIR E))) (IN (REL!FLIP-PAIR E) X)
     (PAIR!IS-PAIR (REL!FLIP-PAIR E)) (IN (PAIR!FST (REL!FLIP-PAIR E)) A)
     (IN (PAIR!SND (REL!FLIP-PAIR E)) B))
    (SOME (Z)
     (AND (= E (REL!FLIP-PAIR Z)) (IN Z X) (PAIR!IS-PAIR Z)
      (IN (PAIR!FST Z) A) (IN (PAIR!SND Z) B))))))
 (NOT (IN (REL!FLIP-PAIR E) X)))
Which simplifies
 when rewriting with REL!SND-FLIP-PAIR, REL!FST-FLIP-PAIR,
REL!IS-PAIR-FLIP-PAIR
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!IS-PAIR-BOOL to ...
(TRUE)
Completing all cases produces ...
(TRUE)
COMP-SWAP-SWAP
Beginning proof of COMP-SWAP-SWAP ...
(= (REL!COMP (SWAP-FN A B) (SWAP-FN C D))
 (REL!ID (PAIR!CROSS (INTER A D) (INTER B C))))
Applying FN!FUNCTION-EXTENSIONALITY gives ...
(IF
 (AND (FN!IS-FUNCTION (REL!COMP (SWAP-FN A B) (SWAP-FN C D)))
  (FN!IS-FUNCTION (REL!ID (PAIR!CROSS (INTER A D) (INTER B C)))))
 (AND
  (= (REL!DOM (REL!COMP (SWAP-FN A B) (SWAP-FN C D)))
   (REL!DOM (REL!ID (PAIR!CROSS (INTER A D) (INTER B C)))))
  (ALL (X)
   (IMPLIES (IN X (REL!DOM (REL!COMP (SWAP-FN A B) (SWAP-FN C D))))
    (= (FN!APPLY (REL!COMP (SWAP-FN A B) (SWAP-FN C D)) X)
     (FN!APPLY (REL!ID (PAIR!CROSS (INTER A D) (INTER B C))) X)))))
 (= (REL!COMP (SWAP-FN A B) (SWAP-FN C D))
  (REL!ID (PAIR!CROSS (INTER A D) (INTER B C)))))
Which simplifies
 when rewriting with FN!APPLY-ID, FN!APPLY-COMP, REL!SND-FLIP-PAIR,
REL!FST-FLIP-PAIR, REL!IS-PAIR-FLIP-PAIR, APPLY-SWAP-FN,
SETRULES!EXTENSIONALITY-SUBGOAL, PAIR!IN-CROSS, INTER.DEFINITION, REL!DOM-ID,
REL!INVERSE-CROSS, IMAGE-SWAP, DOM-SWAP-FN, INVERSE-SWAP-FN, REL!DOM-COMP,
FN!IS-FUNCTION-ID, INTER.ASSOCIATIVE, PAIR!CROSS-INTER-LEFT,
PAIR!CROSS-INTER-RIGHT, FN!IS-FUNCTION-COMP-FUNCTIONS, IS-FUNCTION-SWAP-FN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!IS-PAIR-BOOL,
REL!INVERSE-INVERSE, SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, FN!IS-FUNCTION-BOOL to ...
(TRUE)
COMP-SWAP-FST
Beginning proof of COMP-SWAP-FST ...
(= (REL!COMP (SWAP-FN A B) (FST-FN C D)) (SND-FN (INTER A D) (INTER B C)))
Applying FN!FUNCTION-EXTENSIONALITY gives ...
(IF
 (AND (FN!IS-FUNCTION (REL!COMP (SWAP-FN A B) (FST-FN C D)))
  (FN!IS-FUNCTION (SND-FN (INTER A D) (INTER B C))))
 (AND
  (= (REL!DOM (REL!COMP (SWAP-FN A B) (FST-FN C D)))
   (REL!DOM (SND-FN (INTER A D) (INTER B C))))
  (ALL (X)
   (IMPLIES (IN X (REL!DOM (REL!COMP (SWAP-FN A B) (FST-FN C D))))
    (= (FN!APPLY (REL!COMP (SWAP-FN A B) (FST-FN C D)) X)
     (FN!APPLY (SND-FN (INTER A D) (INTER B C)) X)))))
 (= (REL!COMP (SWAP-FN A B) (FST-FN C D)) (SND-FN (INTER A D) (INTER B C))))
Which simplifies
 when rewriting with APPLY-SND-FN, APPLY-FST-FN, FN!APPLY-COMP,
REL!SND-FLIP-PAIR, REL!FST-FLIP-PAIR, REL!IS-PAIR-FLIP-PAIR, APPLY-SWAP-FN,
DOM-SWAP-FN, SETRULES!EXTENSIONALITY-SUBGOAL, PAIR!IN-CROSS, INTER.DEFINITION,
INTER.ASSOCIATIVE, PAIR!CROSS-INTER-LEFT, PAIR!CROSS-INTER-RIGHT, DOM-SND-FN,
REL!INVERSE-CROSS, IMAGE-SWAP, DOM-FST-FN, INVERSE-SWAP-FN, REL!DOM-COMP,
IS-FUNCTION-SND-FN, FN!IS-FUNCTION-COMP-FUNCTIONS, IS-FUNCTION-FST-FN,
IS-FUNCTION-SWAP-FN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!IS-PAIR-BOOL,
REL!INVERSE-INVERSE, SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, FN!IS-FUNCTION-BOOL to ...
(TRUE)
COMP-SWAP-SND
Beginning proof of COMP-SWAP-SND ...
(= (REL!COMP (SWAP-FN A B) (SND-FN C D)) (FST-FN (INTER A D) (INTER B C)))
Applying FN!FUNCTION-EXTENSIONALITY gives ...
(IF
 (AND (FN!IS-FUNCTION (REL!COMP (SWAP-FN A B) (SND-FN C D)))
  (FN!IS-FUNCTION (FST-FN (INTER A D) (INTER B C))))
 (AND
  (= (REL!DOM (REL!COMP (SWAP-FN A B) (SND-FN C D)))
   (REL!DOM (FST-FN (INTER A D) (INTER B C))))
  (ALL (X)
   (IMPLIES (IN X (REL!DOM (REL!COMP (SWAP-FN A B) (SND-FN C D))))
    (= (FN!APPLY (REL!COMP (SWAP-FN A B) (SND-FN C D)) X)
     (FN!APPLY (FST-FN (INTER A D) (INTER B C)) X)))))
 (= (REL!COMP (SWAP-FN A B) (SND-FN C D)) (FST-FN (INTER A D) (INTER B C))))
Which simplifies
 when rewriting with APPLY-FST-FN, APPLY-SND-FN, FN!APPLY-COMP,
REL!SND-FLIP-PAIR, REL!FST-FLIP-PAIR, REL!IS-PAIR-FLIP-PAIR, APPLY-SWAP-FN,
DOM-SWAP-FN, SETRULES!EXTENSIONALITY-SUBGOAL, PAIR!IN-CROSS, INTER.DEFINITION,
INTER.ASSOCIATIVE, PAIR!CROSS-INTER-LEFT, PAIR!CROSS-INTER-RIGHT, DOM-FST-FN,
REL!INVERSE-CROSS, IMAGE-SWAP, DOM-SND-FN, INVERSE-SWAP-FN, REL!DOM-COMP,
IS-FUNCTION-FST-FN, FN!IS-FUNCTION-COMP-FUNCTIONS, IS-FUNCTION-SND-FN,
IS-FUNCTION-SWAP-FN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions REL!FLIP-PAIR-IS-INVOLUTION, PAIR!IS-PAIR-BOOL,
REL!INVERSE-INVERSE, SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, FN!IS-FUNCTION-BOOL to ...
(TRUE)
TWIST
UNTWIST
UNTWIST-TWIST
Beginning proof of UNTWIST-TWIST ...
(IMPLIES (AND (PAIR!IS-PAIR X) (PAIR!IS-PAIR (PAIR!FST X)))
 (= (UNTWIST (TWIST X)) X))
Which simplifies
 with invocation of UNTWIST, TWIST
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL to ...
(TRUE)
TWIST-UNTWIST
Beginning proof of TWIST-UNTWIST ...
(IMPLIES (AND (PAIR!IS-PAIR X) (PAIR!IS-PAIR (PAIR!SND X)))
 (= (TWIST (UNTWIST X)) X))
Which simplifies
 with invocation of TWIST, UNTWIST
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions UNTWIST-TWIST, PAIR!FST-PAIR, PAIR!SND-PAIR,
PAIR!PAIR-IS-PAIR, PAIR!IS-PAIR-BOOL to ...
(TRUE)
TWIST-FN
IS-RELATION-TWIST-FN
Beginning proof of IS-RELATION-TWIST-FN ...
(= (REL!IS-RELATION (TWIST-FN A B C)) (TRUE))
Which simplifies
 with invocation of SND-FN, FST-FN, TWIST-FN
 when rewriting with IS-RELATION-JOIN
 with the assumptions REL!IS-RELATION-BOOL, REL!INVERSE-INVERSE to ...
(TRUE)
IS-FUNCTION-TWIST-FN
Beginning proof of IS-FUNCTION-TWIST-FN ...
(= (FN!IS-FUNCTION (TWIST-FN A B C)) (TRUE))
Invoking TWIST-FN gives ...
(FN!IS-FUNCTION
 (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (FST-FN A B))
  (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (SND-FN A B))
   (SND-FN (PAIR!CROSS A B) C))))
Which simplifies
 when rewriting with IS-FUNCTION-JOIN, IS-FUNCTION-SND-FN,
FN!IS-FUNCTION-COMP-FUNCTIONS, IS-FUNCTION-FST-FN
 forward chaining using FN!FUNCTION-IS-RELATION
 with the assumptions FN!IS-FUNCTION-BOOL to ...
(TRUE)
DOM-TWIST-FN
Beginning proof of DOM-TWIST-FN ...
(= (REL!DOM (TWIST-FN A B C)) (PAIR!CROSS (PAIR!CROSS A B) C))
Invoking TWIST-FN gives ...
(=
 (REL!DOM
  (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (FST-FN A B))
   (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (SND-FN A B))
    (SND-FN (PAIR!CROSS A B) C))))
 (PAIR!CROSS (PAIR!CROSS A B) C))
Which simplifies
 when rewriting with DOM-SND-FN, SETRULES!INTER-SUBSET-RIGHT, SUBSET.SELF,
PAIR!SUBSET-CROSS-CROSS, PRE-IMAGE-FST-FN, DOM-FST-FN, REL!DOM-COMP, DOM-JOIN
 with the assumptions SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, REL!INVERSE-INVERSE to ...
(TRUE)
RAN-TWIST-FN
Beginning proof of RAN-TWIST-FN ...
(= (REL!RAN (TWIST-FN A B C)) (PAIR!CROSS A (PAIR!CROSS B C)))
Applying SETRULES!EXTENSIONALITY gives ...
(IF (IN E (REL!RAN (TWIST-FN A B C))) (IN E (PAIR!CROSS A (PAIR!CROSS B C)))
 (NOT (IN E (PAIR!CROSS A (PAIR!CROSS B C)))))
Invoking TWIST-FN gives ...
(IF
 (IN E
  (REL!RAN
   (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (FST-FN A B))
    (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (SND-FN A B))
     (SND-FN (PAIR!CROSS A B) C)))))
 (IN E (PAIR!CROSS A (PAIR!CROSS B C)))
 (NOT (IN E (PAIR!CROSS A (PAIR!CROSS B C)))))
Which simplifies
 when rewriting with APPLY-SND-FN, FN!APPLY-COMP, SETRULES!INTER-SUBSET-RIGHT,
SUBSET.SELF, PAIR!SUBSET-CROSS-CROSS, PRE-IMAGE-FST-FN, DOM-SND-FN,
REL!DOM-COMP, FN!IS-FUNCTION-COMP-FUNCTIONS, IS-FUNCTION-SND-FN, IN-JOIN,
APPLY-FST-FN, PAIR!IN-CROSS, DOM-FST-FN, IN-PAIR-FUNCTION, IS-FUNCTION-FST-FN,
REL!FLIP-PAIR-PAIR, REL!IN-INVERSE, REL!IN-COMP, REL!COMP-ASSOCIATIVE,
REL!INVERSE-COMP, RAN-JOIN
 forward chaining using FN!FUNCTION-IS-RELATION, PAIR!PAIR-COMPOSITION
 with the assumptions SETRULES!SUBSET-INTER-RELATION-1,
SETRULES!SUBSET-INTER-RELATION-2, FN!IS-FUNCTION-BOOL,
REL!FLIP-PAIR-IS-INVOLUTION, PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL, REL!INVERSE-INVERSE to ...
(IMPLIES (PAIR!IS-PAIR E)
 (IF
  (SOME (Y)
   (AND (PAIR!IS-PAIR (PAIR!FST Y)) (IN (PAIR!FST (PAIR!FST Y)) A)
    (IN (PAIR!SND (PAIR!FST Y)) B) (= (PAIR!FST E) (PAIR!FST (PAIR!FST Y)))
    (PAIR!IS-PAIR Y) (IN (PAIR!SND Y) C) (PAIR!IS-PAIR (PAIR!SND E))
    (= (PAIR!FST (PAIR!SND E)) (PAIR!SND (PAIR!FST Y)))
    (= (PAIR!SND (PAIR!SND E)) (PAIR!SND Y))))
  (AND (IN (PAIR!FST E) A) (PAIR!IS-PAIR (PAIR!SND E))
   (IN (PAIR!FST (PAIR!SND E)) B) (IN (PAIR!SND (PAIR!SND E)) C))
  (IMPLIES
   (AND (IN (PAIR!FST E) A) (PAIR!IS-PAIR (PAIR!SND E))
    (IN (PAIR!FST (PAIR!SND E)) B))
   (NOT (IN (PAIR!SND (PAIR!SND E)) C)))))
Starting case 2 ...
(IMPLIES
 (AND (PAIR!IS-PAIR E)
  (SOME (Y)
   (AND (PAIR!IS-PAIR (PAIR!FST Y)) (IN (PAIR!FST (PAIR!FST Y)) A)
    (IN (PAIR!SND (PAIR!FST Y)) B) (= (PAIR!FST E) (PAIR!FST (PAIR!FST Y)))
    (PAIR!IS-PAIR Y) (IN (PAIR!SND Y) C) (PAIR!IS-PAIR (PAIR!SND E))
    (= (PAIR!FST (PAIR!SND E)) (PAIR!SND (PAIR!FST Y)))
    (= (PAIR!SND (PAIR!SND E)) (PAIR!SND Y)))))
 (AND (IN (PAIR!FST E) A) (PAIR!IS-PAIR (PAIR!SND E))
  (IN (PAIR!FST (PAIR!SND E)) B) (IN (PAIR!SND (PAIR!SND E)) C)))
Prenexing produces ...
(IMPLIES
 (AND (PAIR!IS-PAIR E) (PAIR!IS-PAIR (PAIR!FST Y))
  (IN (PAIR!FST (PAIR!FST Y)) A) (IN (PAIR!SND (PAIR!FST Y)) B)
  (= (PAIR!FST E) (PAIR!FST (PAIR!FST Y))) (PAIR!IS-PAIR Y)
  (IN (PAIR!SND Y) C) (PAIR!IS-PAIR (PAIR!SND E))
  (= (PAIR!FST (PAIR!SND E)) (PAIR!SND (PAIR!FST Y)))
  (= (PAIR!SND (PAIR!SND E)) (PAIR!SND Y)))
 (AND (IN (PAIR!FST E) A) (PAIR!IS-PAIR (PAIR!SND E))
  (IN (PAIR!FST (PAIR!SND E)) B) (IN (PAIR!SND (PAIR!SND E)) C)))
Which simplifies
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!IS-PAIR-BOOL to ...
(TRUE)
Starting case 1 ...
(IMPLIES
 (AND (PAIR!IS-PAIR E)
  (NOT
   (SOME (Y)
    (AND (PAIR!IS-PAIR (PAIR!FST Y)) (IN (PAIR!FST (PAIR!FST Y)) A)
     (IN (PAIR!SND (PAIR!FST Y)) B) (= (PAIR!FST E) (PAIR!FST (PAIR!FST Y)))
     (PAIR!IS-PAIR Y) (IN (PAIR!SND Y) C) (PAIR!IS-PAIR (PAIR!SND E))
     (= (PAIR!FST (PAIR!SND E)) (PAIR!SND (PAIR!FST Y)))
     (= (PAIR!SND (PAIR!SND E)) (PAIR!SND Y)))))
  (IN (PAIR!FST E) A) (PAIR!IS-PAIR (PAIR!SND E))
  (IN (PAIR!FST (PAIR!SND E)) B))
 (NOT (IN (PAIR!SND (PAIR!SND E)) C)))
Instantiating (= Y (UNTWIST E)) gives ...
(IMPLIES
 (AND (PAIR!IS-PAIR E)
  (NOT
   (OR
    (AND (PAIR!IS-PAIR (PAIR!FST (UNTWIST E)))
     (IN (PAIR!FST (PAIR!FST (UNTWIST E))) A)
     (IN (PAIR!SND (PAIR!FST (UNTWIST E))) B)
     (= (PAIR!FST E) (PAIR!FST (PAIR!FST (UNTWIST E))))
     (PAIR!IS-PAIR (UNTWIST E)) (IN (PAIR!SND (UNTWIST E)) C)
     (PAIR!IS-PAIR (PAIR!SND E))
     (= (PAIR!FST (PAIR!SND E)) (PAIR!SND (PAIR!FST (UNTWIST E))))
     (= (PAIR!SND (PAIR!SND E)) (PAIR!SND (UNTWIST E))))
    (SOME (Y)
     (AND (PAIR!IS-PAIR (PAIR!FST Y)) (IN (PAIR!FST (PAIR!FST Y)) A)
      (IN (PAIR!SND (PAIR!FST Y)) B) (= (PAIR!FST E) (PAIR!FST (PAIR!FST Y)))
      (PAIR!IS-PAIR Y) (IN (PAIR!SND Y) C) (PAIR!IS-PAIR (PAIR!SND E))
      (= (PAIR!FST (PAIR!SND E)) (PAIR!SND (PAIR!FST Y)))
      (= (PAIR!SND (PAIR!SND E)) (PAIR!SND Y))))))
  (IN (PAIR!FST E) A) (PAIR!IS-PAIR (PAIR!SND E))
  (IN (PAIR!FST (PAIR!SND E)) B))
 (NOT (IN (PAIR!SND (PAIR!SND E)) C)))
Invoking UNTWIST gives ...
(IMPLIES
 (AND (PAIR!IS-PAIR E)
  (NOT
   (OR
    (AND
     (PAIR!IS-PAIR
      (PAIR!FST
       (PAIR!PAIR (PAIR!PAIR (PAIR!FST E) (PAIR!FST (PAIR!SND E)))
        (PAIR!SND (PAIR!SND E)))))
     (IN
      (PAIR!FST
       (PAIR!FST
        (PAIR!PAIR (PAIR!PAIR (PAIR!FST E) (PAIR!FST (PAIR!SND E)))
         (PAIR!SND (PAIR!SND E)))))
      A)
     (IN
      (PAIR!SND
       (PAIR!FST
        (PAIR!PAIR (PAIR!PAIR (PAIR!FST E) (PAIR!FST (PAIR!SND E)))
         (PAIR!SND (PAIR!SND E)))))
      B)
     (= (PAIR!FST E)
      (PAIR!FST
       (PAIR!FST
        (PAIR!PAIR (PAIR!PAIR (PAIR!FST E) (PAIR!FST (PAIR!SND E)))
         (PAIR!SND (PAIR!SND E))))))
     (PAIR!IS-PAIR
      (PAIR!PAIR (PAIR!PAIR (PAIR!FST E) (PAIR!FST (PAIR!SND E)))
       (PAIR!SND (PAIR!SND E))))
     (IN
      (PAIR!SND
       (PAIR!PAIR (PAIR!PAIR (PAIR!FST E) (PAIR!FST (PAIR!SND E)))
        (PAIR!SND (PAIR!SND E))))
      C)
     (PAIR!IS-PAIR (PAIR!SND E))
     (= (PAIR!FST (PAIR!SND E))
      (PAIR!SND
       (PAIR!FST
        (PAIR!PAIR (PAIR!PAIR (PAIR!FST E) (PAIR!FST (PAIR!SND E)))
         (PAIR!SND (PAIR!SND E))))))
     (= (PAIR!SND (PAIR!SND E))
      (PAIR!SND
       (PAIR!PAIR (PAIR!PAIR (PAIR!FST E) (PAIR!FST (PAIR!SND E)))
        (PAIR!SND (PAIR!SND E))))))
    (SOME (Y)
     (AND (PAIR!IS-PAIR (PAIR!FST Y)) (IN (PAIR!FST (PAIR!FST Y)) A)
      (IN (PAIR!SND (PAIR!FST Y)) B) (= (PAIR!FST E) (PAIR!FST (PAIR!FST Y)))
      (PAIR!IS-PAIR Y) (IN (PAIR!SND Y) C) (PAIR!IS-PAIR (PAIR!SND E))
      (= (PAIR!FST (PAIR!SND E)) (PAIR!SND (PAIR!FST Y)))
      (= (PAIR!SND (PAIR!SND E)) (PAIR!SND Y))))))
  (IN (PAIR!FST E) A) (PAIR!IS-PAIR (PAIR!SND E))
  (IN (PAIR!FST (PAIR!SND E)) B))
 (NOT (IN (PAIR!SND (PAIR!SND E)) C)))
Which simplifies
 forward chaining using PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
PAIR!IS-PAIR-BOOL to ...
(TRUE)
Completing all cases produces ...
(TRUE)
APPLY-TWIST-FN
Beginning proof of APPLY-TWIST-FN ...
(IMPLIES (IN X (PAIR!CROSS (PAIR!CROSS A B) C))
 (= (FN!APPLY (TWIST-FN A B C) X) (TWIST X)))
Invoking TWIST-FN gives ...
(IMPLIES (IN X (PAIR!CROSS (PAIR!CROSS A B) C))
 (=
  (FN!APPLY
   (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (FST-FN A B))
    (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (SND-FN A B))
     (SND-FN (PAIR!CROSS A B) C)))
   X)
  (TWIST X)))
Invoking TWIST gives ...
(IMPLIES (IN X (PAIR!CROSS (PAIR!CROSS A B) C))
 (=
  (FN!APPLY
   (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (FST-FN A B))
    (JOIN (REL!COMP (FST-FN (PAIR!CROSS A B) C) (SND-FN A B))
     (SND-FN (PAIR!CROSS A B) C)))
   X)
  (PAIR!PAIR (PAIR!FST (PAIR!FST X))
   (PAIR!PAIR (PAIR!SND (PAIR!FST X)) (PAIR!SND X)))))
Which simplifies
 when rewriting with APPLY-SND-FN, FN!APPLY-COMP, APPLY-FST-FN,
APPLY-JOIN-FUNCTIONS, DOM-SND-FN, SETRULES!INTER-SUBSET-RIGHT, SUBSET.SELF,
PAIR!SUBSET-CROSS-CROSS, PRE-IMAGE-FST-FN, DOM-FST-FN, REL!DOM-COMP, DOM-JOIN,
IS-FUNCTION-JOIN, IS-FUNCTION-SND-FN, FN!IS-FUNCTION-COMP-FUNCTIONS,
IS-FUNCTION-FST-FN, PAIR!IN-CROSS
 forward chaining using FN!FUNCTION-IS-RELATION, PAIR!PAIR-COMPOSITION
 with the assumptions PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
SETRULES!SUBSET-INTER-RELATION-1, SETRULES!SUBSET-INTER-RELATION-2,
REL!INVERSE-INVERSE, FN!IS-FUNCTION-BOOL, PAIR!IS-PAIR-BOOL to ...
(TRUE)
IS-FUNCTION-INVERSE-TWIST-FN
Beginning proof of IS-FUNCTION-INVERSE-TWIST-FN ...
(= (FN!IS-FUNCTION (REL!INVERSE (TWIST-FN A B C))) (TRUE))
Invoking FN!IS-FUNCTION gives ...
(AND (REL!IS-RELATION (REL!INVERSE (TWIST-FN A B C)))
 (ALL (A$0 B$0 C$0)
  (IMPLIES
   (AND (IN (PAIR!PAIR A$0 B$0) (REL!INVERSE (TWIST-FN A B C)))
    (IN (PAIR!PAIR A$0 C$0) (REL!INVERSE (TWIST-FN A B C))))
   (= B$0 C$0))))
Which simplifies
 when rewriting with APPLY-TWIST-FN, PAIR!IN-CROSS, DOM-TWIST-FN,
IN-PAIR-FUNCTION, IS-FUNCTION-TWIST-FN, REL!FLIP-PAIR-PAIR, REL!IN-INVERSE,
IS-RELATION-TWIST-FN, REL!IS-RELATION-INVERSE
 forward chaining using FN!FUNCTION-IS-RELATION, PAIR!PAIR-COMPOSITION
 with the assumptions UNTWIST-TWIST, PAIR!IS-PAIR-BOOL, FN!IS-FUNCTION-BOOL,
REL!FLIP-PAIR-IS-INVOLUTION, PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR,
REL!IS-RELATION-BOOL, REL!INVERSE-INVERSE to ...
(TRUE)
APPLY-INVERSE-TWIST-FN
Beginning proof of APPLY-INVERSE-TWIST-FN ...
(IMPLIES (IN X (PAIR!CROSS A (PAIR!CROSS B C)))
 (= (FN!APPLY (REL!INVERSE (TWIST-FN A B C)) X) (UNTWIST X)))
Assuming FN!APPLY-DEFINITION with the
instantiations: (= F (REL!INVERSE (TWIST-FN A B C))) (= X X) generates ...
(IMPLIES
 (AND
  (IMPLIES
   (AND (FN!IS-FUNCTION (REL!INVERSE (TWIST-FN A B C)))
    (IN X (REL!DOM (REL!INVERSE (TWIST-FN A B C)))))
   (IN (PAIR!PAIR X (FN!APPLY (REL!INVERSE (TWIST-FN A B C)) X))
    (REL!INVERSE (TWIST-FN A B C))))
  (IN X (PAIR!CROSS A (PAIR!CROSS B C))))
 (= (FN!APPLY (REL!INVERSE (TWIST-FN A B C)) X) (UNTWIST X)))
Which simplifies
 when rewriting with REL!FLIP-PAIR-PAIR, REL!IN-INVERSE, PAIR!IN-CROSS,
RAN-TWIST-FN, REL!DOM-INVERSE, IS-FUNCTION-INVERSE-TWIST-FN
 forward chaining using PAIR!PAIR-COMPOSITION, FN!FUNCTION-IS-RELATION
 with the assumptions TWIST-UNTWIST, REL!FLIP-PAIR-IS-INVOLUTION,
PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, PAIR!IS-PAIR-BOOL,
FN!IS-FUNCTION-BOOL, REL!INVERSE-INVERSE to ...
(IMPLIES
 (AND (PAIR!IS-PAIR X) (IN (PAIR!FST X) A) (PAIR!IS-PAIR (PAIR!SND X))
  (IN (PAIR!FST (PAIR!SND X)) B) (IN (PAIR!SND (PAIR!SND X)) C)
  (IN (PAIR!PAIR (FN!APPLY (REL!INVERSE (TWIST-FN A B C)) X) X)
   (TWIST-FN A B C)))
 (= (FN!APPLY (REL!INVERSE (TWIST-FN A B C)) X) (UNTWIST X)))
Which simplifies
 when rewriting with APPLY-TWIST-FN, PAIR!IN-CROSS, DOM-TWIST-FN,
IN-PAIR-FUNCTION, IS-FUNCTION-TWIST-FN
 forward chaining using FN!FUNCTION-IS-RELATION, PAIR!PAIR-COMPOSITION
 with the assumptions TWIST-UNTWIST, UNTWIST-TWIST, FN!IS-FUNCTION-BOOL,
PAIR!FST-PAIR, PAIR!SND-PAIR, PAIR!PAIR-IS-PAIR, REL!INVERSE-INVERSE,
PAIR!IS-PAIR-BOOL to ...
(TRUE)
Done.