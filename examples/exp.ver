(function exp (b e)
    ((measure e))
  (if (>= e 1)
      (* b (exp b (+ -1 e)))
      1))
(REDUCE)

(grule exp-type (b e)
  (implies (= (type-of b) (int))
	   (= (type-of (exp b e)) (int))))
(PROVE-BY-INDUCTION)

(rule exp-by-1 (b)
  (implies (in b (int))
	   (= (exp b 1) b)))
(REDUCE)

(rule exp-0 (e)
  (= (exp 0 e)
     (if (>= e 1)
	 0
	 1)))
(REDUCE)

(rule exp-1 (e)
  (= (exp 1 e)
     1))
(PROVE-BY-INDUCTION)

(rule exp-plus (base e1 e2)
  (implies (and (<= 0 e1)
		(<= 0 e2)
		(in base (int)))
	   (= (exp base (+ e1 e2))
	      (* (exp base e1) (exp base e2)))))
(PROVE-BY-INDUCTION)

(rule exp-exp (base e1 e2)
  (implies (and (<= 0 e1)
		(<= 0 e2)
		(in base (int)))
	   (= (exp (exp base e1) e2)
	      (exp base (* e1 e2)))))
(PROVE-BY-INDUCTION)
(USE EXP-PLUS (BASE BASE) (E1 E1) (E2 (* E1 (+ -1 E2))))
(SIMPLIFY)

(axiom exp-times (b1 b2 e)
  (implies (and (<= 0 e)
		(in b1 (int))
		(in b2 (int)))
	   (= (exp (* b1 b2) e)
	      (* (exp b1 e) (exp b2 e)))))
(PROVE-BY-INDUCTION)

(grule exp-nonnegative (b e)
  (implies (>= b 0)
	   (>= (exp b e) 0)))
(PROVE-BY-INDUCTION)

(grule exp-positive (b e)
  (implies (>= b 1)
	   (>= (exp b e) 1)))
(PROVE-BY-INDUCTION)
