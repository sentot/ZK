;;;
;;; Additional facts about elementary functions
;;;

;;; Unlike in EVES, in ZK the elementary type is just (INT)

(function succ-closed (x) ()
  (all (a) (implies (in a x)
		    (in (succ a) x))))

(axiom >=-lemma-1 (x y z)
  (implies (and (>= y x)
		(in x z)
		(succ-closed z))
	   (in y z)))
(USE >=.DEFINITION (X X) (Y Y))
(REARRANGE)
(REDUCE)
(INSTANTIATE (Z$0 Z))
(SIMPLIFY)

(axiom >=-lemma-2 (x y)
  (implies (all (z) (implies (and (in x z)
				  (succ-closed z))
			     (in y z)))
	   (>= y x)))
(USE >=.DEFINITION (X X) (Y Y))
(SPLIT (>= Y X))
(WITHOUT-INSTANTIATION (SIMPLIFY))
(INSTANTIATE (Z$0 Z))
(REDUCE)

(axiom >=-transitive (i j k)
  (implies (and (>= i j)
		(>= j k))
	   (= (>= i k) (true))))
(USE >=-LEMMA-2 (Y I) (X K))
(SIMPLIFY)
(PRENEX)
(USE >=-LEMMA-1 (Y I) (X J) (Z Z))
(USE >=-LEMMA-1 (X K) (Y J) (Z Z))
(TRIVIAL-SIMPLIFY)

(rule >=-self (x)
  (= (>= x x) (true)))
(USE >=.DEFINITION (X X)(Y X))
(SIMPLIFY)

(axiom >=-succ-self (x)
  (= (>= (succ x) x) (true)))
(USE >=.DEFINITION (X X)(Y (SUCC X)))
(SIMPLIFY)

(axiom >=-succ-subgoal (x y)
  (implies (>= x y)
	   (= (>= (succ x) y) (true))))
(USE >=-TRANSITIVE (I (SUCC X)) (J X) (K Y))
(USE >=-SUCC-SELF (X X))
(SIMPLIFY)

(axiom >=-succ-development (x y)
  (= (>= x y)
     (or (= x y)
	 (>= x (succ y)))))
(USE >=.DEFINITION (X Y) (Y X))
(USE >=.DEFINITION (X (SUCC Y)) (Y X))
(SPLIT (AND (>= X Y) (>= X (SUCC Y))))
(SIMPLIFY)
(INSTANTIATE (Z$0 (SETADD Y Z)))
(REWRITE)
(SPLIT (= X Y))
(SIMPLIFY)
(INSTANTIATE (Z Z$0))
(SPLIT (>= X (SUCC Y)))
(SIMPLIFY)

(axiom >=-self-pred (x)
  (implies (= (type-of x) (int))
	   (= (>= x (pred x))
	      (true))))
(REWRITE)

(axiom >=-pred-development (x y)
  (implies (= (type-of x) (int))
	   (= (>= x y)
	      (or (= x y)
		  (>= (pred x) y)))))
(REWRITE)

(axiom assymetry (x y)
  (implies (= (type-of x) (int))
	   (= (= x y)
	      (and (>= x y) (>= y x)))))
(REWRITE)

(axiom trichotomy (x y)
  (implies (and (= (type-of x) (int))
		(= (type-of y) (type-of x)))
	   (or (= x y)
	       (> x y)
	       (< x y))))
(REDUCE)

;;; max and min

(rule >=-max-right (x y z)
  (implies (and (= (type-of x) (int))
		(= (type-of z) (type-of x)))
	   (= (>= x (max y z))
	      (and (>= x y)
		   (>= x z)))))
(REDUCE)

(rule >=-max-left (x y z)
  (implies (and (= (type-of x) (int))
		(= (type-of y) (type-of x)))
	   (= (>= (max x y) z)
	      (or (>= x z)
		  (>= y z)))))
(REDUCE)

(rule >=-min-left (x y z)
  (implies (and (= (type-of x) (int))
		(= (type-of y)(type-of x)))
	   (= (>= (min x y) z)
	      (and (>= x z)
		   (>= y z)))))
(REDUCE)

(rule >=-min-right (x y z)
  (implies (and (= (type-of x) (int))
		(= (type-of z)(type-of x)))
	   (= (>= x (min y z))
	      (or (>= x y)
		  (>= x z)))))
(REDUCE)

(grule min-type (x y)
  (implies (= (type-of x) (type-of y))
	   (= (type-of (min x y)) (type-of x))))
(reduce)

(grule max-type (x y)
  (implies (= (type-of x) (type-of y))
	   (= (type-of (max x y)) (type-of x))))
(reduce)

(rule succ-type (x)
  (implies (= (type-of x) (int))
	   (= (type-of (succ x))
	      (type-of x))))
(simplify)

;;; ranges

(rule null-range (x y)
  (implies (not (<= x y))
	   (= (range x y) (nullset))))
(USE =.EXTENSIONAL (X (RANGE X Y)) (Y (NULLSET)))
(REWRITE)
(SPLIT (= (RANGE X Y) (NULLSET)))
(SIMPLIFY)
(PRENEX)
(USE >=-TRANSITIVE (I Y) (J E) (K X))
(SIMPLIFY)

(rule singleton-range (x)
  (implies (= (type-of x) (int))
	   (= (range x x) (unit x))))
(USE =.EXTENSIONAL (X (RANGE X X)) (Y (UNIT X)))
(SPLIT (= (RANGE X X) (UNIT X)))
(REWRITE)
(PRENEX)
(USE ASSYMETRY (X E) (Y X))
(REWRITE)

(axiom range-bottom-expansion (x y)
  (implies (<= x y)
	   (= (range x y)
	      (setadd x (range (succ x) y)))))
(USE =.EXTENSIONAL (X (RANGE X Y)) (Y (SETADD X (RANGE (SUCC X) Y))))
(SPLIT (= (RANGE X Y) (SETADD X (RANGE (SUCC X) Y))))
(REWRITE)
(PRENEX)
(USE >=-SUCC-DEVELOPMENT (X E) (Y X))
(SIMPLIFY)

(axiom range-top-expansion (x y)
  (implies (and (= (type-of x) (int))
		(<= x y))
	   (= (range x y)
	      (setadd y (range x (pred y))))))
(USE =.EXTENSIONAL (X (RANGE X Y)) (Y (SETADD Y (RANGE X (PRED Y)))))
(REARRANGE)
(REWRITE)

(axiom range-subset-range (u v x y)
  (= (subset (range u v) (range x y))
     (implies (<= u v)
	      (and (<= x u) (<= v y)))))
(SPLIT (<= U V))
(REDUCE)
(CASES)
(SPLIT (>= Y V))
(CASES)
(SIMPLIFY)
(PRENEX)
(USE >=-TRANSITIVE (I E) (J U) (K X))
(USE >=-TRANSITIVE (I Y) (J V) (K E))
(SIMPLIFY)
(NEXT)
(SIMPLIFY)
(INSTANTIATE (E V))
(REWRITE)
(NEXT)
(INSTANTIATE (E$1 U))
(REWRITE)
(NEXT)

(rule inter-range-range (u v x y)
  (implies (= (type-of x) (int))
	   (= (inter (range u v) (range x y))
	      (if (and (= (type-of u) (type-of x))
		       (= (type-of v)(type-of y)))
		  (range (max u x) (min v y))
		  (nullset)))))
(USE =.EXTENSIONAL
     (X (INTER (RANGE U V) (RANGE X Y)))
     (Y (IF (AND (= (TYPE-OF U) (TYPE-OF X))
		 (= (TYPE-OF V) (TYPE-OF Y)))
	    (RANGE (MAX U X) (MIN V Y))
	    (NULLSET))))
(REARRANGE)
(REWRITE)
(SPLIT (= (TYPE-OF Y) (TYPE-OF X)))
(REWRITE)
(SPLIT (= (TYPE-OF E) (TYPE-OF X)))
(REWRITE)


(rule union-range-range (u v x y)
  (implies (and (= (type-of u)(type-of x))
		(= (type-of v)(type-of y))
		(= (type-of x) (int))
		(<= (max u x) (succ (min v y))))
	   (= (union (range u v)(range x y))
	      (range (min u x) (max v y)))))
(USE =.EXTENSIONAL
 (X (UNION (RANGE U V) (RANGE X Y))) (Y (RANGE (MIN U X) (MAX V Y))))
(REARRANGE)
(REWRITE)
(SPLIT (= (TYPE-OF X) (TYPE-OF Y)))
(REWRITE)
(SPLIT (= (TYPE-OF X) (INT)))
(REWRITE)
(SPLIT (= (TYPE-OF E) (INT)))
(REDUCE)

;;; open ranges

(zf-function below (x)
  (select (y (type-of x))
     (<= y x)))

(rule in-below (x y)
  (implies (= (type-of y) (int))
	   (= (in x (below y))
	      (<= x y))))
(REWRITE)


(zf-function above (x)
  (select (y (type-of x))
    (<= x y)))

(rule in-above (x y)
  (implies (= (type-of y) (int))
	   (= (in x (above y))
	      (>= x y))))
(REWRITE)

(axiom inter-above-below (x y)
  (implies (and (= (type-of x) (int))
		(= (type-of y) (int)))
	   (= (inter (above x) (below y))
	      (range x y))))
(USE =.EXTENSIONAL (X (INTER (ABOVE X) (BELOW Y))) (Y (RANGE X Y)))
(REARRANGE)
(REWRITE)

