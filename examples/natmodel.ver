;;;
;;; Definitions for natural numbers
;;;
;;;

(zf-function nat () (select (n (int)) (>= n 0)))

(rule in-nat (x)
  (= (in x (nat))
     (>= x 0)))
(REWRITE)

(function zerop (n) ()
  (not (>= n 1)))

(function weak-induction (n)
    ((measure n))
  (if (zerop n)
      (true)
      (weak-induction (- n 1))))
(REDUCE)

(function weakly-inductive (x) ()
  (and (in 0 x)
       (all (n) (implies (in n (inter x (nat)))
			 (in (+ 1 n) x)))))

(axiom weak-induction-1 (n x)
  (implies (and (weakly-inductive x)
		(in n (nat)))
	   (in n x)))
(INDUCT (WEAK-INDUCTION N))
(REDUCE)
(INSTANTIATE (N$0 (- N 1)))
(SIMPLIFY)

(axiom weak-induction-2 (x)
  (implies (weakly-inductive x)
	   (subset (nat) x)))
(USE WEAK-INDUCTION-1 (X X))
(INVOKE SUBSET)
(SIMPLIFY)

(function strong-induction (n)
    ((measure n))
  (if (zerop n)
      (true)
      (all (k) (if  (and (<= 0 k)
			 (< k n))
		    (strong-induction k)
		    (true)))))
(reduce)

(function strongly-inductive (x) ()
  (all (n)
    (implies (and (in n (nat))
		  (all (k) (implies (and (<= 0 k)
					 (< k n))
				    (in k x))))
	     (in n x))))

(zf-function strong-weak-bridge-set (x)
  (select (n (nat))
	  (all (k) (implies (and (<= 0 k)
				 (<= k n))
			    (in k x)))))

(rule strong-weak-bridge (x)
  (implies (strongly-inductive x)
	   (= (weakly-inductive (strong-weak-bridge-set x))
	      (true))))
(REDUCE)
(CASES)
(INSTANTIATE (N 0))
(SIMPLIFY)
(NEXT)
(INSTANTIATE (N K$2))
(INSTANTIATE (K$2 K$0))
(SIMPLIFY)
(NEXT)


(axiom strong-induction-1 (n x)
  (implies (and (strongly-inductive x)
		(in n (nat)))
	   (in n x)))
(USE WEAK-INDUCTION-1 (X (STRONG-WEAK-BRIDGE-SET X)) (N N))
(REARRANGE)
(REWRITE)

(axiom strong-induction-2 (x)
  (implies (strongly-inductive x)
	   (subset (nat) x)))
(use strong-induction-1 (x x))
(invoke subset)
(simplify)

(function is-smallest-nat-member (n x) ()
  (and (in n x)
       (in n (nat))
       (all (k)
	 (implies (and (in k x)
		       (in k (nat)))
		  (<= n k)))))

(axiom has-smallest (n x)
  (implies (and (in n x)
		(in n (nat)))
	   (some (k) (is-smallest-nat-member k x))))
(USE STRONG-INDUCTION-2 (X (DIFF (NAT) X)))
(REARRANGE)
(REDUCE)
(INSTANTIATE (K$0 N$0))
(SIMPLIFY)
(INSTANTIATE (K K$0))
(SIMPLIFY)

(axiom smallest-is-unique (n k x)
  (implies (and (is-smallest-nat-member k x)
		(is-smallest-nat-member n x))
	   (= n k)))
(REDUCE)
(INSTANTIATE (K$0 N))
(INSTANTIATE (K$1 K))
(REARRANGE)
(SIMPLIFY)

(zf-function smallest-nat-member (x)
  (that n (if (some (k) (is-smallest-nat-member k x))
	      (is-smallest-nat-member n x)
	      (= n -1))))
(SIMPLIFY)
(INSTANTIATE (N$0 -1))
(SIMPLIFY)
(INSTANTIATE (N K))
(SPLIT (= K N-0))
(SIMPLIFY)
(USE SMALLEST-IS-UNIQUE (X X))
(INSTANTIATE (K$0 K) (N N-0))
(SIMPLIFY)

(axiom smallest-is-smallest (n x)
  (implies (and (in n x)
		(in n (nat)))
	   (is-smallest-nat-member (smallest-nat-member x) x)))
(USE SMALLEST-NAT-MEMBER.DEFINITION (X X))
(USE HAS-SMALLEST (X X) (N N))
(SIMPLIFY)

(axiom smallest-is-smallest-2 (n x)
  (implies (and (in n x)
		(in n (nat)))
	   (and (in (smallest-nat-member x) x)
		(in (smallest-nat-member x) (nat))
		(<= (smallest-nat-member x) n))))
(use smallest-is-smallest (n n)(x x))
(rearrange)
(reduce)

(axiom smallest-of-nullset (x)
  (implies (= (inter x (nat)) (nullset))
	   (= (smallest-nat-member x) -1)))
(USE =.EXTENSIONAL (X (INTER X (NAT))) (Y (NULLSET)))
(USE SMALLEST-NAT-MEMBER.DEFINITION (X X))
(REWRITE)
(INVOKE IS-SMALLEST-NAT-MEMBER)
(REARRANGE)
(SIMPLIFY)
(REWRITE)

