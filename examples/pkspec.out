
Reading "/home/sentot/zk/version1/ZK/examples/pkspec.ver"
Warning RULE-LOOPS for MS!IN-PARTS-SETADD:
 The rule MS!IN-PARTS-SETADD loops upon itself.
Warning RULE-LOOPS for MS!IN-PARTS-ADD-KNOWN-IN:
 The rule MS!IN-PARTS-ADD-KNOWN-IN loops upon itself.
Warning RULE-LOOPS for SEQ!EXTENSIONALITY:
 The rule SEQ!EXTENSIONALITY loops upon itself.
Warning RULE-LOOPS for FN!FUNCTION-EXTENSIONALITY:
 The rule FN!FUNCTION-EXTENSIONALITY loops upon itself.
MAKE-STATE
IS-STATE
MAKE-STATE-IS-STATE
Beginning proof of MAKE-STATE-IS-STATE ...
(IS-STATE (MAKE-STATE M ST H))
IS-STATE-BOOL
Beginning proof of IS-STATE-BOOL ...
(= (TYPE-OF (IS-STATE S)) (BOOL))
STATE-IS-CONSTRUCTED
Beginning proof of STATE-IS-CONSTRUCTED ...
(IMPLIES (IS-STATE S) (SOME (M ST H) (= S (MAKE-STATE M ST H))))
SEEN-MESSAGES
STORES
HISTORY
SEEN-MESSAGES-OF-MAKE-STATE
Beginning proof of SEEN-MESSAGES-OF-MAKE-STATE ...
(= (SEEN-MESSAGES (MAKE-STATE SEEN-MESSAGES STORES HISTORY)) SEEN-MESSAGES)
STORES-OF-MAKE-STATE
Beginning proof of STORES-OF-MAKE-STATE ...
(= (STORES (MAKE-STATE SEEN-MESSAGES STORES HISTORY)) STORES)
HISTORY-OF-MAKE-STATE
Beginning proof of HISTORY-OF-MAKE-STATE ...
(= (HISTORY (MAKE-STATE SEEN-MESSAGES STORES HISTORY)) HISTORY)
TAG-OF-EVENT
MAKE-SEND-EVENT
MAKE-RECEIVE-EVENT
MAKE-OUT-OF-BAND-EVENT
MAKE-GENERATE-EVENT
MAKE-CONSTRUCT-EVENT
MAKE-INTRUDER-EVENT
TAG-OF-MAKE-SEND-EVENT
Beginning proof of TAG-OF-MAKE-SEND-EVENT ...
(= (TAG-OF-EVENT (MAKE-SEND-EVENT LABEL TIME MESSAGE PRINCIPAL)) 0)
TAG-OF-MAKE-RECEIVE-EVENT
Beginning proof of TAG-OF-MAKE-RECEIVE-EVENT ...
(= (TAG-OF-EVENT (MAKE-RECEIVE-EVENT LABEL TIME MESSAGE PRINCIPAL)) 1)
TAG-OF-MAKE-OUT-OF-BAND-EVENT
Beginning proof of TAG-OF-MAKE-OUT-OF-BAND-EVENT ...
(= (TAG-OF-EVENT (MAKE-OUT-OF-BAND-EVENT LABEL TIME MESSAGE SENDER RECEIVER))
 2)
TAG-OF-MAKE-GENERATE-EVENT
Beginning proof of TAG-OF-MAKE-GENERATE-EVENT ...
(= (TAG-OF-EVENT (MAKE-GENERATE-EVENT LABEL TIME MESSAGE PRINCIPAL)) 3)
TAG-OF-MAKE-CONSTRUCT-EVENT
Beginning proof of TAG-OF-MAKE-CONSTRUCT-EVENT ...
(= (TAG-OF-EVENT (MAKE-CONSTRUCT-EVENT LABEL TIME MESSAGE PRINCIPAL)) 4)
TAG-OF-MAKE-INTRUDER-EVENT
Beginning proof of TAG-OF-MAKE-INTRUDER-EVENT ...
(= (TAG-OF-EVENT (MAKE-INTRUDER-EVENT LABEL TIME MESSAGE)) 5)
SEND-EVENTS
RECEIVE-EVENTS
OUT-OF-BAND-EVENTS
GENERATE-EVENTS
CONSTRUCT-EVENTS
INTRUDER-EVENTS
SEND-EVENT-IS-CONSTRUCTED
Beginning proof of SEND-EVENT-IS-CONSTRUCTED ...
(IMPLIES (IN E (SEND-EVENTS))
 (SOME (L T M P)
  (AND (IN L (NAT!NAT)) (IN T (NAT!NAT)) (IN M (MS!MESSAGES))
   (IN P (MS!PRINCIPALS)) (= E (MAKE-SEND-EVENT L T M P)))))
RECEIVE-EVENT-IS-CONSTRUCTED
Beginning proof of RECEIVE-EVENT-IS-CONSTRUCTED ...
(IMPLIES (IN E (RECEIVE-EVENTS))
 (SOME (L T M P)
  (AND (IN L (NAT!NAT)) (IN T (NAT!NAT)) (IN M (MS!MESSAGES))
   (IN P (MS!PRINCIPALS)) (= E (MAKE-RECEIVE-EVENT L T M P)))))
OUT-OF-BAND-EVENT-IS-CONSTRUCTED
Beginning proof of OUT-OF-BAND-EVENT-IS-CONSTRUCTED ...
(IMPLIES (IN E (OUT-OF-BAND-EVENTS))
 (SOME (L T M S R)
  (AND (IN L (NAT!NAT)) (IN T (NAT!NAT)) (IN M (MS!MESSAGES))
   (IN S (MS!PRINCIPALS)) (IN R (MS!PRINCIPALS))
   (= E (MAKE-OUT-OF-BAND-EVENT L T M S R)))))
GENERATE-EVENT-IS-CONSTRUCTED
Beginning proof of GENERATE-EVENT-IS-CONSTRUCTED ...
(IMPLIES (IN E (GENERATE-EVENTS))
 (SOME (L T M P)
  (AND (IN L (NAT!NAT)) (IN T (NAT!NAT)) (IN M (MS!MESSAGES))
   (IN P (MS!PRINCIPALS)) (= E (MAKE-GENERATE-EVENT L T M P)))))
CONSTRUCT-EVENT-IS-CONSTRUCTED
Beginning proof of CONSTRUCT-EVENT-IS-CONSTRUCTED ...
(IMPLIES (IN E (CONSTRUCT-EVENTS))
 (SOME (L T M P)
  (AND (IN L (NAT!NAT)) (IN T (NAT!NAT)) (IN M (MS!MESSAGES))
   (IN P (MS!PRINCIPALS)) (= E (MAKE-CONSTRUCT-EVENT L T M P)))))
INTRUDER-EVENT-IS-CONSTRUCTED
Beginning proof of INTRUDER-EVENT-IS-CONSTRUCTED ...
(IMPLIES (IN E (INTRUDER-EVENTS))
 (SOME (L T M)
  (AND (IN L (NAT!NAT)) (IN T (NAT!NAT)) (IN M (MS!MESSAGES))
   (= E (MAKE-INTRUDER-EVENT L T M)))))
TAG-OF-SEND-EVENT
Beginning proof of TAG-OF-SEND-EVENT ...
(IMPLIES (IN E (SEND-EVENTS)) (= (TAG-OF-EVENT E) 0))
TAG-OF-RECEIVE-EVENT
Beginning proof of TAG-OF-RECEIVE-EVENT ...
(IMPLIES (IN E (RECEIVE-EVENTS)) (= (TAG-OF-EVENT E) 1))
TAG-OF-OUT-OF-BAND-EVENT
Beginning proof of TAG-OF-OUT-OF-BAND-EVENT ...
(IMPLIES (IN E (OUT-OF-BAND-EVENTS)) (= (TAG-OF-EVENT E) 2))
TAG-OF-GENERATE-EVENT
Beginning proof of TAG-OF-GENERATE-EVENT ...
(IMPLIES (IN E (GENERATE-EVENTS)) (= (TAG-OF-EVENT E) 3))
TAG-OF-CONSTRUCT-EVENT
Beginning proof of TAG-OF-CONSTRUCT-EVENT ...
(IMPLIES (IN E (CONSTRUCT-EVENTS)) (= (TAG-OF-EVENT E) 4))
TAG-OF-INTRUDER-EVENT
Beginning proof of TAG-OF-INTRUDER-EVENT ...
(IMPLIES (IN E (INTRUDER-EVENTS)) (= (TAG-OF-EVENT E) 5))
MAKE-SEND-EVENT-IS-SEND-EVENT
Beginning proof of MAKE-SEND-EVENT-IS-SEND-EVENT ...
(IMPLIES (AND (>= L 0) (>= T 0) (IN M (MS!MESSAGES)) (IN P (MS!PRINCIPALS)))
 (IN (MAKE-SEND-EVENT L T M P) (SEND-EVENTS)))
MAKE-RECEIVE-EVENT-IS-RECEIVE-EVENT
Beginning proof of MAKE-RECEIVE-EVENT-IS-RECEIVE-EVENT ...
(IMPLIES (AND (>= L 0) (>= T 0) (IN M (MS!MESSAGES)) (IN P (MS!PRINCIPALS)))
 (IN (MAKE-RECEIVE-EVENT L T M P) (RECEIVE-EVENTS)))
MAKE-OUT-OF-BAND-EVENT-IS-OUT-OF-BAND-EVENT
Beginning proof of MAKE-OUT-OF-BAND-EVENT-IS-OUT-OF-BAND-EVENT ...
(IMPLIES
 (AND (>= L 0) (>= T 0) (IN M (MS!MESSAGES)) (IN S (MS!PRINCIPALS))
  (IN R (MS!PRINCIPALS)))
 (IN (MAKE-OUT-OF-BAND-EVENT L T M S R) (OUT-OF-BAND-EVENTS)))
MAKE-GENERATE-EVENT-IS-GENERATE-EVENT
Beginning proof of MAKE-GENERATE-EVENT-IS-GENERATE-EVENT ...
(IMPLIES (AND (>= L 0) (>= T 0) (IN M (MS!MESSAGES)) (IN P (MS!PRINCIPALS)))
 (IN (MAKE-GENERATE-EVENT L T M P) (GENERATE-EVENTS)))
MAKE-CONSTRUCT-EVENT-IS-CONSTRUCT-EVENT
Beginning proof of MAKE-CONSTRUCT-EVENT-IS-CONSTRUCT-EVENT ...
(IMPLIES (AND (>= L 0) (>= T 0) (IN M (MS!MESSAGES)) (IN P (MS!PRINCIPALS)))
 (IN (MAKE-CONSTRUCT-EVENT L T M P) (CONSTRUCT-EVENTS)))
MAKE-INTRUDER-EVENT-IS-INTRUDER-EVENT
Beginning proof of MAKE-INTRUDER-EVENT-IS-INTRUDER-EVENT ...
(IMPLIES (AND (>= L 0) (>= T 0) (IN M (MS!MESSAGES)))
 (IN (MAKE-INTRUDER-EVENT L T M) (INTRUDER-EVENTS)))
EVENTS
SEND-EVENT-IS-EVENT
Beginning proof of SEND-EVENT-IS-EVENT ...
(IMPLIES (IN E (SEND-EVENTS)) (IN E (EVENTS)))
RECEIVE-EVENT-IS-EVENT
Beginning proof of RECEIVE-EVENT-IS-EVENT ...
(IMPLIES (IN E (RECEIVE-EVENTS)) (IN E (EVENTS)))
OUT-OF-BAND-EVENT-IS-EVENT
Beginning proof of OUT-OF-BAND-EVENT-IS-EVENT ...
(IMPLIES (IN E (OUT-OF-BAND-EVENTS)) (IN E (EVENTS)))
GENERATE-EVENT-IS-EVENT
Beginning proof of GENERATE-EVENT-IS-EVENT ...
(IMPLIES (IN E (GENERATE-EVENTS)) (IN E (EVENTS)))
CONSTRUCT-EVENT-IS-EVENT
Beginning proof of CONSTRUCT-EVENT-IS-EVENT ...
(IMPLIES (IN E (CONSTRUCT-EVENTS)) (IN E (EVENTS)))
INTRUDER-EVENT-IS-EVENT
Beginning proof of INTRUDER-EVENT-IS-EVENT ...
(IMPLIES (IN E (INTRUDER-EVENTS)) (IN E (EVENTS)))
LABEL-OF-EVENT
LABEL-OF-SEND-EVENT
Beginning proof of LABEL-OF-SEND-EVENT ...
(= (LABEL-OF-EVENT (MAKE-SEND-EVENT L T M P)) L)
LABEL-OF-RECEIVE-EVENT
Beginning proof of LABEL-OF-RECEIVE-EVENT ...
(= (LABEL-OF-EVENT (MAKE-RECEIVE-EVENT L T M P)) L)
LABEL-OF-OUT-OF-BAND-EVENT
Beginning proof of LABEL-OF-OUT-OF-BAND-EVENT ...
(= (LABEL-OF-EVENT (MAKE-OUT-OF-BAND-EVENT L T M S R)) L)
LABEL-OF-GENERATE-EVENT
Beginning proof of LABEL-OF-GENERATE-EVENT ...
(= (LABEL-OF-EVENT (MAKE-GENERATE-EVENT L T M P)) L)
LABEL-OF-CONSTRUCT-EVENT
Beginning proof of LABEL-OF-CONSTRUCT-EVENT ...
(= (LABEL-OF-EVENT (MAKE-CONSTRUCT-EVENT L T M P)) L)
LABEL-OF-INTRUDER-EVENT
Beginning proof of LABEL-OF-INTRUDER-EVENT ...
(= (LABEL-OF-EVENT (MAKE-INTRUDER-EVENT L T M)) L)
TIME-OF-EVENT
TIME-OF-SEND-EVENT
Beginning proof of TIME-OF-SEND-EVENT ...
(= (TIME-OF-EVENT (MAKE-SEND-EVENT L T M P)) T)
TIME-OF-RECEIVE-EVENT
Beginning proof of TIME-OF-RECEIVE-EVENT ...
(= (TIME-OF-EVENT (MAKE-RECEIVE-EVENT L T M P)) T)
TIME-OF-OUT-OF-BAND-EVENT
Beginning proof of TIME-OF-OUT-OF-BAND-EVENT ...
(= (TIME-OF-EVENT (MAKE-OUT-OF-BAND-EVENT L T M S R)) T)
TIME-OF-GENERATE-EVENT
Beginning proof of TIME-OF-GENERATE-EVENT ...
(= (TIME-OF-EVENT (MAKE-GENERATE-EVENT L T M P)) T)
TIME-OF-CONSTRUCT-EVENT
Beginning proof of TIME-OF-CONSTRUCT-EVENT ...
(= (TIME-OF-EVENT (MAKE-CONSTRUCT-EVENT L T M P)) T)
TIME-OF-INTRUDER-EVENT
Beginning proof of TIME-OF-INTRUDER-EVENT ...
(= (TIME-OF-EVENT (MAKE-INTRUDER-EVENT L T M)) T)
MESSAGE-OF-EVENT
MESSAGE-OF-SEND-EVENT
Beginning proof of MESSAGE-OF-SEND-EVENT ...
(= (MESSAGE-OF-EVENT (MAKE-SEND-EVENT L T M P)) M)
MESSAGE-OF-RECEIVE-EVENT
Beginning proof of MESSAGE-OF-RECEIVE-EVENT ...
(= (MESSAGE-OF-EVENT (MAKE-RECEIVE-EVENT L T M P)) M)
MESSAGE-OF-OUT-OF-BAND-EVENT
Beginning proof of MESSAGE-OF-OUT-OF-BAND-EVENT ...
(= (MESSAGE-OF-EVENT (MAKE-OUT-OF-BAND-EVENT L T M S R)) M)
MESSAGE-OF-GENERATE-EVENT
Beginning proof of MESSAGE-OF-GENERATE-EVENT ...
(= (MESSAGE-OF-EVENT (MAKE-GENERATE-EVENT L T M P)) M)
MESSAGE-OF-CONSTRUCT-EVENT
Beginning proof of MESSAGE-OF-CONSTRUCT-EVENT ...
(= (MESSAGE-OF-EVENT (MAKE-CONSTRUCT-EVENT L T M P)) M)
MESSAGE-OF-INTRUDER-EVENT
Beginning proof of MESSAGE-OF-INTRUDER-EVENT ...
(= (MESSAGE-OF-EVENT (MAKE-INTRUDER-EVENT L T M)) M)
PRINCIPAL1-OF-EVENT
PRINCIPAL1-OF-SEND-EVENT
Beginning proof of PRINCIPAL1-OF-SEND-EVENT ...
(= (PRINCIPAL1-OF-EVENT (MAKE-SEND-EVENT L T M P)) P)
PRINCIPAL1-OF-RECEIVE-EVENT
Beginning proof of PRINCIPAL1-OF-RECEIVE-EVENT ...
(= (PRINCIPAL1-OF-EVENT (MAKE-RECEIVE-EVENT L T M P)) P)
PRINCIPAL1-OF-OUT-OF-BAND-EVENT
Beginning proof of PRINCIPAL1-OF-OUT-OF-BAND-EVENT ...
(= (PRINCIPAL1-OF-EVENT (MAKE-OUT-OF-BAND-EVENT L T M S R)) S)
PRINCIPAL1-OF-GENERATE-EVENT
Beginning proof of PRINCIPAL1-OF-GENERATE-EVENT ...
(= (PRINCIPAL1-OF-EVENT (MAKE-GENERATE-EVENT L T M P)) P)
PRINCIPAL1-OF-CONSTRUCT-EVENT
Beginning proof of PRINCIPAL1-OF-CONSTRUCT-EVENT ...
(= (PRINCIPAL1-OF-EVENT (MAKE-CONSTRUCT-EVENT L T M P)) P)
PRINCIPAL2-OF-EVENT
PRINCIPAL2-OF-OUT-OF-BAND-EVENT
Beginning proof of PRINCIPAL2-OF-OUT-OF-BAND-EVENT ...
(= (PRINCIPAL2-OF-EVENT (MAKE-OUT-OF-BAND-EVENT L T M S R)) R)
TIME-STRICTLY-INCREASES
Beginning proof of TIME-STRICTLY-INCREASES ...
(IF (SEQ!EMPTYP HISTORY) (TRUE)
 (IF (>= (SEQ!LENGTH HISTORY) 2)
  (M< (SEQ!LENGTH (SEQ!TAIL HISTORY)) (SEQ!LENGTH HISTORY)) (TRUE)))
TIME-CONSTRAINT
TIME-CONSTRAINT-IMPLIES-NAT
Beginning proof of TIME-CONSTRAINT-IMPLIES-NAT ...
(IMPLIES (TIME-CONSTRAINT TIME STATE) (>= TIME 0))
TIME-OF-EVENT-IN-CONSTRAINED-HISTORY-NAT
Beginning proof of TIME-OF-EVENT-IN-CONSTRAINED-HISTORY-NAT ...
(IMPLIES
 (AND (SEQ!IS-SEQUENCE HISTORY) (SEQ!IS-MEMBER EVENT HISTORY)
  (TIME-STRICTLY-INCREASES HISTORY))
 (>= (TIME-OF-EVENT EVENT) 0))
ALL-STORAGE
ADD-TO-STORAGE
ADD-TO-STORAGE-IS-FUNCTION
Beginning proof of ADD-TO-STORAGE-IS-FUNCTION ...
(IMPLIES (FN!IS-FUNCTION STORES)
 (FN!IS-FUNCTION (ADD-TO-STORAGE STORES PRINCIPAL MESSAGE)))
ADD-NULLSET-TO-STORAGE
Beginning proof of ADD-NULLSET-TO-STORAGE ...
(IMPLIES (AND (FN!IS-FUNCTION STORES) (IN PRINCIPAL (REL!DOM STORES)))
 (= (ADD-TO-STORAGE STORES PRINCIPAL (NULLSET)) STORES))
STORAGE-OF
ALL-MESSAGES-IN-STATE
ALL-MESSAGES-IN-STATE-DEFINITION
Beginning proof of ALL-MESSAGES-IN-STATE-DEFINITION ...
(= (ALL-MESSAGES-IN-STATE STATE)
 (UNION (MS!PUBLIC-KEYS)
  (UNION (MS!TEXT-MESSAGES)
   (UNION (MS!PRINCIPALS)
    (UNION (SEEN-MESSAGES STATE) (ALL-STORAGE (STORES STATE)))))))
SIGN
SIGN-IS-IN-COMBINE-MESSAGES
Beginning proof of SIGN-IS-IN-COMBINE-MESSAGES ...
(IMPLIES (AND (IN MESSAGE (MS!MESSAGES)) (IN KEY (MS!KEYS)))
 (IN (SIGN MESSAGE KEY) (MS!COMBINE-MESSAGES)))
3COMBINE
3COMBINE-IS-MESSAGE
Beginning proof of 3COMBINE-IS-MESSAGE ...
(IMPLIES
 (AND (IN M1 (MS!MESSAGES)) (IN M2 (MS!MESSAGES)) (IN M3 (MS!MESSAGES)))
 (IN (3COMBINE M1 M2 M3) (MS!MESSAGES)))
4COMBINE
4COMBINE-IS-MESSAGE
Beginning proof of 4COMBINE-IS-MESSAGE ...
(IMPLIES
 (AND (IN M1 (MS!MESSAGES)) (IN M2 (MS!MESSAGES)) (IN M3 (MS!MESSAGES))
  (IN M4 (MS!MESSAGES)))
 (IN (4COMBINE M1 M2 M3 M4) (MS!MESSAGES)))
5COMBINE
5COMBINE-IS-MESSAGE
Beginning proof of 5COMBINE-IS-MESSAGE ...
(IMPLIES
 (AND (IN M1 (MS!MESSAGES)) (IN M2 (MS!MESSAGES)) (IN M3 (MS!MESSAGES))
  (IN M4 (MS!MESSAGES)) (IN M5 (MS!MESSAGES)))
 (IN (5COMBINE M1 M2 M3 M4 M5) (MS!MESSAGES)))
6COMBINE
6COMBINE-IS-MESSAGE
Beginning proof of 6COMBINE-IS-MESSAGE ...
(IMPLIES
 (AND (IN M1 (MS!MESSAGES)) (IN M2 (MS!MESSAGES)) (IN M3 (MS!MESSAGES))
  (IN M4 (MS!MESSAGES)) (IN M5 (MS!MESSAGES)) (IN M6 (MS!MESSAGES)))
 (IN (6COMBINE M1 M2 M3 M4 M5 M6) (MS!MESSAGES)))
TIME-STRICTLY-INCREASES-STEP
Beginning proof of TIME-STRICTLY-INCREASES-STEP ...
(IMPLIES
 (AND (TIME-STRICTLY-INCREASES (HISTORY STATE))
  (TIME-CONSTRAINT (TIME-OF-EVENT EVENT) STATE))
 (= (TIME-STRICTLY-INCREASES (SEQ!TACK EVENT (HISTORY STATE))) (TRUE)))
ADD-TO-STATE-STORAGE
ADD-TO-STATE-STORAGE-IS-STATE
Beginning proof of ADD-TO-STATE-STORAGE-IS-STATE ...
(IS-STATE (ADD-TO-STATE-STORAGE PRINCIPAL MESSAGE STATE))
SEEN-MESSAGES-OF-ADD-TO-STATE-STORAGE
Beginning proof of SEEN-MESSAGES-OF-ADD-TO-STATE-STORAGE ...
(= (SEEN-MESSAGES (ADD-TO-STATE-STORAGE PRINCIPAL MESSAGE STATE))
 (SEEN-MESSAGES STATE))
STORES-OF-ADD-TO-STATE-STORAGE
Beginning proof of STORES-OF-ADD-TO-STATE-STORAGE ...
(= (STORES (ADD-TO-STATE-STORAGE PRINCIPAL MESSAGE STATE))
 (ADD-TO-STORAGE (STORES STATE) PRINCIPAL MESSAGE))
HISTORY-OF-ADD-TO-STATE-STORAGE
Beginning proof of HISTORY-OF-ADD-TO-STATE-STORAGE ...
(= (HISTORY (ADD-TO-STATE-STORAGE PRINCIPAL MESSAGE STATE)) (HISTORY STATE))
ADD-TO-STATE-HISTORY
ADD-TO-STATE-HISTORY-IS-STATE
Beginning proof of ADD-TO-STATE-HISTORY-IS-STATE ...
(IS-STATE (ADD-TO-STATE-HISTORY EVENT STATE))
SEEN-MESSAGES-OF-ADD-TO-STATE-HISTORY
Beginning proof of SEEN-MESSAGES-OF-ADD-TO-STATE-HISTORY ...
(= (SEEN-MESSAGES (ADD-TO-STATE-HISTORY EVENT STATE)) (SEEN-MESSAGES STATE))
STORES-OF-ADD-TO-STATE-HISTORY
Beginning proof of STORES-OF-ADD-TO-STATE-HISTORY ...
(= (STORES (ADD-TO-STATE-HISTORY EVENT STATE)) (STORES STATE))
HISTORY-OF-ADD-TO-STATE-HISTORY
Beginning proof of HISTORY-OF-ADD-TO-STATE-HISTORY ...
(= (HISTORY (ADD-TO-STATE-HISTORY EVENT STATE))
 (SEQ!TACK EVENT (HISTORY STATE)))
ADD-TO-STATE-SEEN-MESSAGES
ADD-TO-STATE-SEEN-MESSAGES-IS-STATE
Beginning proof of ADD-TO-STATE-SEEN-MESSAGES-IS-STATE ...
(IS-STATE (ADD-TO-STATE-SEEN-MESSAGES MESSAGE STATE))
SEEN-MESSAGES-OF-ADD-TO-STATE-SEEN-MESSAGES
Beginning proof of SEEN-MESSAGES-OF-ADD-TO-STATE-SEEN-MESSAGES ...
(= (SEEN-MESSAGES (ADD-TO-STATE-SEEN-MESSAGES MESSAGE STATE))
 (UNION MESSAGE (SEEN-MESSAGES STATE)))
STORES-OF-ADD-TO-STATE-SEEN-MESSAGES
Beginning proof of STORES-OF-ADD-TO-STATE-SEEN-MESSAGES ...
(= (STORES (ADD-TO-STATE-SEEN-MESSAGES MESSAGE STATE)) (STORES STATE))
HISTORY-OF-ADD-TO-STATE-SEEN-MESSAGES
Beginning proof of HISTORY-OF-ADD-TO-STATE-SEEN-MESSAGES ...
(= (HISTORY (ADD-TO-STATE-SEEN-MESSAGES MESSAGE STATE)) (HISTORY STATE))
IS-GOOD-STATE
IS-GOOD-STATE-IMPLICATION
Beginning proof of IS-GOOD-STATE-IMPLICATION ...
(IMPLIES (IS-GOOD-STATE STATE)
 (AND (IS-STATE STATE) (SUBSET (SEEN-MESSAGES STATE) (MS!MESSAGES))
  (TIME-STRICTLY-INCREASES (HISTORY STATE))
  (IN (HISTORY STATE) (SEQ!SEQUENCE-OF (EVENTS)))
  (FN!IS-FUNCTION (STORES STATE)) (= (REL!DOM (STORES STATE)) (MS!PRINCIPALS))
  (SUBSET (REL!RAN (STORES STATE)) (POWERSET (MS!MESSAGES)))))
IS-GOOD-STATE-ADD-TO-STATE-STORAGE
Beginning proof of IS-GOOD-STATE-ADD-TO-STATE-STORAGE ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN PRINCIPAL (MS!PRINCIPALS))
  (SUBSET MESSAGES (MS!MESSAGES)))
 (= (IS-GOOD-STATE (ADD-TO-STATE-STORAGE PRINCIPAL MESSAGES STATE)) (TRUE)))
IS-GOOD-STATE-ADD-TO-STATE-HISTORY
Beginning proof of IS-GOOD-STATE-ADD-TO-STATE-HISTORY ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN EVENT (EVENTS))
  (TIME-CONSTRAINT (TIME-OF-EVENT EVENT) STATE))
 (= (IS-GOOD-STATE (ADD-TO-STATE-HISTORY EVENT STATE)) (TRUE)))
IS-GOOD-STATE-ADD-TO-STATE-SEEN-MESSAGES
Beginning proof of IS-GOOD-STATE-ADD-TO-STATE-SEEN-MESSAGES ...
(IMPLIES (AND (IS-GOOD-STATE STATE) (SUBSET MESSAGES (MS!MESSAGES)))
 (= (IS-GOOD-STATE (ADD-TO-STATE-SEEN-MESSAGES MESSAGES STATE)) (TRUE)))
STORAGE-OF-ADD-TO-STATE-STORAGE
Beginning proof of STORAGE-OF-ADD-TO-STATE-STORAGE ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN P1 (MS!PRINCIPALS)) (IN P2 (MS!PRINCIPALS)))
 (= (STORAGE-OF P1 (ADD-TO-STATE-STORAGE P2 M STATE))
  (IF (= P1 P2) (UNION M (STORAGE-OF P1 STATE)) (STORAGE-OF P1 STATE))))
STORAGE-OF-ADD-TO-STATE-HISTORY
Beginning proof of STORAGE-OF-ADD-TO-STATE-HISTORY ...
(IMPLIES (IS-GOOD-STATE STATE)
 (= (STORAGE-OF P (ADD-TO-STATE-HISTORY EVENT STATE)) (STORAGE-OF P STATE)))
STORAGE-OF-ADD-TO-STATE-SEEN-MESSAGES
Beginning proof of STORAGE-OF-ADD-TO-STATE-SEEN-MESSAGES ...
(IMPLIES (IS-GOOD-STATE STATE)
 (= (STORAGE-OF P (ADD-TO-STATE-SEEN-MESSAGES M STATE)) (STORAGE-OF P STATE)))
KNOWN-BY-PRINCIPAL
FORGEABLE
SEND-STEP
SEND-STEP-PRESERVES-GOOD-STATE
Beginning proof of SEND-STEP-PRESERVES-GOOD-STATE ...
(= (IS-GOOD-STATE (SEND-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IS-GOOD-STATE STATE))
RECEIVE-STEP
RECEIVE-STEP-PRESERVES-GOOD-STATE
Beginning proof of RECEIVE-STEP-PRESERVES-GOOD-STATE ...
(= (IS-GOOD-STATE (RECEIVE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IS-GOOD-STATE STATE))
OUT-OF-BAND-STEP
OUT-OF-BAND-STEP-PRESERVES-GOOD-STATE
Beginning proof of OUT-OF-BAND-STEP-PRESERVES-GOOD-STATE ...
(= (IS-GOOD-STATE (OUT-OF-BAND-STEP LABEL TIME MESSAGE SENDER RECEIVER STATE))
 (IS-GOOD-STATE STATE))
GENERATE-STEP
GENERATE-STEP-PRESERVES-GOOD-STATE
Beginning proof of GENERATE-STEP-PRESERVES-GOOD-STATE ...
(= (IS-GOOD-STATE (GENERATE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IS-GOOD-STATE STATE))
CONSTRUCT-STEP
CONSTRUCT-STEP-PRESERVES-GOOD-STATE
Beginning proof of CONSTRUCT-STEP-PRESERVES-GOOD-STATE ...
(= (IS-GOOD-STATE (CONSTRUCT-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IS-GOOD-STATE STATE))
INTRUDER-STEP
INTRUDER-STEP-PRESERVES-GOOD-STATE
Beginning proof of INTRUDER-STEP-PRESERVES-GOOD-STATE ...
(= (IS-GOOD-STATE (INTRUDER-STEP LABEL TIME MESSAGE STATE))
 (IS-GOOD-STATE STATE))
GOOD-STEP
IS-GOOD-EVOLUTION-STATE
Beginning proof of IS-GOOD-EVOLUTION-STATE ...
(IF (SEQ!EMPTYP (HISTORY STATE)) (TRUE)
 (ALL (PREVIOUS-STATE)
  (IF (= (HISTORY PREVIOUS-STATE) (SEQ!TAIL (HISTORY STATE)))
   (M< (SEQ!LENGTH (HISTORY PREVIOUS-STATE)) (SEQ!LENGTH (HISTORY STATE)))
   (TRUE))))
IS-GOOD-EVOLUTION-STATE-IS-GOOD-STATE
Beginning proof of IS-GOOD-EVOLUTION-STATE-IS-GOOD-STATE ...
(IMPLIES (IS-GOOD-EVOLUTION-STATE STATE) (IS-GOOD-STATE STATE))
GOOD-STEP-IMPLIES-GOOD-STATES
Beginning proof of GOOD-STEP-IMPLIES-GOOD-STATES ...
(IMPLIES (GOOD-STEP S0 S1) (AND (IS-GOOD-STATE S0) (IS-GOOD-STATE S1)))
SEEN-MESSAGES-SEND-STEP
Beginning proof of SEEN-MESSAGES-SEND-STEP ...
(= (SEEN-MESSAGES (SEND-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IF
  (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
   (IN PRINCIPAL (MS!PRINCIPALS))
   (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL STATE))
  (SETADD MESSAGE (SEEN-MESSAGES STATE)) (SEEN-MESSAGES STATE)))
STORAGE-OF-SEND-STEP
Beginning proof of STORAGE-OF-SEND-STEP ...
(IMPLIES (IN P (MS!PRINCIPALS))
 (= (STORAGE-OF P (SEND-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
  (STORAGE-OF P STATE)))
HISTORY-OF-SEND-STEP
Beginning proof of HISTORY-OF-SEND-STEP ...
(= (HISTORY (SEND-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IF
  (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
   (IN PRINCIPAL (MS!PRINCIPALS))
   (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL STATE))
  (SEQ!TACK (MAKE-SEND-EVENT LABEL TIME MESSAGE PRINCIPAL) (HISTORY STATE))
  (HISTORY STATE)))
SEEN-MESSAGES-RECEIVE-STEP
Beginning proof of SEEN-MESSAGES-RECEIVE-STEP ...
(= (SEEN-MESSAGES (RECEIVE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (SEEN-MESSAGES STATE))
STORAGE-OF-RECEIVE-STEP
Beginning proof of STORAGE-OF-RECEIVE-STEP ...
(IMPLIES (IN P (MS!PRINCIPALS))
 (= (STORAGE-OF P (RECEIVE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
  (IF
   (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
    (IN PRINCIPAL (MS!PRINCIPALS)) (FORGEABLE MESSAGE STATE) (= P PRINCIPAL))
   (SETADD MESSAGE (STORAGE-OF P STATE)) (STORAGE-OF P STATE))))
HISTORY-OF-RECEIVE-STEP
Beginning proof of HISTORY-OF-RECEIVE-STEP ...
(= (HISTORY (RECEIVE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IF
  (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
   (IN PRINCIPAL (MS!PRINCIPALS)) (FORGEABLE MESSAGE STATE))
  (SEQ!TACK (MAKE-RECEIVE-EVENT LABEL TIME MESSAGE PRINCIPAL) (HISTORY STATE))
  (HISTORY STATE)))
SEEN-MESSAGES-OUT-OF-BAND-STEP
Beginning proof of SEEN-MESSAGES-OUT-OF-BAND-STEP ...
(= (SEEN-MESSAGES (OUT-OF-BAND-STEP LABEL TIME MESSAGE SENDER RECEIVER STATE))
 (SEEN-MESSAGES STATE))
STORAGE-OF-OUT-OF-BAND-STEP
Beginning proof of STORAGE-OF-OUT-OF-BAND-STEP ...
(IMPLIES (IN P (MS!PRINCIPALS))
 (= (STORAGE-OF P (OUT-OF-BAND-STEP LABEL TIME MESSAGE SENDER RECEIVER STATE))
  (IF
   (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
    (IN SENDER (MS!PRINCIPALS)) (IN RECEIVER (MS!PRINCIPALS))
    (KNOWN-BY-PRINCIPAL MESSAGE SENDER STATE) (= P RECEIVER))
   (SETADD MESSAGE (STORAGE-OF P STATE)) (STORAGE-OF P STATE))))
HISTORY-OF-OUT-OF-BAND-STEP
Beginning proof of HISTORY-OF-OUT-OF-BAND-STEP ...
(= (HISTORY (OUT-OF-BAND-STEP LABEL TIME MESSAGE SENDER RECEIVER STATE))
 (IF
  (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
   (IN SENDER (MS!PRINCIPALS)) (IN RECEIVER (MS!PRINCIPALS))
   (KNOWN-BY-PRINCIPAL MESSAGE SENDER STATE))
  (SEQ!TACK (MAKE-OUT-OF-BAND-EVENT LABEL TIME MESSAGE SENDER RECEIVER)
   (HISTORY STATE))
  (HISTORY STATE)))
SEEN-MESSAGES-GENERATE-STEP
Beginning proof of SEEN-MESSAGES-GENERATE-STEP ...
(= (SEEN-MESSAGES (GENERATE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (SEEN-MESSAGES STATE))
STORAGE-OF-GENERATE-STEP
Beginning proof of STORAGE-OF-GENERATE-STEP ...
(IMPLIES (IN P (MS!PRINCIPALS))
 (= (STORAGE-OF P (GENERATE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
  (IF
   (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
    (IN MESSAGE (MS!ATOMIC-MESSAGES))
    (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE STATE))
    (IN PRINCIPAL (MS!PRINCIPALS)) (= P PRINCIPAL))
   (SETADD MESSAGE (STORAGE-OF P STATE)) (STORAGE-OF P STATE))))
HISTORY-OF-GENERATE-STEP
Beginning proof of HISTORY-OF-GENERATE-STEP ...
(= (HISTORY (GENERATE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IF
  (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
   (IN MESSAGE (MS!ATOMIC-MESSAGES))
   (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE STATE))
   (IN PRINCIPAL (MS!PRINCIPALS)))
  (SEQ!TACK (MAKE-GENERATE-EVENT LABEL TIME MESSAGE PRINCIPAL)
   (HISTORY STATE))
  (HISTORY STATE)))
SEEN-MESSAGES-CONSTRUCT-STEP
Beginning proof of SEEN-MESSAGES-CONSTRUCT-STEP ...
(= (SEEN-MESSAGES (CONSTRUCT-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (SEEN-MESSAGES STATE))
STORAGE-OF-CONSTRUCT-STEP
Beginning proof of STORAGE-OF-CONSTRUCT-STEP ...
(= (STORAGE-OF P (CONSTRUCT-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (STORAGE-OF P STATE))
HISTORY-OF-CONSTRUCT-STEP
Beginning proof of HISTORY-OF-CONSTRUCT-STEP ...
(= (HISTORY (CONSTRUCT-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
 (IF
  (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
   (IN PRINCIPAL (MS!PRINCIPALS))
   (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL STATE))
  (SEQ!TACK (MAKE-CONSTRUCT-EVENT LABEL TIME MESSAGE PRINCIPAL)
   (HISTORY STATE))
  (HISTORY STATE)))
SEEN-MESSAGES-INTRUDER-STEP
Beginning proof of SEEN-MESSAGES-INTRUDER-STEP ...
(= (SEEN-MESSAGES (INTRUDER-STEP LABEL TIME MESSAGE STATE))
 (IF
  (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
   (IN MESSAGE (MS!ATOMIC-MESSAGES))
   (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE STATE)))
  (SETADD MESSAGE (SEEN-MESSAGES STATE)) (SEEN-MESSAGES STATE)))
STORAGE-OF-INTRUDER-STEP
Beginning proof of STORAGE-OF-INTRUDER-STEP ...
(= (STORAGE-OF P (INTRUDER-STEP LABEL TIME MESSAGE STATE))
 (STORAGE-OF P STATE))
HISTORY-OF-INTRUDER-STEP
Beginning proof of HISTORY-OF-INTRUDER-STEP ...
(= (HISTORY (INTRUDER-STEP LABEL TIME MESSAGE STATE))
 (IF
  (AND (IS-GOOD-STATE STATE) (TIME-CONSTRAINT TIME STATE) (>= LABEL 0)
   (IN MESSAGE (MS!ATOMIC-MESSAGES))
   (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE STATE)))
  (SEQ!TACK (MAKE-INTRUDER-EVENT LABEL TIME MESSAGE) (HISTORY STATE))
  (HISTORY STATE)))
IS-GOOD-EVOLUTION
Beginning proof of IS-GOOD-EVOLUTION ...
(IF (>= (SEQ!LENGTH SEQUENCE) 2)
 (M< (SEQ!LENGTH (SEQ!TAIL SEQUENCE)) (SEQ!LENGTH SEQUENCE)) (TRUE))
TAIL-IS-SEQUENCE
Beginning proof of TAIL-IS-SEQUENCE ...
(IMPLIES (AND (SEQ!IS-SEQUENCE SEQUENCE) (SEQ!IS-TACK SEQUENCE))
 (SEQ!IS-SEQUENCE (SEQ!TAIL SEQUENCE)))
HISTORY-OF-HEAD-OF-TAIL-OF-GOOD-EVOLUTION
Beginning proof of HISTORY-OF-HEAD-OF-TAIL-OF-GOOD-EVOLUTION ...
(IMPLIES (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= (SEQ!LENGTH SEQUENCE) 2))
 (= (HISTORY (SEQ!HEAD (SEQ!TAIL SEQUENCE)))
  (SEQ!TAIL (HISTORY (SEQ!HEAD SEQUENCE)))))
LENGTH-OF-HISTORY-OF-GOOD-EVOLUTION
Beginning proof of LENGTH-OF-HISTORY-OF-GOOD-EVOLUTION ...
(IMPLIES (IS-GOOD-EVOLUTION SEQUENCE)
 (= (SEQ!LENGTH (HISTORY (SEQ!HEAD SEQUENCE))) (- (SEQ!LENGTH SEQUENCE) 1)))
HEAD-OF-GOOD-EVOLUTION
Beginning proof of HEAD-OF-GOOD-EVOLUTION ...
(IMPLIES (IS-GOOD-EVOLUTION SEQUENCE)
 (IS-GOOD-EVOLUTION-STATE (SEQ!HEAD SEQUENCE)))
IS-GOOD-EVOLUTION-TAIL
Beginning proof of IS-GOOD-EVOLUTION-TAIL ...
(IMPLIES (AND (>= (SEQ!LENGTH SEQUENCE) 2) (IS-GOOD-EVOLUTION SEQUENCE))
 (= (IS-GOOD-EVOLUTION (SEQ!TAIL SEQUENCE)) (TRUE)))
IS-INITIAL-EVOLUTION-STATE
NON-INITIAL-STATE-HAS-NON-EMPTY-HISTORY
Beginning proof of NON-INITIAL-STATE-HAS-NON-EMPTY-HISTORY ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (SEQ!IS-MEMBER STATE SEQUENCE)
  (NOT (IS-INITIAL-EVOLUTION-STATE STATE)))
 (>= (SEQ!LENGTH (HISTORY STATE)) 1))
HISTORY-OF-STATE-IS-SUBSEQUENCE
Beginning proof of HISTORY-OF-STATE-IS-SUBSEQUENCE ...
(IMPLIES (AND (IS-GOOD-EVOLUTION SEQUENCE) (SEQ!IS-MEMBER STATE SEQUENCE))
 (SOME (S)
  (AND (SEQ!IS-SEQUENCE S)
   (= (HISTORY (SEQ!HEAD SEQUENCE)) (SEQ!JOIN S (HISTORY STATE))))))
TIME-OF-EVENT-OF-EVOLUTION-STATE
Beginning proof of TIME-OF-EVENT-OF-EVOLUTION-STATE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (SEQ!IS-MEMBER E (HISTORY STATE)))
 (>= (TIME-OF-EVENT E) 0))
SEEN-MESSAGES-MONOTONIC
Beginning proof of SEEN-MESSAGES-MONOTONIC ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N2 1) (>= N1 N2)
  (>= (SEQ!LENGTH SEQUENCE) N1))
 (SUBSET (SEEN-MESSAGES (SEQ!NTH SEQUENCE N1))
  (SEEN-MESSAGES (SEQ!NTH SEQUENCE N2))))
FORGEABLE-IS-MONOTONIC
Beginning proof of FORGEABLE-IS-MONOTONIC ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N2 1) (>= N1 N2)
  (>= (SEQ!LENGTH SEQUENCE) N1) (FORGEABLE MESSAGE (SEQ!NTH SEQUENCE N1)))
 (FORGEABLE MESSAGE (SEQ!NTH SEQUENCE N2)))
STORAGE-OF-PRINCIPAL-MONOTONIC
Beginning proof of STORAGE-OF-PRINCIPAL-MONOTONIC ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (IN PRINCIPAL (MS!PRINCIPALS)) (>= N2 1)
  (>= N1 N2) (>= (SEQ!LENGTH SEQUENCE) N1))
 (SUBSET (STORAGE-OF PRINCIPAL (SEQ!NTH SEQUENCE N1))
  (STORAGE-OF PRINCIPAL (SEQ!NTH SEQUENCE N2))))
KNOWN-BY-IS-MONOTONIC
Beginning proof of KNOWN-BY-IS-MONOTONIC ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (IN PRINCIPAL (MS!PRINCIPALS)) (>= N2 1)
  (>= N1 N2) (>= (SEQ!LENGTH SEQUENCE) N1)
  (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL (SEQ!NTH SEQUENCE N1)))
 (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL (SEQ!NTH SEQUENCE N2)))
SEQUENCE-MEMBER-CAN-BE-ACCESSED-USING-NTH
Beginning proof of SEQUENCE-MEMBER-CAN-BE-ACCESSED-USING-NTH ...
(IMPLIES (AND (SEQ!IS-SEQUENCE S) (SEQ!IS-MEMBER M S))
 (SOME (N) (AND (>= N 1) (= M (SEQ!NTH S N)) (<= N (SEQ!LENGTH S)))))
MEMBER-IS-GOOD-EVOLUTION-STATE
Beginning proof of MEMBER-IS-GOOD-EVOLUTION-STATE ...
(IMPLIES (AND (IS-GOOD-EVOLUTION SEQUENCE) (SEQ!IS-MEMBER STATE SEQUENCE))
 (IS-GOOD-EVOLUTION-STATE STATE))
NTH-IS-MEMBER
Beginning proof of NTH-IS-MEMBER ...
(IMPLIES
 (AND (SEQ!IS-SEQUENCE SEQUENCE) (>= N 1) (<= N (SEQ!LENGTH SEQUENCE)))
 (SEQ!IS-MEMBER (SEQ!NTH SEQUENCE N) SEQUENCE))
TIME-OF-EVENT-STRICTLY-INCREASES-2
Beginning proof of TIME-OF-EVENT-STRICTLY-INCREASES-2 ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N1 1) (>= N2 (+ N1 1))
  (<= (+ N2 1) (SEQ!LENGTH SEQUENCE)))
 (>= (TIME-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N1))))
  (+ (TIME-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N2)))) 1)))
LAST-IS-INITIAL
Beginning proof of LAST-IS-INITIAL ...
(IMPLIES (IS-GOOD-EVOLUTION SEQUENCE)
 (IS-INITIAL-EVOLUTION-STATE (SEQ!NTH SEQUENCE (SEQ!LENGTH SEQUENCE))))
SUBSEQUENT-STATE-HAS-HISTORY
Beginning proof of SUBSEQUENT-STATE-HAS-HISTORY ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1)
  (<= (+ N 1) (SEQ!LENGTH SEQUENCE)))
 (>= (SEQ!LENGTH (HISTORY (SEQ!NTH SEQUENCE N))) 1))
INITIAL-STATE-HAS-NO-HISTORY
Beginning proof of INITIAL-STATE-HAS-NO-HISTORY ...
(IMPLIES (IS-GOOD-EVOLUTION SEQUENCE)
 (= (HISTORY (SEQ!NTH SEQUENCE (SEQ!LENGTH SEQUENCE))) (SEQ!EMPTY)))
NO-DUPLICATES-IN-GOOD-EVOLUTION
Beginning proof of NO-DUPLICATES-IN-GOOD-EVOLUTION ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N1 1) (>= N2 1)
  (<= N1 (SEQ!LENGTH SEQUENCE)) (<= N2 (SEQ!LENGTH SEQUENCE))
  (= (SEQ!NTH SEQUENCE N1) (SEQ!NTH SEQUENCE N2)))
 (= N1 N2))
HEAD-OF-GOOD-EVOLUTION-NOT-IN-TAIL
Beginning proof of HEAD-OF-GOOD-EVOLUTION-NOT-IN-TAIL ...
(IMPLIES (IS-GOOD-EVOLUTION SEQUENCE)
 (NOT (SEQ!IS-MEMBER (SEQ!HEAD SEQUENCE) (SEQ!TAIL SEQUENCE))))
NON-LAST-IS-NON-INITIAL
Beginning proof of NON-LAST-IS-NON-INITIAL ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1)
  (<= N (- (SEQ!LENGTH SEQUENCE) 1)))
 (NOT (IS-INITIAL-EVOLUTION-STATE (SEQ!NTH SEQUENCE N))))
NON-INITIAL-IS-NON-LAST
Beginning proof of NON-INITIAL-IS-NON-LAST ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (SEQ!LENGTH SEQUENCE))
  (NOT (IS-INITIAL-EVOLUTION-STATE (SEQ!NTH SEQUENCE N))))
 (<= N (- (SEQ!LENGTH SEQUENCE) 1)))
NON-INITIAL-STATE-IS-RESULT-OF-STEP
Beginning proof of NON-INITIAL-STATE-IS-RESULT-OF-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1)
  (<= N (- (SEQ!LENGTH SEQUENCE) 1)))
 (GOOD-STEP (SEQ!NTH SEQUENCE (+ N 1)) (SEQ!NTH SEQUENCE N)))
SEND-EVENT-THEOREM
Beginning proof of SEND-EVENT-THEOREM ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (- (SEQ!LENGTH SEQUENCE) 1))
  (IN (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))) (SEND-EVENTS)))
 (AND
  (KNOWN-BY-PRINCIPAL
   (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (PRINCIPAL1-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (SEQ!NTH SEQUENCE (+ N 1)))
  (FORGEABLE (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (SEQ!NTH SEQUENCE N))))
RECEIVE-EVENT-THEOREM
Beginning proof of RECEIVE-EVENT-THEOREM ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (- (SEQ!LENGTH SEQUENCE) 1))
  (IN (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))) (RECEIVE-EVENTS)))
 (AND
  (FORGEABLE (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (SEQ!NTH SEQUENCE (+ N 1)))
  (KNOWN-BY-PRINCIPAL
   (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (PRINCIPAL1-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (SEQ!NTH SEQUENCE N))))
OUT-OF-BAND-EVENT-THEOREM
Beginning proof of OUT-OF-BAND-EVENT-THEOREM ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (- (SEQ!LENGTH SEQUENCE) 1))
  (IN (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))) (OUT-OF-BAND-EVENTS)))
 (AND
  (KNOWN-BY-PRINCIPAL
   (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (PRINCIPAL1-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (SEQ!NTH SEQUENCE (+ N 1)))
  (KNOWN-BY-PRINCIPAL
   (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (PRINCIPAL2-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (SEQ!NTH SEQUENCE N))))
GENERATE-EVENT-THEOREM
Beginning proof of GENERATE-EVENT-THEOREM ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (- (SEQ!LENGTH SEQUENCE) 1))
  (IN (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))) (GENERATE-EVENTS)))
 (AND
  (MS!IS-FRESH (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (ALL-MESSAGES-IN-STATE (SEQ!NTH SEQUENCE (+ N 1))))
  (KNOWN-BY-PRINCIPAL
   (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (PRINCIPAL1-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (SEQ!NTH SEQUENCE N))))
CONSTRUCT-EVENT-THEOREM
Beginning proof of CONSTRUCT-EVENT-THEOREM ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (- (SEQ!LENGTH SEQUENCE) 1))
  (IN (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))) (CONSTRUCT-EVENTS)))
 (KNOWN-BY-PRINCIPAL
  (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
  (PRINCIPAL1-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
  (SEQ!NTH SEQUENCE (+ N 1))))
INTRUDER-EVENT-THEOREM
Beginning proof of INTRUDER-EVENT-THEOREM ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (- (SEQ!LENGTH SEQUENCE) 1))
  (IN (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))) (INTRUDER-EVENTS)))
 (AND
  (MS!IS-FRESH (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (ALL-MESSAGES-IN-STATE (SEQ!NTH SEQUENCE (+ N 1))))
  (FORGEABLE (MESSAGE-OF-EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N))))
   (SEQ!NTH SEQUENCE N))))
EFFECTIVE-GENERATE-STEP
Beginning proof of EFFECTIVE-GENERATE-STEP ...
(IMPLIES
 (AND (= S1 (GENERATE-STEP LABEL TIME MESSAGE PRINCIPAL S0)) (NOT (= S0 S1)))
 (AND (IS-GOOD-STATE S0) (TIME-CONSTRAINT TIME S0) (>= LABEL 0)
  (IN MESSAGE (MS!ATOMIC-MESSAGES))
  (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE S0))
  (IN PRINCIPAL (MS!PRINCIPALS))))
FORGEABLE-PRESERVED-BY-GENERATE-STEP
Beginning proof of FORGEABLE-PRESERVED-BY-GENERATE-STEP ...
(= (FORGEABLE M1 (GENERATE-STEP LABEL TIME M2 PRINCIPAL STATE))
 (FORGEABLE M1 STATE))
KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-GENERATE-STEP
Beginning proof of KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-GENERATE-STEP ...
(IMPLIES
 (AND (IN PRINCIPAL1 (MS!PRINCIPALS))
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 STATE))
 (=
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1
   (GENERATE-STEP LABEL TIME M2 PRINCIPAL2 STATE))
  (TRUE)))
KNOWN-BY-PRINCIPAL-GENERATE-STEP-ATOMIC-CASE
Beginning proof of KNOWN-BY-PRINCIPAL-GENERATE-STEP-ATOMIC-CASE ...
(IMPLIES (AND (IN PRINCIPAL1 (MS!PRINCIPALS)) (IN M1 (MS!ATOMIC-MESSAGES)))
 (=
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1
   (GENERATE-STEP LABEL TIME M2 PRINCIPAL2 STATE))
  (OR (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 STATE)
   (AND (= M1 M2) (= PRINCIPAL1 PRINCIPAL2)
    (NOT (= (GENERATE-STEP LABEL TIME M2 PRINCIPAL2 STATE) STATE))))))
EFFECTIVE-CONSTRUCT-STEP
Beginning proof of EFFECTIVE-CONSTRUCT-STEP ...
(IMPLIES
 (AND (= S1 (CONSTRUCT-STEP LABEL TIME MESSAGE PRINCIPAL S0)) (NOT (= S0 S1)))
 (AND (IS-GOOD-STATE S0) (TIME-CONSTRAINT TIME S0) (>= LABEL 0)
  (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL S0) (IN PRINCIPAL (MS!PRINCIPALS))))
FORGEABLE-PRESERVED-BY-CONSTRUCT-STEP
Beginning proof of FORGEABLE-PRESERVED-BY-CONSTRUCT-STEP ...
(= (FORGEABLE M1 (CONSTRUCT-STEP LABEL TIME M2 PRINCIPAL STATE))
 (FORGEABLE M1 STATE))
KNOWN-BY-PRINCIPAL-PRESERVED-BY-CONSTRUCT-STEP
Beginning proof of KNOWN-BY-PRINCIPAL-PRESERVED-BY-CONSTRUCT-STEP ...
(=
 (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1
  (CONSTRUCT-STEP LABEL TIME M2 PRINCIPAL2 STATE))
 (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 STATE))
EFFECTIVE-SEND-STEP
Beginning proof of EFFECTIVE-SEND-STEP ...
(IMPLIES
 (AND (= S1 (SEND-STEP LABEL TIME MESSAGE PRINCIPAL S0)) (NOT (= S0 S1)))
 (AND (IS-GOOD-STATE S0) (TIME-CONSTRAINT TIME S0) (>= LABEL 0)
  (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL S0) (IN PRINCIPAL (MS!PRINCIPALS))))
FORGEABLE-MONOTONIC-OVER-SEND-STEP
Beginning proof of FORGEABLE-MONOTONIC-OVER-SEND-STEP ...
(IMPLIES (FORGEABLE M1 STATE)
 (= (FORGEABLE M1 (SEND-STEP LABEL TIME M2 PRINCIPAL STATE)) (TRUE)))
KNOWN-BY-PRINCIPAL-PRESERVED-BY-SEND-STEP
Beginning proof of KNOWN-BY-PRINCIPAL-PRESERVED-BY-SEND-STEP ...
(=
 (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 (SEND-STEP LABEL TIME M2 PRINCIPAL2 STATE))
 (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 STATE))
EFFECTIVE-RECEIVE-STEP
Beginning proof of EFFECTIVE-RECEIVE-STEP ...
(IMPLIES
 (AND (= S1 (RECEIVE-STEP LABEL TIME MESSAGE PRINCIPAL S0)) (NOT (= S0 S1)))
 (AND (IS-GOOD-STATE S0) (TIME-CONSTRAINT TIME S0) (>= LABEL 0)
  (FORGEABLE MESSAGE S0) (IN PRINCIPAL (MS!PRINCIPALS))))
FORGEABLE-PRESERVED-BY-RECEIVE-STEP
Beginning proof of FORGEABLE-PRESERVED-BY-RECEIVE-STEP ...
(= (FORGEABLE M1 (RECEIVE-STEP LABEL TIME M2 PRINCIPAL STATE))
 (FORGEABLE M1 STATE))
KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-RECEIVE-STEP
Beginning proof of KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-RECEIVE-STEP ...
(IMPLIES
 (AND (IN PRINCIPAL1 (MS!PRINCIPALS))
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 STATE))
 (=
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1
   (RECEIVE-STEP LABEL TIME M2 PRINCIPAL2 STATE))
  (TRUE)))
KNOWN-BY-PRINCIPAL-RECEIVE-STEP-NON-RECEIVER-CASE
Beginning proof of KNOWN-BY-PRINCIPAL-RECEIVE-STEP-NON-RECEIVER-CASE ...
(IMPLIES (AND (IN PRINCIPAL1 (MS!PRINCIPALS)) (NOT (= PRINCIPAL1 PRINCIPAL2)))
 (=
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1
   (RECEIVE-STEP LABEL TIME M2 PRINCIPAL2 STATE))
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 STATE)))
EFFECTIVE-OUT-OF-BAND-STEP
Beginning proof of EFFECTIVE-OUT-OF-BAND-STEP ...
(IMPLIES
 (AND (= S1 (OUT-OF-BAND-STEP LABEL TIME MESSAGE SENDER RECEIVER S0))
  (NOT (= S0 S1)))
 (AND (IS-GOOD-STATE S0) (TIME-CONSTRAINT TIME S0) (>= LABEL 0)
  (IN SENDER (MS!PRINCIPALS)) (IN RECEIVER (MS!PRINCIPALS))
  (KNOWN-BY-PRINCIPAL MESSAGE SENDER S0)))
FORGEABLE-PRESERVED-BY-OUT-OF-BAND-STEP
Beginning proof of FORGEABLE-PRESERVED-BY-OUT-OF-BAND-STEP ...
(= (FORGEABLE M1 (OUT-OF-BAND-STEP LABEL TIME M2 SENDER RECEIVER STATE))
 (FORGEABLE M1 STATE))
KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-OUT-OF-BAND-STEP
Beginning proof of KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-OUT-OF-BAND-STEP ...
(IMPLIES
 (AND (IN PRINCIPAL1 (MS!PRINCIPALS))
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 STATE))
 (=
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1
   (OUT-OF-BAND-STEP LABEL TIME M2 SENDER RECEIVER STATE))
  (TRUE)))
KNOWN-BY-PRINCIPAL-OUT-OF-BAND-STEP-NON-RECEIVER-CASE
Beginning proof of KNOWN-BY-PRINCIPAL-OUT-OF-BAND-STEP-NON-RECEIVER-CASE ...
(IMPLIES (AND (IN PRINCIPAL1 (MS!PRINCIPALS)) (NOT (= PRINCIPAL1 RECEIVER)))
 (=
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1
   (OUT-OF-BAND-STEP LABEL TIME M2 SENDER RECEIVER STATE))
  (KNOWN-BY-PRINCIPAL M1 PRINCIPAL1 STATE)))
EFFECTIVE-INTRUDER-STEP
Beginning proof of EFFECTIVE-INTRUDER-STEP ...
(IMPLIES (AND (= S1 (INTRUDER-STEP LABEL TIME MESSAGE S0)) (NOT (= S0 S1)))
 (AND (IS-GOOD-STATE S0) (TIME-CONSTRAINT TIME S0) (>= LABEL 0)
  (IN MESSAGE (MS!ATOMIC-MESSAGES))
  (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE S0))))
FORGEABLE-MONOTONIC-OVER-INTRUDER-STEP
Beginning proof of FORGEABLE-MONOTONIC-OVER-INTRUDER-STEP ...
(IMPLIES (FORGEABLE M1 STATE)
 (= (FORGEABLE M1 (INTRUDER-STEP LABEL TIME M2 STATE)) (TRUE)))
KNOWN-BY-PRINCIPAL-PRESERVED-BY-INTRUDER-STEP
Beginning proof of KNOWN-BY-PRINCIPAL-PRESERVED-BY-INTRUDER-STEP ...
(= (KNOWN-BY-PRINCIPAL M1 PRINCIPAL (INTRUDER-STEP LABEL TIME M2 STATE))
 (KNOWN-BY-PRINCIPAL M1 PRINCIPAL STATE))
SETADD-MEMBER
Beginning proof of SETADD-MEMBER ...
(IMPLIES (IN X S) (= (SETADD X S) S))
KNOWN-BY-PRINCIPAL-IMPLIES-NOT-FRESH
Beginning proof of KNOWN-BY-PRINCIPAL-IMPLIES-NOT-FRESH ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN MESSAGE (MS!ATOMIC-MESSAGES))
  (IN PRINCIPAL (MS!PRINCIPALS)) (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL STATE))
 (NOT (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE STATE))))
FORGEABLE-IMPLIES-NOT-FRESH
Beginning proof of FORGEABLE-IMPLIES-NOT-FRESH ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN MESSAGE (MS!ATOMIC-MESSAGES))
  (FORGEABLE MESSAGE STATE))
 (NOT (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE STATE))))
SEND-EVENT-EQUALITY
Beginning proof of SEND-EVENT-EQUALITY ...
(= (= (MAKE-SEND-EVENT L1 T1 M1 P1) (MAKE-SEND-EVENT L2 T2 M2 P2))
 (AND (= L1 L2) (= T1 T2) (= M1 M2) (= P1 P2)))
RECEIVE-EVENT-EQUALITY
Beginning proof of RECEIVE-EVENT-EQUALITY ...
(= (= (MAKE-RECEIVE-EVENT L1 T1 M1 P1) (MAKE-RECEIVE-EVENT L2 T2 M2 P2))
 (AND (= L1 L2) (= T1 T2) (= M1 M2) (= P1 P2)))
OUT-OF-BAND-EVENT-EQUALITY
Beginning proof of OUT-OF-BAND-EVENT-EQUALITY ...
(=
 (= (MAKE-OUT-OF-BAND-EVENT L1 T1 M1 S1 R1)
  (MAKE-OUT-OF-BAND-EVENT L2 T2 M2 S2 R2))
 (AND (= L1 L2) (= T1 T2) (= M1 M2) (= S1 S2) (= R1 R2)))
GENERATE-EVENT-EQUALITY
Beginning proof of GENERATE-EVENT-EQUALITY ...
(= (= (MAKE-GENERATE-EVENT L1 T1 M1 P1) (MAKE-GENERATE-EVENT L2 T2 M2 P2))
 (AND (= L1 L2) (= T1 T2) (= M1 M2) (= P1 P2)))
CONSTRUCT-EVENT-EQUALITY
Beginning proof of CONSTRUCT-EVENT-EQUALITY ...
(= (= (MAKE-CONSTRUCT-EVENT L1 T1 M1 P1) (MAKE-CONSTRUCT-EVENT L2 T2 M2 P2))
 (AND (= L1 L2) (= T1 T2) (= M1 M2) (= P1 P2)))
INTRUDER-EVENT-EQUALITY
Beginning proof of INTRUDER-EVENT-EQUALITY ...
(= (= (MAKE-INTRUDER-EVENT L1 T1 M1) (MAKE-INTRUDER-EVENT L2 T2 M2))
 (AND (= L1 L2) (= T1 T2) (= M1 M2)))
3COMBINE-EQUALITY
Beginning proof of 3COMBINE-EQUALITY ...
(IMPLIES
 (AND (IN 1M1 (MS!MESSAGES)) (IN 1M2 (MS!MESSAGES)) (IN 1M3 (MS!MESSAGES))
  (IN 2M1 (MS!MESSAGES)) (IN 2M2 (MS!MESSAGES)) (IN 2M3 (MS!MESSAGES)))
 (= (= (3COMBINE 1M1 1M2 1M3) (3COMBINE 2M1 2M2 2M3))
  (AND (= 1M1 2M1) (= 1M2 2M2) (= 1M3 2M3))))
4COMBINE-EQUALITY
Beginning proof of 4COMBINE-EQUALITY ...
(IMPLIES
 (AND (IN 1M1 (MS!MESSAGES)) (IN 1M2 (MS!MESSAGES)) (IN 1M3 (MS!MESSAGES))
  (IN 1M4 (MS!MESSAGES)) (IN 2M1 (MS!MESSAGES)) (IN 2M2 (MS!MESSAGES))
  (IN 2M3 (MS!MESSAGES)) (IN 2M4 (MS!MESSAGES)))
 (= (= (4COMBINE 1M1 1M2 1M3 1M4) (4COMBINE 2M1 2M2 2M3 2M4))
  (AND (= 1M1 2M1) (= 1M2 2M2) (= 1M3 2M3) (= 1M4 2M4))))
5COMBINE-EQUALITY
Beginning proof of 5COMBINE-EQUALITY ...
(IMPLIES
 (AND (IN 1M1 (MS!MESSAGES)) (IN 1M2 (MS!MESSAGES)) (IN 1M3 (MS!MESSAGES))
  (IN 1M4 (MS!MESSAGES)) (IN 1M5 (MS!MESSAGES)) (IN 2M1 (MS!MESSAGES))
  (IN 2M2 (MS!MESSAGES)) (IN 2M3 (MS!MESSAGES)) (IN 2M4 (MS!MESSAGES))
  (IN 2M5 (MS!MESSAGES)))
 (= (= (5COMBINE 1M1 1M2 1M3 1M4 1M5) (5COMBINE 2M1 2M2 2M3 2M4 2M5))
  (AND (= 1M1 2M1) (= 1M2 2M2) (= 1M3 2M3) (= 1M4 2M4) (= 1M5 2M5))))
6COMBINE-EQUALITY
Beginning proof of 6COMBINE-EQUALITY ...
(IMPLIES
 (AND (IN 1M1 (MS!MESSAGES)) (IN 1M2 (MS!MESSAGES)) (IN 1M3 (MS!MESSAGES))
  (IN 1M4 (MS!MESSAGES)) (IN 1M5 (MS!MESSAGES)) (IN 1M6 (MS!MESSAGES))
  (IN 2M1 (MS!MESSAGES)) (IN 2M2 (MS!MESSAGES)) (IN 2M3 (MS!MESSAGES))
  (IN 2M4 (MS!MESSAGES)) (IN 2M5 (MS!MESSAGES)) (IN 2M6 (MS!MESSAGES)))
 (= (= (6COMBINE 1M1 1M2 1M3 1M4 1M5 1M6) (6COMBINE 2M1 2M2 2M3 2M4 2M5 2M6))
  (AND (= 1M1 2M1) (= 1M2 2M2) (= 1M3 2M3) (= 1M4 2M4) (= 1M5 2M5)
   (= 1M6 2M6))))
FORGEABLE-ADD-TO-SEEN-MESSAGES-AND-HISTORY
Beginning proof of FORGEABLE-ADD-TO-SEEN-MESSAGES-AND-HISTORY ...
(IMPLIES (IS-GOOD-STATE STATE)
 (=
  (FORGEABLE M1
   (ADD-TO-STATE-SEEN-MESSAGES M2 (ADD-TO-STATE-HISTORY EVENT STATE)))
  (FORGEABLE M1 (ADD-TO-STATE-SEEN-MESSAGES M2 STATE))))
KNOWN-BY-PRINCIPAL-ADD-TO-SEEN-MESSAGES-AND-HISTORY
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-TO-SEEN-MESSAGES-AND-HISTORY ...
(IMPLIES (IS-GOOD-STATE STATE)
 (=
  (KNOWN-BY-PRINCIPAL M1 P
   (ADD-TO-STATE-SEEN-MESSAGES M2 (ADD-TO-STATE-HISTORY EVENT STATE)))
  (KNOWN-BY-PRINCIPAL M1 P (ADD-TO-STATE-SEEN-MESSAGES M2 STATE))))
STORAGE-OF-SUBSET-ALL-STORAGE
Beginning proof of STORAGE-OF-SUBSET-ALL-STORAGE ...
(IMPLIES (AND (IN PRINCIPAL (MS!PRINCIPALS)) (IS-GOOD-STATE STATE))
 (= (SUBSET (STORAGE-OF PRINCIPAL STATE) (ALL-STORAGE (STORES STATE))) (TRUE)))
FORGEABLE-ADD-TO-STATE-HISTORY
Beginning proof of FORGEABLE-ADD-TO-STATE-HISTORY ...
(= (FORGEABLE MESSAGE (ADD-TO-STATE-HISTORY EVENT STATE))
 (FORGEABLE MESSAGE STATE))
KNOWN-BY-PRINCIPAL-ADD-TO-STATE-HISTORY
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-TO-STATE-HISTORY ...
(= (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL (ADD-TO-STATE-HISTORY EVENT STATE))
 (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL STATE))
KNOWN-BY-PRINCIPAL-ADD-TO-STATE-SEEN-MESSAGES
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-TO-STATE-SEEN-MESSAGES ...
(= (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-SEEN-MESSAGES M1 S))
 (KNOWN-BY-PRINCIPAL M P S))
FORGEABLE-ADD-COMBINE
Beginning proof of FORGEABLE-ADD-COMBINE ...
(IMPLIES
 (AND (IS-GOOD-STATE S) (IN M1 (MS!MESSAGES)) (IN M2 (MS!MESSAGES))
  (SUBSET MS (MS!MESSAGES)))
 (=
  (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES (SETADD (MS!COMBINE M1 M2) MS) S))
  (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES (SETADD M1 (SETADD M2 MS)) S))))
FORGEABLE-ADD-PUBLIC-KEY
Beginning proof of FORGEABLE-ADD-PUBLIC-KEY ...
(IMPLIES (AND (IN P (MS!PUBLIC-KEYS)) (IS-GOOD-STATE S))
 (= (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES (SETADD P MS) S))
  (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES MS S))))
FORGEABLE-ADD-TEXT-MESSAGE
Beginning proof of FORGEABLE-ADD-TEXT-MESSAGE ...
(IMPLIES (AND (IN T (MS!TEXT-MESSAGES)) (IS-GOOD-STATE S))
 (= (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES (SETADD T MS) S))
  (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES MS S))))
FORGEABLE-ADD-PRINCIPAL
Beginning proof of FORGEABLE-ADD-PRINCIPAL ...
(IMPLIES (AND (IN P (MS!PRINCIPALS)) (IS-GOOD-STATE S))
 (= (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES (SETADD P MS) S))
  (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES MS S))))
FORGEABLE-ADD-SIGN
Beginning proof of FORGEABLE-ADD-SIGN ...
(IMPLIES
 (AND (IN K (MS!KEYS)) (IN M1 (MS!MESSAGES)) (SUBSET MS (MS!MESSAGES))
  (IS-GOOD-STATE S))
 (= (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES (SETADD (SIGN M1 K) MS) S))
  (FORGEABLE M
   (ADD-TO-STATE-SEEN-MESSAGES
    (SETADD M1 (SETADD (MS!ENCRYPT (MS!HASH M1) K) MS)) S))))
FORGEABLE-COMBINE
Beginning proof of FORGEABLE-COMBINE ...
(= (FORGEABLE (MS!COMBINE M1 M2) S) (AND (FORGEABLE M1 S) (FORGEABLE M2 S)))
FORGEABLE-ADD-NONCE
Beginning proof of FORGEABLE-ADD-NONCE ...
(IMPLIES (AND (IN N (MS!NONCES)) (IN M (MS!ATOMIC-MESSAGES)))
 (= (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES (SETADD N MS) S))
  (OR (= M N) (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES MS S)))))
FORGEABLE-ADD-HASH
Beginning proof of FORGEABLE-ADD-HASH ...
(IMPLIES (AND (IN M (MS!ATOMIC-MESSAGES)) (IN M1 (MS!MESSAGES)))
 (= (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES (SETADD (MS!HASH M1) MS) S))
  (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES MS S))))
FORGEABLE-ADD-ENCRYPT-HASH
Beginning proof of FORGEABLE-ADD-ENCRYPT-HASH ...
(IMPLIES
 (AND (IN M (MS!ATOMIC-MESSAGES)) (IN M1 (MS!MESSAGES)) (IN K (MS!KEYS)))
 (=
  (FORGEABLE M
   (ADD-TO-STATE-SEEN-MESSAGES (SETADD (MS!ENCRYPT (MS!HASH M1) K) MS) S))
  (FORGEABLE M (ADD-TO-STATE-SEEN-MESSAGES MS S))))
FORGEABLE-ADD-TO-STATE-STORAGE
Beginning proof of FORGEABLE-ADD-TO-STATE-STORAGE ...
(= (FORGEABLE M (ADD-TO-STATE-STORAGE P M1 S)) (FORGEABLE M S))
KNOWN-BY-PRINCIPAL-ADD-COMBINE
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-COMBINE ...
(IMPLIES
 (AND (IS-GOOD-STATE S) (IN P (MS!PRINCIPALS)) (IN M1 (MS!MESSAGES))
  (IN M2 (MS!MESSAGES)) (SUBSET MS (MS!MESSAGES)))
 (=
  (KNOWN-BY-PRINCIPAL M P
   (ADD-TO-STATE-STORAGE P (SETADD (MS!COMBINE M1 M2) MS) S))
  (KNOWN-BY-PRINCIPAL M P
   (ADD-TO-STATE-STORAGE P (SETADD M1 (SETADD M2 MS)) S))))
KNOWN-BY-PRINCIPAL-ADD-PUBLIC-KEY
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-PUBLIC-KEY ...
(IMPLIES
 (AND (IN P (MS!PRINCIPALS)) (IN PK (MS!PUBLIC-KEYS)) (IS-GOOD-STATE S))
 (= (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD PK MS) S))
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P MS S))))
KNOWN-BY-PRINCIPAL-ADD-TEXT-MESSAGE
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-TEXT-MESSAGE ...
(IMPLIES
 (AND (IN P (MS!PRINCIPALS)) (IN T (MS!TEXT-MESSAGES)) (IS-GOOD-STATE S))
 (= (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD T MS) S))
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P MS S))))
KNOWN-BY-PRINCIPAL-ADD-PRINCIPAL
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-PRINCIPAL ...
(IMPLIES
 (AND (IN P (MS!PRINCIPALS)) (IN P1 (MS!PRINCIPALS)) (IS-GOOD-STATE S))
 (= (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD P1 MS) S))
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P MS S))))
KNOWN-BY-PRINCIPAL-ADD-SIGN
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-SIGN ...
(IMPLIES
 (AND (IN P (MS!PRINCIPALS)) (IN K (MS!KEYS)) (IN M1 (MS!MESSAGES))
  (SUBSET MS (MS!MESSAGES)) (IS-GOOD-STATE S))
 (=
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD (SIGN M1 K) MS) S))
  (KNOWN-BY-PRINCIPAL M P
   (ADD-TO-STATE-STORAGE P (SETADD M1 (SETADD (MS!ENCRYPT (MS!HASH M1) K) MS))
    S))))
KNOWN-BY-PRINCIPAL-COMBINE
Beginning proof of KNOWN-BY-PRINCIPAL-COMBINE ...
(IMPLIES (IN P (MS!PRINCIPALS))
 (= (KNOWN-BY-PRINCIPAL (MS!COMBINE M1 M2) P S)
  (AND (KNOWN-BY-PRINCIPAL M1 P S) (KNOWN-BY-PRINCIPAL M2 P S))))
KNOWN-BY-PRINCIPAL-ADD-NONCE
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-NONCE ...
(IMPLIES
 (AND (IS-GOOD-STATE S) (IN P (MS!PRINCIPALS)) (IN N (MS!NONCES))
  (IN M (MS!ATOMIC-MESSAGES)))
 (= (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD N MS) S))
  (OR (= M N) (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P MS S)))))
KNOWN-BY-PRINCIPAL-ADD-HASH
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-HASH ...
(IMPLIES
 (AND (IS-GOOD-STATE S) (IN M (MS!ATOMIC-MESSAGES)) (IN P (MS!PRINCIPALS))
  (IN M1 (MS!MESSAGES)))
 (=
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD (MS!HASH M1) MS) S))
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P MS S))))
KNOWN-BY-PRINCIPAL-ADD-ENCRYPT-HASH
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-ENCRYPT-HASH ...
(IMPLIES
 (AND (IS-GOOD-STATE S) (IN M (MS!ATOMIC-MESSAGES)) (IN P (MS!PRINCIPALS))
  (IN M1 (MS!MESSAGES)) (IN K (MS!KEYS)))
 (=
  (KNOWN-BY-PRINCIPAL M P
   (ADD-TO-STATE-STORAGE P (SETADD (MS!ENCRYPT (MS!HASH M1) K) MS) S))
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P MS S))))
PERMUTE-ADD-TO-STORAGE-ADD-TO-HISTORY
Beginning proof of PERMUTE-ADD-TO-STORAGE-ADD-TO-HISTORY ...
(= (ADD-TO-STATE-STORAGE P M (ADD-TO-STATE-HISTORY E STATE))
 (ADD-TO-STATE-HISTORY E (ADD-TO-STATE-STORAGE P M STATE)))
KNOWN-BY-PRINCIPAL-ADD-TO-STORAGE-AND-HISTORY
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-TO-STORAGE-AND-HISTORY ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN P2 (MS!PRINCIPALS)) (SUBSET M2 (MS!MESSAGES)))
 (=
  (KNOWN-BY-PRINCIPAL M1 P1
   (ADD-TO-STATE-STORAGE P2 M2 (ADD-TO-STATE-HISTORY EVENT STATE)))
  (KNOWN-BY-PRINCIPAL M1 P1 (ADD-TO-STATE-STORAGE P2 M2 STATE))))
NEWLY-KNOWN-BY-GENERATION-NOT-FORGEABLE
Beginning proof of NEWLY-KNOWN-BY-GENERATION-NOT-FORGEABLE ...
(IMPLIES
 (AND (NOT (KNOWN-BY-PRINCIPAL M1 P1 STATE)) (IN M1 (MS!ATOMIC-MESSAGES))
  (IN P1 (MS!PRINCIPALS))
  (KNOWN-BY-PRINCIPAL M1 P1 (GENERATE-STEP LABEL TIME M2 P2 STATE)))
 (AND (= M1 M2) (= P1 P2) (NOT (FORGEABLE M1 STATE))))
IS-GOOD-EVOLUTION-STATE-HAS-GOOD-EVOLUTION
Beginning proof of IS-GOOD-EVOLUTION-STATE-HAS-GOOD-EVOLUTION ...
(IMPLIES (IS-GOOD-EVOLUTION-STATE STATE)
 (SOME (SEQUENCE)
  (AND (IS-GOOD-EVOLUTION SEQUENCE) (= (SEQ!HEAD SEQUENCE) STATE))))
TIME-OF-EVENT-CONSTRAINT
Beginning proof of TIME-OF-EVENT-CONSTRAINT ...
(IMPLIES (AND (IS-GOOD-STATE STATE) (SEQ!IS-MEMBER EVENT (HISTORY STATE)))
 (>= (TIME-OF-EVENT (SEQ!HEAD (HISTORY STATE))) (TIME-OF-EVENT EVENT)))
FORGEABLE-MONOTONIC-OVER-STEP
Beginning proof of FORGEABLE-MONOTONIC-OVER-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (- (SEQ!LENGTH SEQUENCE) 1))
  (FORGEABLE MESSAGE (SEQ!NTH SEQUENCE (+ N 1))))
 (FORGEABLE MESSAGE (SEQ!NTH SEQUENCE N)))
KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-STEP
Beginning proof of KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1) (<= N (- (SEQ!LENGTH SEQUENCE) 1))
  (IN PRINCIPAL (MS!PRINCIPALS))
  (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL (SEQ!NTH SEQUENCE (+ N 1))))
 (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL (SEQ!NTH SEQUENCE N)))
NTH-HISTORY-HEAD-EVOLUTION
Beginning proof of NTH-HISTORY-HEAD-EVOLUTION ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1)
  (<= N (SEQ!LENGTH (HISTORY (SEQ!HEAD SEQUENCE)))))
 (= (SEQ!NTH (HISTORY (SEQ!HEAD SEQUENCE)) N)
  (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N)))))
SEND-EVENT-CONSEQUENCE
Beginning proof of SEND-EVENT-CONSEQUENCE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (SEND-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)))
 (AND
  (KNOWN-BY-PRINCIPAL (MESSAGE-OF-EVENT EVENT) (PRINCIPAL1-OF-EVENT EVENT)
   STATE)
  (FORGEABLE (MESSAGE-OF-EVENT EVENT) STATE)))
RECEIVE-EVENT-CONSEQUENCE
Beginning proof of RECEIVE-EVENT-CONSEQUENCE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (RECEIVE-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)))
 (AND
  (KNOWN-BY-PRINCIPAL (MESSAGE-OF-EVENT EVENT) (PRINCIPAL1-OF-EVENT EVENT)
   STATE)
  (FORGEABLE (MESSAGE-OF-EVENT EVENT) STATE)))
OUT-OF-BAND-EVENT-CONSEQUENCE
Beginning proof of OUT-OF-BAND-EVENT-CONSEQUENCE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (OUT-OF-BAND-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)))
 (AND
  (KNOWN-BY-PRINCIPAL (MESSAGE-OF-EVENT EVENT) (PRINCIPAL1-OF-EVENT EVENT)
   STATE)
  (KNOWN-BY-PRINCIPAL (MESSAGE-OF-EVENT EVENT) (PRINCIPAL2-OF-EVENT EVENT)
   STATE)))
GENERATE-EVENT-CONSEQUENCE
Beginning proof of GENERATE-EVENT-CONSEQUENCE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (GENERATE-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)))
 (KNOWN-BY-PRINCIPAL (MESSAGE-OF-EVENT EVENT) (PRINCIPAL1-OF-EVENT EVENT)
  STATE))
CONSTRUCT-EVENT-CONSEQUENCE
Beginning proof of CONSTRUCT-EVENT-CONSEQUENCE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (CONSTRUCT-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)))
 (KNOWN-BY-PRINCIPAL (MESSAGE-OF-EVENT EVENT) (PRINCIPAL1-OF-EVENT EVENT)
  STATE))
INTRUDER-EVENT-CONSEQUENCE
Beginning proof of INTRUDER-EVENT-CONSEQUENCE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (INTRUDER-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)))
 (FORGEABLE (MESSAGE-OF-EVENT EVENT) STATE))
SEND-EVENT-IS-FROM-SEND-STEP
Beginning proof of SEND-EVENT-IS-FROM-SEND-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (SEND-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)) (= (SEQ!HEAD (HISTORY STATE)) EVENT))
 (SOME (STATE1 LABEL TIME MESSAGE PRINCIPAL)
  (AND (IS-GOOD-EVOLUTION-STATE STATE1)
   (= STATE (SEND-STEP LABEL TIME MESSAGE PRINCIPAL STATE1))
   (NOT (= STATE STATE1)))))
RECEIVE-EVENT-IS-FROM-RECEIVE-STEP
Beginning proof of RECEIVE-EVENT-IS-FROM-RECEIVE-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (RECEIVE-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)) (= (SEQ!HEAD (HISTORY STATE)) EVENT))
 (SOME (STATE1 LABEL TIME MESSAGE PRINCIPAL)
  (AND (IS-GOOD-EVOLUTION-STATE STATE1)
   (= STATE (RECEIVE-STEP LABEL TIME MESSAGE PRINCIPAL STATE1))
   (NOT (= STATE STATE1)))))
OUT-OF-BAND-EVENT-IS-FROM-OUT-OF-BAND-STEP
Beginning proof of OUT-OF-BAND-EVENT-IS-FROM-OUT-OF-BAND-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (OUT-OF-BAND-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)) (= (SEQ!HEAD (HISTORY STATE)) EVENT))
 (SOME (STATE1 LABEL TIME MESSAGE SENDER RECEIVER)
  (AND (IS-GOOD-EVOLUTION-STATE STATE1)
   (= STATE (OUT-OF-BAND-STEP LABEL TIME MESSAGE SENDER RECEIVER STATE1))
   (NOT (= STATE STATE1)))))
GENERATE-EVENT-IS-FROM-GENERATE-STEP
Beginning proof of GENERATE-EVENT-IS-FROM-GENERATE-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (GENERATE-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)) (= (SEQ!HEAD (HISTORY STATE)) EVENT))
 (SOME (STATE1 LABEL TIME MESSAGE PRINCIPAL)
  (AND (IS-GOOD-EVOLUTION-STATE STATE1)
   (= STATE (GENERATE-STEP LABEL TIME MESSAGE PRINCIPAL STATE1))
   (NOT (= STATE STATE1)))))
CONSTRUCT-EVENT-IS-FROM-CONSTRUCT-STEP
Beginning proof of CONSTRUCT-EVENT-IS-FROM-CONSTRUCT-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (CONSTRUCT-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)) (= (SEQ!HEAD (HISTORY STATE)) EVENT))
 (SOME (STATE1 LABEL TIME MESSAGE PRINCIPAL)
  (AND (IS-GOOD-EVOLUTION-STATE STATE1)
   (= STATE (CONSTRUCT-STEP LABEL TIME MESSAGE PRINCIPAL STATE1))
   (NOT (= STATE STATE1)))))
INTRUDER-EVENT-IS-FROM-INTRUDER-STEP
Beginning proof of INTRUDER-EVENT-IS-FROM-INTRUDER-STEP ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE STATE) (IN EVENT (INTRUDER-EVENTS))
  (SEQ!IS-MEMBER EVENT (HISTORY STATE)) (= (SEQ!HEAD (HISTORY STATE)) EVENT))
 (SOME (STATE1 LABEL TIME MESSAGE)
  (AND (IS-GOOD-EVOLUTION-STATE STATE1)
   (= STATE (INTRUDER-STEP LABEL TIME MESSAGE STATE1))
   (NOT (= STATE STATE1)))))
KNOWN-BY-PRINCIPAL-ADD-ENCRYPT
Beginning proof of KNOWN-BY-PRINCIPAL-ADD-ENCRYPT ...
(IMPLIES
 (AND (IS-GOOD-STATE S) (IN M (MS!ATOMIC-MESSAGES)) (IN P (MS!PRINCIPALS))
  (IN M1 (MS!MESSAGES)) (IN K (MS!KEYS)))
 (=
  (KNOWN-BY-PRINCIPAL M P
   (ADD-TO-STATE-STORAGE P (SETADD (MS!ENCRYPT M1 K) MS) S))
  (IF (KNOWN-BY-PRINCIPAL (MS!INVERSE K) P (ADD-TO-STATE-STORAGE P MS S))
   (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD M1 MS) S))
   (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P MS S)))))
KNOWN-BY-PRINCIPAL-ATOMIC-ADD-SIGN
Beginning proof of KNOWN-BY-PRINCIPAL-ATOMIC-ADD-SIGN ...
(IMPLIES
 (AND (IN M (MS!ATOMIC-MESSAGES)) (IN P (MS!PRINCIPALS)) (IN K (MS!KEYS))
  (IN M1 (MS!MESSAGES)) (SUBSET MS (MS!MESSAGES)) (IS-GOOD-STATE S))
 (=
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD (SIGN M1 K) MS) S))
  (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P (SETADD M1 MS) S))))
KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-ADD-TO-STATE-STORAGE
Beginning proof of KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-ADD-TO-STATE-STORAGE ...
(IMPLIES
 (AND (IS-GOOD-STATE S) (IN P (MS!PRINCIPALS)) (SUBSET M1 (MS!MESSAGES))
  (KNOWN-BY-PRINCIPAL M P S))
 (= (KNOWN-BY-PRINCIPAL M P (ADD-TO-STATE-STORAGE P M1 S)) (TRUE)))
ADD-TO-STATE-STORAGE-COLLECTS
Beginning proof of ADD-TO-STATE-STORAGE-COLLECTS ...
(IMPLIES (IS-GOOD-STATE S)
 (= (ADD-TO-STATE-STORAGE P M1 (ADD-TO-STATE-STORAGE P M2 S))
  (ADD-TO-STATE-STORAGE P (UNION M1 M2) S)))
IN-HISTORY-IMPLIES-IS-HEAD-OF-HISTORY-OF-NTH
Beginning proof of IN-HISTORY-IMPLIES-IS-HEAD-OF-HISTORY-OF-NTH ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE)
  (SEQ!IS-MEMBER EVENT (HISTORY (SEQ!HEAD SEQUENCE))))
 (SOME (N)
  (AND (>= N 1) (< N (SEQ!LENGTH SEQUENCE))
   (= EVENT (SEQ!HEAD (HISTORY (SEQ!NTH SEQUENCE N)))))))
IN-HISTORY-IMPLIES-IS-HEAD-OF-HISTORY-OF-SUBSEQUENCE
Beginning proof of IN-HISTORY-IMPLIES-IS-HEAD-OF-HISTORY-OF-SUBSEQUENCE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE)
  (SEQ!IS-MEMBER EVENT (HISTORY (SEQ!HEAD SEQUENCE))))
 (SOME (S SUBSEQUENCE)
  (AND (SEQ!IS-SEQUENCE S) (IS-GOOD-EVOLUTION SUBSEQUENCE)
   (= SEQUENCE (SEQ!JOIN S SUBSEQUENCE))
   (= EVENT (SEQ!HEAD (HISTORY (SEQ!HEAD SUBSEQUENCE)))))))
FRESH-IMPLIES-NOT-KNOWN-BY-PRINCIPAL
Beginning proof of FRESH-IMPLIES-NOT-KNOWN-BY-PRINCIPAL ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN PRINCIPAL (MS!PRINCIPALS))
  (IN MESSAGE (MS!ATOMIC-MESSAGES))
  (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE STATE)))
 (NOT (KNOWN-BY-PRINCIPAL MESSAGE PRINCIPAL STATE)))
FRESH-IN-ALL-MESSAGES-IMPLIES-FRESH-IN-STORAGE-OF-PRINCIPAL
Beginning proof
of FRESH-IN-ALL-MESSAGES-IMPLIES-FRESH-IN-STORAGE-OF-PRINCIPAL ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN PRINCIPAL (MS!PRINCIPALS))
  (IN MESSAGE (MS!ATOMIC-MESSAGES))
  (MS!IS-FRESH MESSAGE (ALL-MESSAGES-IN-STATE STATE)))
 (MS!IS-FRESH MESSAGE (STORAGE-OF PRINCIPAL STATE)))
FRESH-OUTSIDE-PRINCIPAL
FRESH-OUTSIDE-PRINCIPAL-IMPLIES-NOT-FORGEABLE
Beginning proof of FRESH-OUTSIDE-PRINCIPAL-IMPLIES-NOT-FORGEABLE ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN PRINCIPAL (MS!PRINCIPALS))
  (IN MESSAGE (MS!ATOMIC-MESSAGES))
  (FRESH-OUTSIDE-PRINCIPAL MESSAGE PRINCIPAL STATE))
 (NOT (FORGEABLE MESSAGE STATE)))
KNOWN-BY-PRINCIPAL-MONOTONIC-JOIN
Beginning proof of KNOWN-BY-PRINCIPAL-MONOTONIC-JOIN ...
(IMPLIES
 (AND (IN P (MS!PRINCIPALS)) (IS-GOOD-EVOLUTION S1) (SEQ!IS-SEQUENCE S2)
  (IS-GOOD-EVOLUTION (SEQ!JOIN S2 S1)) (KNOWN-BY-PRINCIPAL M P (SEQ!HEAD S1)))
 (KNOWN-BY-PRINCIPAL M P (SEQ!HEAD (SEQ!JOIN S2 S1))))
FORGEABLE-MONOTONIC-JOIN
Beginning proof of FORGEABLE-MONOTONIC-JOIN ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION S1) (SEQ!IS-SEQUENCE S2)
  (IS-GOOD-EVOLUTION (SEQ!JOIN S2 S1)) (FORGEABLE M (SEQ!HEAD S1)))
 (FORGEABLE M (SEQ!HEAD (SEQ!JOIN S2 S1))))
FORGEABLE-MONOTONIC-OVER-GOOD-STEP
Beginning proof of FORGEABLE-MONOTONIC-OVER-GOOD-STEP ...
(IMPLIES (AND (GOOD-STEP S0 S1) (FORGEABLE M S0)) (FORGEABLE M S1))
KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-GOOD-STEP
Beginning proof of KNOWN-BY-PRINCIPAL-MONOTONIC-OVER-GOOD-STEP ...
(IMPLIES
 (AND (GOOD-STEP S0 S1) (IN P (MS!PRINCIPALS)) (KNOWN-BY-PRINCIPAL M P S0))
 (KNOWN-BY-PRINCIPAL M P S1))
IS-GENERATED
Warning RULE-LOOPS for IN-PARTS-SETADD:
 The rule IN-PARTS-SETADD loops upon itself.
IN-PARTS-SETADD
Beginning proof of IN-PARTS-SETADD ...
(IMPLIES (NOT (= S (NULLSET)))
 (= (IN M (MS!PARTS (SETADD M1 S)))
  (OR (IN M (MS!PARTS (SETADD M1 (NULLSET)))) (IN M (MS!PARTS S)))))
GOOD-EVOLUTION-STATE-HAS-GOOD-EVOLUTION
Beginning proof of GOOD-EVOLUTION-STATE-HAS-GOOD-EVOLUTION ...
(IMPLIES (IS-GOOD-EVOLUTION-STATE STATE)
 (SOME (S) (AND (IS-GOOD-EVOLUTION S) (= (SEQ!HEAD S) STATE))))
SEND-EVENTS-CONTAINING-ENCRYPT
EARLIEST-IN-SEQUENCE-WITH-PROPERTY
Beginning proof of EARLIEST-IN-SEQUENCE-WITH-PROPERTY ...
(IMPLIES
 (AND (SEQ!IS-SEQUENCE SEQUENCE)
  (SOME (N)
   (AND (>= N 1) (<= N (SEQ!LENGTH SEQUENCE)) (IN (SEQ!NTH SEQUENCE N) SET))))
 (SOME (N1)
  (AND (>= N1 1) (<= N1 (SEQ!LENGTH SEQUENCE)) (IN (SEQ!NTH SEQUENCE N1) SET)
   (NOT
    (SOME (N2)
     (AND (>= N2 (+ N1 1)) (<= N2 (SEQ!LENGTH SEQUENCE))
      (IN (SEQ!NTH SEQUENCE N2) SET)))))))
RECEIVE-EVENTS-CONTAINING-ENCRYPT
OUT-OF-BAND-EVENTS-CONTAINING-ENCRYPT
HEAD-IS-GOOD-EVOLUTION-STATE
Beginning proof of HEAD-IS-GOOD-EVOLUTION-STATE ...
(IMPLIES (IS-GOOD-EVOLUTION S) (IS-GOOD-EVOLUTION-STATE (SEQ!HEAD S)))
FORGEABLE-ENCRYPTED-IMPLIES-IN-PARTS
Beginning proof of FORGEABLE-ENCRYPTED-IMPLIES-IN-PARTS ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE S) (IN M (MS!MESSAGES)) (IN K (MS!KEYS))
  (NOT (FORGEABLE K S)) (FORGEABLE (MS!ENCRYPT M K) S))
 (IN (MS!ENCRYPT M K) (MS!PARTS (SEEN-MESSAGES S))))
HISTORY-IS-SEQUENCE
Beginning proof of HISTORY-IS-SEQUENCE ...
(IMPLIES (IS-GOOD-EVOLUTION-STATE S) (SEQ!IS-SEQUENCE (HISTORY S)))
KNOWN-BY-PRINCIPAL-IS-MESSAGE
Beginning proof of KNOWN-BY-PRINCIPAL-IS-MESSAGE ...
(IMPLIES (KNOWN-BY-PRINCIPAL M P S) (IN M (MS!MESSAGES)))
FORGEABLE-IS-MESSAGE
Beginning proof of FORGEABLE-IS-MESSAGE ...
(IMPLIES (FORGEABLE M S) (IN M (MS!MESSAGES)))
MESSAGE-INDUCTION
Beginning proof of MESSAGE-INDUCTION ...
(IF (OR (NOT (IN M (MS!MESSAGES))) (IN M (MS!ATOMIC-MESSAGES))) (TRUE)
 (ALL (N)
  (IF (< (MS!SIZE N) (MS!SIZE M)) (M< (MS!SIZE N) (MS!SIZE M)) (TRUE))))
SIZE-PROPER-PART
Beginning proof of SIZE-PROPER-PART ...
(IMPLIES
 (AND (IN M1 (MS!MESSAGES)) (IN M2 (MS!MESSAGES))
  (IN M1 (MS!PARTS (SETADD M2 (NULLSET)))) (NOT (= M1 M2)))
 (>= (MS!SIZE M2) (+ (MS!SIZE M1) 1)))
HISTORY-OF-NTH-OF-TAIL-OF-GOOD-EVOLUTION-2
Beginning proof of HISTORY-OF-NTH-OF-TAIL-OF-GOOD-EVOLUTION-2 ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION SEQUENCE) (>= N 1)
  (<= (+ N 1) (SEQ!LENGTH SEQUENCE)))
 (= (HISTORY (SEQ!NTH (SEQ!TAIL SEQUENCE) N))
  (SEQ!TAIL (HISTORY (SEQ!NTH SEQUENCE N)))))
LENGTH-HISTORY-NTH
Beginning proof of LENGTH-HISTORY-NTH ...
(IMPLIES (AND (IS-GOOD-EVOLUTION S) (>= N 1) (<= N (SEQ!LENGTH S)))
 (= (SEQ!LENGTH (HISTORY (SEQ!NTH S N))) (- (SEQ!LENGTH S) N)))
NTH-HISTORY-NTH-EVOLUTION
Beginning proof of NTH-HISTORY-NTH-EVOLUTION ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION S) (>= N1 1)
  (<= N1 (SEQ!LENGTH (HISTORY (SEQ!HEAD S)))) (>= N2 1)
  (<= N2 (SEQ!LENGTH (HISTORY (SEQ!NTH S N1)))))
 (= (SEQ!NTH (HISTORY (SEQ!NTH S N1)) N2)
  (SEQ!HEAD (HISTORY (SEQ!NTH S (- (+ N1 N2) 1))))))
HEAD-HISTORY-IN-EVENTS
Beginning proof of HEAD-HISTORY-IN-EVENTS ...
(IMPLIES (AND (IS-GOOD-EVOLUTION-STATE S) (>= (SEQ!LENGTH (HISTORY S)) 1))
 (= (IN (SEQ!HEAD (HISTORY S)) (EVENTS)) (TRUE)))
MEMBER-HISTORY-NTH
Beginning proof of MEMBER-HISTORY-NTH ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION S) (>= N1 1) (<= (+ N1 1) (SEQ!LENGTH S)) (>= N2 1)
  (>= N1 N2) (SEQ!IS-MEMBER E (HISTORY (SEQ!NTH S N1))))
 (SEQ!IS-MEMBER E (HISTORY (SEQ!NTH S N2))))
NTH-IN-GOOD-EVOLUTION
Beginning proof of NTH-IN-GOOD-EVOLUTION ...
(IMPLIES (AND (IS-GOOD-EVOLUTION S) (>= N 1) (<= (+ N 1) (SEQ!LENGTH S)))
 (AND (IS-GOOD-EVOLUTION-STATE (SEQ!NTH S N))
  (SEQ!IS-TACK (HISTORY (SEQ!NTH S N)))
  (IN (SEQ!HEAD (HISTORY (SEQ!NTH S N))) (EVENTS))))
ALL-STORAGE-MONOTONIC
Beginning proof of ALL-STORAGE-MONOTONIC ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION S) (<= 1 N2) (<= N2 N1) (<= N1 (SEQ!LENGTH S)))
 (SUBSET (ALL-STORAGE (STORES (SEQ!NTH S N1)))
  (ALL-STORAGE (STORES (SEQ!NTH S N2)))))
FRESH-IS-MONOTONIC
Beginning proof of FRESH-IS-MONOTONIC ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION S) (<= 1 N2) (<= N2 N1) (<= N1 (SEQ!LENGTH S))
  (MS!IS-FRESH K (ALL-MESSAGES-IN-STATE (SEQ!NTH S N2))))
 (MS!IS-FRESH K (ALL-MESSAGES-IN-STATE (SEQ!NTH S N1))))
IS-GENERATED-CONSEQUENCE
Beginning proof of IS-GENERATED-CONSEQUENCE ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION S) (IS-GENERATED K (SEQ!HEAD S)) (<= 1 N)
  (<= N (SEQ!LENGTH S)))
 (OR (IS-GENERATED K (SEQ!NTH S N))
  (MS!IS-FRESH K (ALL-MESSAGES-IN-STATE (SEQ!NTH S N)))))
FORGEABLE-CONTAINING-ENCRYPTED-IMPLIES-IN-PARTS
Beginning proof of FORGEABLE-CONTAINING-ENCRYPTED-IMPLIES-IN-PARTS ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE S) (IN M (MS!MESSAGES)) (IN K (MS!KEYS))
  (NOT (FORGEABLE K S)) (FORGEABLE M2 S)
  (IN (MS!ENCRYPT M K) (MS!PARTS (UNIT M2))))
 (IN (MS!ENCRYPT M K) (MS!PARTS (SEEN-MESSAGES S))))
IN-SEND-EVENT
Beginning proof of IN-SEND-EVENT ...
(IMPLIES (IN EVENT (SEND-EVENTS))
 (AND
  (= EVENT
   (MAKE-SEND-EVENT (LABEL-OF-EVENT EVENT) (TIME-OF-EVENT EVENT)
    (MESSAGE-OF-EVENT EVENT) (PRINCIPAL1-OF-EVENT EVENT)))
  (>= (LABEL-OF-EVENT EVENT) 0) (>= (TIME-OF-EVENT EVENT) 0)
  (IN (MESSAGE-OF-EVENT EVENT) (MS!MESSAGES))
  (IN (PRINCIPAL1-OF-EVENT EVENT) (MS!PRINCIPALS))))
IN-RECEIVE-EVENT
Beginning proof of IN-RECEIVE-EVENT ...
(IMPLIES (IN EVENT (RECEIVE-EVENTS))
 (AND
  (= EVENT
   (MAKE-RECEIVE-EVENT (LABEL-OF-EVENT EVENT) (TIME-OF-EVENT EVENT)
    (MESSAGE-OF-EVENT EVENT) (PRINCIPAL1-OF-EVENT EVENT)))
  (>= (LABEL-OF-EVENT EVENT) 0) (>= (TIME-OF-EVENT EVENT) 0)
  (IN (MESSAGE-OF-EVENT EVENT) (MS!MESSAGES))
  (IN (PRINCIPAL1-OF-EVENT EVENT) (MS!PRINCIPALS))))
IN-OUT-OF-BAND-EVENT
Beginning proof of IN-OUT-OF-BAND-EVENT ...
(IMPLIES (IN EVENT (OUT-OF-BAND-EVENTS))
 (AND
  (= EVENT
   (MAKE-OUT-OF-BAND-EVENT (LABEL-OF-EVENT EVENT) (TIME-OF-EVENT EVENT)
    (MESSAGE-OF-EVENT EVENT) (PRINCIPAL1-OF-EVENT EVENT)
    (PRINCIPAL2-OF-EVENT EVENT)))
  (>= (LABEL-OF-EVENT EVENT) 0) (>= (TIME-OF-EVENT EVENT) 0)
  (IN (MESSAGE-OF-EVENT EVENT) (MS!MESSAGES))
  (IN (PRINCIPAL1-OF-EVENT EVENT) (MS!PRINCIPALS))
  (IN (PRINCIPAL2-OF-EVENT EVENT) (MS!PRINCIPALS))))
KNOWN-BY-PRINCIPAL-CONTAINING-ENCRYPTED-IMPLIES-IN-PARTS
Beginning proof of KNOWN-BY-PRINCIPAL-CONTAINING-ENCRYPTED-IMPLIES-IN-PARTS ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE S) (IN M (MS!MESSAGES)) (IN K (MS!KEYS))
  (IN P (MS!PRINCIPALS)) (NOT (KNOWN-BY-PRINCIPAL K P S))
  (KNOWN-BY-PRINCIPAL M2 P S) (IN (MS!ENCRYPT M K) (MS!PARTS (UNIT M2))))
 (IN (MS!ENCRYPT M K) (MS!PARTS (STORAGE-OF P S))))
IS-GENERATED-MONOTONIC
Beginning proof of IS-GENERATED-MONOTONIC ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION S) (<= 1 N1) (<= N1 N2) (<= N2 (SEQ!LENGTH S))
  (IS-GENERATED K (SEQ!NTH S N2)))
 (IS-GENERATED K (SEQ!NTH S N1)))
ENCRYPTED-MESSAGE-THEOREM
Beginning proof of ENCRYPTED-MESSAGE-THEOREM ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION S) (IN M (MS!MESSAGES)) (IN K (MS!KEYS))
  (IN (MS!ENCRYPT M K) (MS!PARTS (SEEN-MESSAGES (SEQ!HEAD S))))
  (NOT (FORGEABLE K (SEQ!HEAD S))) (IS-GENERATED K (SEQ!HEAD S)))
 (OR
  (SOME (N2 L2 T2 M2 P2)
   (AND (>= N2 1) (< N2 (SEQ!LENGTH S)) (IN M2 (MS!MESSAGES))
    (IN P2 (MS!PRINCIPALS))
    (= (SEQ!NTH (HISTORY (SEQ!HEAD S)) N2) (MAKE-SEND-EVENT L2 T2 M2 P2))
    (KNOWN-BY-PRINCIPAL K P2 (SEQ!NTH S (+ N2 1)))
    (NOT
     (IN (MS!ENCRYPT M K) (MS!PARTS (SEEN-MESSAGES (SEQ!NTH S (+ N2 1))))))
    (IN (MS!ENCRYPT M K) (MS!PARTS (SETADD M2 (NULLSET))))))
  (SOME (N3 L3 T3 M3 P3 P4)
   (AND (>= N3 1) (< N3 (SEQ!LENGTH S)) (IN M3 (MS!MESSAGES))
    (IN P3 (MS!PRINCIPALS)) (IN P4 (MS!PRINCIPALS))
    (= (SEQ!NTH (HISTORY (SEQ!HEAD S)) N3)
     (MAKE-OUT-OF-BAND-EVENT L3 T3 M3 P3 P4))
    (KNOWN-BY-PRINCIPAL K P3 (SEQ!NTH S (+ N3 1)))
    (IN (MS!ENCRYPT M K) (MS!PARTS (SETADD M3 (NULLSET))))))))
IN-PARTS-ADD-KNOWN-BY-PRINCIPAL
Beginning proof of IN-PARTS-ADD-KNOWN-BY-PRINCIPAL ...
(IMPLIES
 (AND (IS-GOOD-EVOLUTION-STATE S) (IN P (MS!PRINCIPALS))
  (KNOWN-BY-PRINCIPAL M P S) (IN K (MS!ATOMIC-MESSAGES))
  (NOT (IN K (MS!PRINCIPALS))) (NOT (IN K (MS!TEXT-MESSAGES)))
  (NOT (IN K (MS!PUBLIC-KEYS))))
 (=
  (IN K
   (MS!PARTS
    (SETADD M
     (UNION (MS!PRINCIPALS)
      (UNION (MS!TEXT-MESSAGES) (UNION (MS!PUBLIC-KEYS) (STORAGE-OF P S)))))))
  (IN K (MS!PARTS (STORAGE-OF P S)))))
IN-PARTS-SEEN-IMPLIES-IN-PARTS-FORGEABLE
Beginning proof of IN-PARTS-SEEN-IMPLIES-IN-PARTS-FORGEABLE ...
(IMPLIES
 (AND (IS-GOOD-STATE STATE) (IN K (MS!ATOMIC-MESSAGES))
  (IN K (MS!PARTS (SEEN-MESSAGES STATE))))
 (SOME (MESSAGE)
  (AND (FORGEABLE MESSAGE STATE) (IN K (MS!PARTS (UNIT MESSAGE))))))
SEND-STEP-IS-GOOD-STEP
Beginning proof of SEND-STEP-IS-GOOD-STEP ...
(IMPLIES (NOT (= STATE (SEND-STEP LABEL TIME MESSAGE PRINCIPAL STATE)))
 (= (GOOD-STEP STATE (SEND-STEP LABEL TIME MESSAGE PRINCIPAL STATE)) (TRUE)))
RECEIVE-STEP-IS-GOOD-STEP
Beginning proof of RECEIVE-STEP-IS-GOOD-STEP ...
(IMPLIES (NOT (= STATE (RECEIVE-STEP LABEL TIME MESSAGE PRINCIPAL STATE)))
 (= (GOOD-STEP STATE (RECEIVE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
  (TRUE)))
OUT-OF-BAND-STEP-IS-GOOD-STEP
Beginning proof of OUT-OF-BAND-STEP-IS-GOOD-STEP ...
(IMPLIES
 (NOT (= STATE (OUT-OF-BAND-STEP LABEL TIME MESSAGE SENDER RECEIVER STATE)))
 (=
  (GOOD-STEP STATE
   (OUT-OF-BAND-STEP LABEL TIME MESSAGE SENDER RECEIVER STATE))
  (TRUE)))
GENERATE-STEP-IS-GOOD-STEP
Beginning proof of GENERATE-STEP-IS-GOOD-STEP ...
(IMPLIES (NOT (= STATE (GENERATE-STEP LABEL TIME MESSAGE PRINCIPAL STATE)))
 (= (GOOD-STEP STATE (GENERATE-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
  (TRUE)))
CONSTRUCT-STEP-IS-GOOD-STEP
Beginning proof of CONSTRUCT-STEP-IS-GOOD-STEP ...
(IMPLIES (NOT (= STATE (CONSTRUCT-STEP LABEL TIME MESSAGE PRINCIPAL STATE)))
 (= (GOOD-STEP STATE (CONSTRUCT-STEP LABEL TIME MESSAGE PRINCIPAL STATE))
  (TRUE)))
INTRUDER-STEP-IS-GOOD-STEP
Beginning proof of INTRUDER-STEP-IS-GOOD-STEP ...
(IMPLIES (NOT (= STATE (INTRUDER-STEP LABEL TIME MESSAGE STATE)))
 (= (GOOD-STEP STATE (INTRUDER-STEP LABEL TIME MESSAGE STATE)) (TRUE)))
Done.