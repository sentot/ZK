
Reading "/home/sentot/zk/version1/ZK/examples/prspec.ver"
Warning RULE-LOOPS for FN!FUNCTION-EXTENSIONALITY:
 The rule FN!FUNCTION-EXTENSIONALITY loops upon itself.
MAKE-PROCESS
PROCESS-ALPHABET
PROCESS-TRACES
PREFIX-CLOSED
PREFIX-CLOSED-BOOL
Beginning proof of PREFIX-CLOSED-BOOL ...
(= (TYPE-OF (PREFIX-CLOSED TRACES)) (BOOL))
IS-PROCESS
IS-PROCESS-BOOL
Beginning proof of IS-PROCESS-BOOL ...
(= (TYPE-OF (IS-PROCESS P)) (BOOL))
PROCESS-ALPHABET-MAKE-PROCESS
Beginning proof of PROCESS-ALPHABET-MAKE-PROCESS ...
(= (PROCESS-ALPHABET (MAKE-PROCESS A T)) A)
PROCESS-TRACES-MAKE-PROCESS
Beginning proof of PROCESS-TRACES-MAKE-PROCESS ...
(= (PROCESS-TRACES (MAKE-PROCESS A T)) T)
PROCESS-COMPOSITION
Beginning proof of PROCESS-COMPOSITION ...
(IMPLIES (IS-PROCESS P)
 (= (MAKE-PROCESS (PROCESS-ALPHABET P) (PROCESS-TRACES P)) P))
MAKE-PROCESS-IS-PROCESS
Beginning proof of MAKE-PROCESS-IS-PROCESS ...
(= (IS-PROCESS (MAKE-PROCESS A T))
 (AND (SUBSET T (TR!TRACE-OF A)) (IN (TR!EMPTY) T) (PREFIX-CLOSED T)))
IN-PROCESS-TRACES
Beginning proof of IN-PROCESS-TRACES ...
(IMPLIES (AND (IS-PROCESS P) (IN S (PROCESS-TRACES P)))
 (TR!IS-TRACE-OF S (PROCESS-ALPHABET P)))
APPEND-IN-PROCESS-TRACES
Beginning proof of APPEND-IN-PROCESS-TRACES ...
(IMPLIES
 (AND (IS-PROCESS P) (TR!IS-TRACE S1) (TR!IS-TRACE S2)
  (IN (TR!APPEND S1 S2) (PROCESS-TRACES P)))
 (IN S1 (PROCESS-TRACES P)))
STOP
RUN
IS-PROCESS-STOP
Beginning proof of IS-PROCESS-STOP ...
(IS-PROCESS (STOP A))
PROCESS-ALPHABET-STOP
Beginning proof of PROCESS-ALPHABET-STOP ...
(= (PROCESS-ALPHABET (STOP A)) A)
PROCESS-TRACES-STOP
Beginning proof of PROCESS-TRACES-STOP ...
(= (PROCESS-TRACES (STOP A)) (UNIT (TR!EMPTY)))
IS-PROCESS-RUN
Beginning proof of IS-PROCESS-RUN ...
(IS-PROCESS (RUN A))
PROCESS-ALPHABET-RUN
Beginning proof of PROCESS-ALPHABET-RUN ...
(= (PROCESS-ALPHABET (RUN A)) A)
PROCESS-TRACES-RUN
Beginning proof of PROCESS-TRACES-RUN ...
(= (PROCESS-TRACES (RUN A)) (TR!TRACE-OF A))
MAP-TACK
PREFIX
PREFIX-IS-PROCESS
Beginning proof of PREFIX-IS-PROCESS ...
(IMPLIES (AND (IS-PROCESS P) (IN X (PROCESS-ALPHABET P)))
 (IS-PROCESS (PREFIX X P)))
PROCESS-ALPHABET-PREFIX
Beginning proof of PROCESS-ALPHABET-PREFIX ...
(IMPLIES (AND (IS-PROCESS P) (IN X (PROCESS-ALPHABET P)))
 (= (PROCESS-ALPHABET (PREFIX X P)) (PROCESS-ALPHABET P)))
PROCESS-TRACES-PREFIX
Beginning proof of PROCESS-TRACES-PREFIX ...
(IMPLIES (AND (IS-PROCESS P) (IN X (PROCESS-ALPHABET P)))
 (= (PROCESS-TRACES (PREFIX X P))
  (UNION (UNIT (TR!EMPTY)) (MAP-TACK X (PROCESS-TRACES P)))))
AFTER
AFTER-IS-PROCESS
Beginning proof of AFTER-IS-PROCESS ...
(IMPLIES (AND (IS-PROCESS P) (IN S (PROCESS-TRACES P)))
 (IS-PROCESS (AFTER P S)))
PROCESS-ALPHABET-AFTER
Beginning proof of PROCESS-ALPHABET-AFTER ...
(IMPLIES (AND (IS-PROCESS P) (IN S (PROCESS-TRACES P)))
 (= (PROCESS-ALPHABET (AFTER P S)) (PROCESS-ALPHABET P)))
PROCESS-TRACES-AFTER
Beginning proof of PROCESS-TRACES-AFTER ...
(IMPLIES (AND (IS-PROCESS P) (IN S (PROCESS-TRACES P)))
 (= (PROCESS-TRACES (AFTER P S)) (TR!SELECT-AFTER S (PROCESS-TRACES P))))
SELECT-PARALLEL-TRACES
PARALLEL
PARALLEL-IS-PROCESS
Beginning proof of PARALLEL-IS-PROCESS ...
(IMPLIES (AND (IS-PROCESS P) (IS-PROCESS Q)) (IS-PROCESS (PARALLEL P Q)))
PROCESS-ALPHABET-PARALLEL
Beginning proof of PROCESS-ALPHABET-PARALLEL ...
(IMPLIES (AND (IS-PROCESS P) (IS-PROCESS Q))
 (= (PROCESS-ALPHABET (PARALLEL P Q))
  (UNION (PROCESS-ALPHABET P) (PROCESS-ALPHABET Q))))
PROCESS-TRACES-PARALLEL
Beginning proof of PROCESS-TRACES-PARALLEL ...
(IMPLIES (AND (IS-PROCESS P) (IS-PROCESS Q))
 (= (PROCESS-TRACES (PARALLEL P Q)) (SELECT-PARALLEL-TRACES P Q)))
MAP-PREFIX
PROCESS-CHOICE
GOOD-CHOICE
CHOICE-IS-PROCESS
Beginning proof of CHOICE-IS-PROCESS ...
(IMPLIES (GOOD-CHOICE F A) (IS-PROCESS (PROCESS-CHOICE A F)))
PROCESS-ALPHABET-CHOICE
Beginning proof of PROCESS-ALPHABET-CHOICE ...
(IMPLIES (GOOD-CHOICE F A)
 (= (PROCESS-ALPHABET (PROCESS-CHOICE A F))
  (PROCESS-ALPHABET (FN!APPLY F (CHOICE A)))))
PROCESS-TRACES-CHOICE
Beginning proof of PROCESS-TRACES-CHOICE ...
(IMPLIES (GOOD-CHOICE F A)
 (= (PROCESS-TRACES (PROCESS-CHOICE A F))
  (UNION (UNIT (TR!EMPTY)) (CUP (MAP-PREFIX A F)))))
IS-COMM
MAKE-COMM
CHANNEL
MESSAGE
IS-COMM-BOOL
Beginning proof of IS-COMM-BOOL ...
(= (TYPE-OF (IS-COMM X)) (BOOL))
CHANNEL-COMM
Beginning proof of CHANNEL-COMM ...
(= (CHANNEL (MAKE-COMM X Y)) X)
MESSAGE-COMM
Beginning proof of MESSAGE-COMM ...
(= (MESSAGE (MAKE-COMM X Y)) Y)
MAKE-COMM-IS-COMM
Beginning proof of MAKE-COMM-IS-COMM ...
(IS-COMM (MAKE-COMM X Y))
COMM-COMPOSITION
Beginning proof of COMM-COMPOSITION ...
(IMPLIES (IS-COMM X) (= (MAKE-COMM (CHANNEL X) (MESSAGE X)) X))
SELECT-COMM
PROCESS-MESSAGES
OUTPUT
OUTPUT-IS-PROCESS
Beginning proof of OUTPUT-IS-PROCESS ...
(IMPLIES (AND (IS-PROCESS P) (IN V (PROCESS-MESSAGES C P)))
 (IS-PROCESS (OUTPUT C V P)))
PROCESS-ALPHABET-OUTPUT
Beginning proof of PROCESS-ALPHABET-OUTPUT ...
(IMPLIES (AND (IS-PROCESS P) (IN V (PROCESS-MESSAGES C P)))
 (= (PROCESS-ALPHABET (OUTPUT C V P)) (PROCESS-ALPHABET P)))
PROCESS-TRACES-OUTPUT
Beginning proof of PROCESS-TRACES-OUTPUT ...
(IMPLIES (AND (IS-PROCESS P) (IN V (PROCESS-MESSAGES C P)))
 (= (PROCESS-TRACES (OUTPUT C V P))
  (UNION (UNIT (TR!EMPTY)) (MAP-TACK (MAKE-COMM C V) (PROCESS-TRACES P)))))
INPUT
INPUT-IS-PROCESS
Beginning proof of INPUT-IS-PROCESS ...
(IMPLIES (GOOD-CHOICE F (SELECT-COMM C (REL!DOM F))) (IS-PROCESS (INPUT C F)))
PROCESS-ALPHABET-INPUT
Beginning proof of PROCESS-ALPHABET-INPUT ...
(IMPLIES (GOOD-CHOICE F (SELECT-COMM C (REL!DOM F)))
 (= (PROCESS-ALPHABET (INPUT C F))
  (PROCESS-ALPHABET (FN!APPLY F (CHOICE (SELECT-COMM C (REL!DOM F)))))))
PROCESS-TRACES-INPUT
Beginning proof of PROCESS-TRACES-INPUT ...
(IMPLIES (GOOD-CHOICE F (SELECT-COMM C (REL!DOM F)))
 (= (PROCESS-TRACES (INPUT C F))
  (UNION (UNIT (TR!EMPTY)) (CUP (MAP-PREFIX (SELECT-COMM C (REL!DOM F)) F)))))
IS-SEQUENTIAL-PROCESS
SKIP
SKIP-IS-SEQUENTIAL-PROCESS
Beginning proof of SKIP-IS-SEQUENTIAL-PROCESS ...
(IMPLIES (IN E A) (IS-SEQUENTIAL-PROCESS (SKIP A E) E))
PROCESS-ALPHABET-SKIP
Beginning proof of PROCESS-ALPHABET-SKIP ...
(IMPLIES (IN E A) (= (PROCESS-ALPHABET (SKIP A E)) A))
PROCESS-TRACES-SKIP
Beginning proof of PROCESS-TRACES-SKIP ...
(IMPLIES (IN E A)
 (= (PROCESS-TRACES (SKIP A E))
  (SETADD (TR!EMPTY) (SETADD (TR!TACK E (TR!EMPTY)) (NULLSET)))))
IS-SEQUENTIAL-PROCESS-FRULE
Beginning proof of IS-SEQUENTIAL-PROCESS-FRULE ...
(IMPLIES (IS-SEQUENTIAL-PROCESS P E) (IS-PROCESS P))
SELECT-TERMINATED-TRACES
MAP-STRIP-TRAILING-EVENT
MAP-APPEND
COMPOSE
COMPOSE-IS-SEQUENTIAL-PROCESS
Beginning proof of COMPOSE-IS-SEQUENTIAL-PROCESS ...
(IMPLIES
 (AND (IS-SEQUENTIAL-PROCESS P1 E) (IS-SEQUENTIAL-PROCESS P2 E)
  (= (PROCESS-ALPHABET P1) (PROCESS-ALPHABET P2)))
 (IS-SEQUENTIAL-PROCESS (COMPOSE P1 P2 E) E))
PROCESS-ALPHABET-COMPOSE
Beginning proof of PROCESS-ALPHABET-COMPOSE ...
(IMPLIES
 (AND (IS-SEQUENTIAL-PROCESS P1 E) (IS-SEQUENTIAL-PROCESS P2 E)
  (= (PROCESS-ALPHABET P1) (PROCESS-ALPHABET P2)))
 (= (PROCESS-ALPHABET (COMPOSE P1 P2 E)) (PROCESS-ALPHABET P1)))
PROCESS-TRACES-COMPOSE
Beginning proof of PROCESS-TRACES-COMPOSE ...
(IMPLIES
 (AND (IS-SEQUENTIAL-PROCESS P1 E) (IS-SEQUENTIAL-PROCESS P2 E)
  (= (PROCESS-ALPHABET P1) (PROCESS-ALPHABET P2)))
 (= (PROCESS-TRACES (COMPOSE P1 P2 E))
  (UNION
   (DIFF (PROCESS-TRACES P1) (SELECT-TERMINATED-TRACES (PROCESS-TRACES P1) E))
   (MAP-APPEND
    (MAP-STRIP-TRAILING-EVENT
     (SELECT-TERMINATED-TRACES (PROCESS-TRACES P1) E))
    (PROCESS-TRACES P2)))))
PROCESS-INCLUDED
PROCESS-INCLUDED-REFLEXIVE
Beginning proof of PROCESS-INCLUDED-REFLEXIVE ...
(PROCESS-INCLUDED P P)
PROCESS-INCLUDED-TRANSITIVE
Beginning proof of PROCESS-INCLUDED-TRANSITIVE ...
(IMPLIES (AND (PROCESS-INCLUDED P1 P2) (PROCESS-INCLUDED P2 P3))
 (PROCESS-INCLUDED P1 P3))
PROCESS-INCLUDED-ANTI-SYMMETRIC
Beginning proof of PROCESS-INCLUDED-ANTI-SYMMETRIC ...
(IMPLIES
 (AND (IS-PROCESS P1) (IS-PROCESS P2) (PROCESS-INCLUDED P1 P2)
  (PROCESS-INCLUDED P2 P1))
 (= P1 P2))
STOP-IS-LEAST
Beginning proof of STOP-IS-LEAST ...
(IMPLIES (AND (IS-PROCESS P) (= (PROCESS-ALPHABET P) A))
 (= (PROCESS-INCLUDED (STOP A) P) (TRUE)))
IS-PROCESS-CHAIN
COLLECT-TRACES
PROCESS-CHAIN-LIMIT
ALPHABET-PROCESS-CHAIN-ELEMENT
Beginning proof of ALPHABET-PROCESS-CHAIN-ELEMENT ...
(IMPLIES (AND (> I 0) (IS-PROCESS-CHAIN PC))
 (= (PROCESS-ALPHABET (FN!APPLY PC I)) (PROCESS-ALPHABET (FN!APPLY PC 0))))
ELEMENT-INCLUDED-IN-LIMIT
Beginning proof of ELEMENT-INCLUDED-IN-LIMIT ...
(IMPLIES (AND (IN I (NAT!NAT)) (IS-PROCESS-CHAIN PC))
 (PROCESS-INCLUDED (FN!APPLY PC I) (PROCESS-CHAIN-LIMIT PC)))
UPPER-BOUND-AXIOM
Beginning proof of UPPER-BOUND-AXIOM ...
(IMPLIES
 (AND (IS-PROCESS-CHAIN PC) (IS-PROCESS Q)
  (ALL (I) (IMPLIES (IN I (NAT!NAT)) (PROCESS-INCLUDED (FN!APPLY PC I) Q))))
 (PROCESS-INCLUDED (PROCESS-CHAIN-LIMIT PC) Q))
IS-CONTINUOUS
ITERATE
Beginning proof of ITERATE ...
(IF (>= N 1) (M< (- N 1) N) (TRUE))
COLLECT-PROCESS-ITERATIONS
IN-COLLECT-PROCESS-ITERATIONS
Beginning proof of IN-COLLECT-PROCESS-ITERATIONS ...
(= (IN P (COLLECT-PROCESS-ITERATIONS A F))
 (AND (PAIR!IS-PAIR P) (IN (PAIR!FST P) (NAT!NAT))
  (= (PAIR!SND P) (ITERATE (PAIR!FST P) F (STOP A)))))
DOM-COLLECT-PROCESS-ITERATIONS
Beginning proof of DOM-COLLECT-PROCESS-ITERATIONS ...
(= (REL!DOM (COLLECT-PROCESS-ITERATIONS A F)) (NAT!NAT))
COLLECT-PROCESS-ITERATIONS-IS-FUNCTION
Beginning proof of COLLECT-PROCESS-ITERATIONS-IS-FUNCTION ...
(= (FN!IS-FUNCTION (COLLECT-PROCESS-ITERATIONS A F)) (TRUE))
APPLY-COLLECT-PROCESS-ITERATIONS
Beginning proof of APPLY-COLLECT-PROCESS-ITERATIONS ...
(IMPLIES (IN X (NAT!NAT))
 (= (FN!APPLY (COLLECT-PROCESS-ITERATIONS A F) X) (ITERATE X F (STOP A))))
MAKE-RECURSIVE-PROCESS
RECURSIVE-PROCESS-LEMMA
Beginning proof of RECURSIVE-PROCESS-LEMMA ...
(= (IN T (PROCESS-TRACES (MAKE-RECURSIVE-PROCESS A F)))
 (SOME (N) (AND (>= N 0) (IN T (PROCESS-TRACES (ITERATE N F (STOP A)))))))
SELECT-GOOD-TRACE-SETS
PROCESS-OF
IN-PROCESS-OF
Beginning proof of IN-PROCESS-OF ...
(= (IN P (PROCESS-OF A)) (AND (IS-PROCESS P) (= (PROCESS-ALPHABET P) A)))
STOP-IN-PROCESS-OF
Beginning proof of STOP-IN-PROCESS-OF ...
(= (IN (STOP A) (PROCESS-OF A)) (TRUE))
IS-PROCESS-CHAIN-COLLECT-PROCESS-ITERATIONS
Beginning proof of IS-PROCESS-CHAIN-COLLECT-PROCESS-ITERATIONS ...
(IMPLIES
 (AND (FN!IS-FUNCTION F) (= (REL!DOM F) (PROCESS-OF A))
  (SUBSET (REL!RAN F) (PROCESS-OF A))
  (ALL (I)
   (IMPLIES (IN I (NAT!NAT))
    (PROCESS-INCLUDED (ITERATE I F (STOP A)) (ITERATE (+ I 1) F (STOP A))))))
 (IS-PROCESS-CHAIN (COLLECT-PROCESS-ITERATIONS A F)))
ITERATE-PRODUCES-PROCESS
Beginning proof of ITERATE-PRODUCES-PROCESS ...
(IMPLIES
 (AND (FN!IS-FUNCTION F) (>= N 0) (= (REL!DOM F) (PROCESS-OF A))
  (SUBSET (REL!RAN F) (PROCESS-OF A)))
 (IN (ITERATE N F (STOP A)) (PROCESS-OF A)))
BETWEEN-ITERATIONS
Beginning proof of BETWEEN-ITERATIONS ...
(IMPLIES
 (AND (FN!IS-FUNCTION F) (>= N 0) (= (REL!DOM F) (PROCESS-OF A))
  (SUBSET (REL!RAN F) (PROCESS-OF A)))
 (IN (PAIR!PAIR (ITERATE N F (STOP A)) (ITERATE (+ N 1) F (STOP A))) F))
PROCESS-TRACES-ITERATE-LEMMA
Beginning proof of PROCESS-TRACES-ITERATE-LEMMA ...
(IMPLIES
 (AND (>= N 0)
  (ALL (I)
   (IMPLIES (IN I (NAT!NAT))
    (PROCESS-INCLUDED (ITERATE I F (STOP A)) (ITERATE (+ I 1) F (STOP A)))))
  (IN E (PROCESS-TRACES (ITERATE N F (STOP A)))))
 (IN E (PROCESS-TRACES (ITERATE (+ N 1) F (STOP A)))))
PRODUCES-CHAIN
FIXED-POINT-THEOREM
Beginning proof of FIXED-POINT-THEOREM ...
(IMPLIES (AND (PRODUCES-CHAIN A F) (IS-CONTINUOUS A F))
 (= (FN!APPLY F (MAKE-RECURSIVE-PROCESS A F)) (MAKE-RECURSIVE-PROCESS A F)))
PROCESS-ALPHABET-MAKE-RECURSIVE
Beginning proof of PROCESS-ALPHABET-MAKE-RECURSIVE ...
(IMPLIES (PRODUCES-CHAIN A F)
 (= (PROCESS-ALPHABET (MAKE-RECURSIVE-PROCESS A F)) A))
PROCESS-TRACES-MAKE-RECURSIVE
Beginning proof of PROCESS-TRACES-MAKE-RECURSIVE ...
(IMPLIES (PRODUCES-CHAIN A F)
 (= (PROCESS-TRACES (MAKE-RECURSIVE-PROCESS A F))
  (CUP (COLLECT-TRACES (COLLECT-PROCESS-ITERATIONS A F)))))
IS-PROCESS-MAKE-RECURSIVE
Beginning proof of IS-PROCESS-MAKE-RECURSIVE ...
(IMPLIES (PRODUCES-CHAIN A F) (IS-PROCESS (MAKE-RECURSIVE-PROCESS A F)))
Done.