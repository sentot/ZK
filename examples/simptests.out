
Reading "/home/sentot/zk/version1/ZK/examples/simptests.ver"
TEST-UP-<-<-<
Beginning proof of TEST-UP-<-<-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (< B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-UP-<-<-<=
Beginning proof of TEST-UP-<-<-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (< B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-UP-<-<-=
Beginning proof of TEST-UP-<-<-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (< B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-UP-<-<->=
Beginning proof of TEST-UP-<-<->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (< B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<-<->
Beginning proof of TEST-UP-<-<-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (< B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<-<=-<
Beginning proof of TEST-UP-<-<=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (<= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (<= B 0)))
TEST-UP-<-<=-<=
Beginning proof of TEST-UP-<-<=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (<= B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0) (<= B 0))
 (<= (* A B) 0))
TEST-UP-<-<=-=
Beginning proof of TEST-UP-<-<=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (<= B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0) (<= B 0))
 (= (* A B) 0))
TEST-UP-<-<=->=
Beginning proof of TEST-UP-<-<=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (<= B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<-<=->
Beginning proof of TEST-UP-<-<=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (<= B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0) (<= B 0))
 (>= (* A B) 1))
TEST-UP-<-=-<
Beginning proof of TEST-UP-<-=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (= B 0)))
TEST-UP-<-=-<=
Beginning proof of TEST-UP-<-=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (= B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<-=-=
Beginning proof of TEST-UP-<-=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (= B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<-=->=
Beginning proof of TEST-UP-<-=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (= B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<-=->
Beginning proof of TEST-UP-<-=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (= B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (= B 0)))
TEST-UP-<->=-<
Beginning proof of TEST-UP-<->=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (>= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0) (>= B 0))
 (<= (+ 1 (* A B)) 0))
TEST-UP-<->=-<=
Beginning proof of TEST-UP-<->=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (>= B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<->=-=
Beginning proof of TEST-UP-<->=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (>= B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0) (>= B 0))
 (= (* A B) 0))
TEST-UP-<->=->=
Beginning proof of TEST-UP-<->=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (>= B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0) (>= B 0))
 (>= (* A B) 0))
TEST-UP-<->=->
Beginning proof of TEST-UP-<->=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (>= B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (>= B 0)))
TEST-UP-<->-<
Beginning proof of TEST-UP-<->-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (> B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<->-<=
Beginning proof of TEST-UP-<->-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (> B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<->-=
Beginning proof of TEST-UP-<->-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (> B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (>= B 1)))
TEST-UP-<->->=
Beginning proof of TEST-UP-<->->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (> B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (>= B 1)))
TEST-UP-<->->
Beginning proof of TEST-UP-<->-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< A 0) (> B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 A) 0))
 (NOT (>= B 1)))
TEST-UP-<=-<-<
Beginning proof of TEST-UP-<=-<-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (< B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0))
 (NOT (<= (+ 1 B) 0)))
TEST-UP-<=-<-<=
Beginning proof of TEST-UP-<=-<-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (< B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= (+ 1 B) 0))
 (<= (* A B) 0))
TEST-UP-<=-<-=
Beginning proof of TEST-UP-<=-<-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (< B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= (+ 1 B) 0))
 (= (* A B) 0))
TEST-UP-<=-<->=
Beginning proof of TEST-UP-<=-<->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (< B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<=-<->
Beginning proof of TEST-UP-<=-<-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (< B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= (+ 1 B) 0))
 (>= (* A B) 1))
TEST-UP-<=-<=-<
Beginning proof of TEST-UP-<=-<=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0))
 (NOT (<= B 0)))
TEST-UP-<=-<=-<=
Beginning proof of TEST-UP-<=-<=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= B 0))
 (<= (* A B) 0))
TEST-UP-<=-<=-=
Beginning proof of TEST-UP-<=-<=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= B 0))
 (= (* A B) 0))
TEST-UP-<=-<=->=
Beginning proof of TEST-UP-<=-<=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-<=-<=->
Beginning proof of TEST-UP-<=-<=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (<= B 0))
 (>= (* A B) 1))
TEST-UP-<=-=-<
Beginning proof of TEST-UP-<=-=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (= B 0))
 (< (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0))
 (NOT (= B 0)))
TEST-UP-<=-=-<=
Beginning proof of TEST-UP-<=-=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-<=-=-=
Beginning proof of TEST-UP-<=-=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (= B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-<=-=->=
Beginning proof of TEST-UP-<=-=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-<=-=->
Beginning proof of TEST-UP-<=-=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0))
 (NOT (= B 0)))
TEST-UP-<=->=-<
Beginning proof of TEST-UP-<=->=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 0))
 (<= (+ 1 (* A B)) 0))
TEST-UP-<=->=-<=
Beginning proof of TEST-UP-<=->=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-<=->=-=
Beginning proof of TEST-UP-<=->=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 0))
 (= (* A B) 0))
TEST-UP-<=->=->=
Beginning proof of TEST-UP-<=->=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 0))
 (>= (* A B) 0))
TEST-UP-<=->=->
Beginning proof of TEST-UP-<=->=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0))
 (NOT (>= B 0)))
TEST-UP-<=->-<
Beginning proof of TEST-UP-<=->-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (> B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 1))
 (<= (+ 1 (* A B)) 0))
TEST-UP-<=->-<=
Beginning proof of TEST-UP-<=->-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (> B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-<=->-=
Beginning proof of TEST-UP-<=->-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (> B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 1))
 (= (* A B) 0))
TEST-UP-<=->->=
Beginning proof of TEST-UP-<=->->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (> B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (>= B 1))
 (>= (* A B) 0))
TEST-UP-<=->->
Beginning proof of TEST-UP-<=->-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0) (> B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= A 0))
 (NOT (>= B 1)))
TEST-UP-=-<-<
Beginning proof of TEST-UP-=-<-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (< B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (<= (+ 1 B) 0)))
TEST-UP-=-<-<=
Beginning proof of TEST-UP-=-<-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (< B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-=-<-=
Beginning proof of TEST-UP-=-<-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (< B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-=-<->=
Beginning proof of TEST-UP-=-<->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (< B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-=-<->
Beginning proof of TEST-UP-=-<-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (< B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (<= (+ 1 B) 0)))
TEST-UP-=-<=-<
Beginning proof of TEST-UP-=-<=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (<= B 0))
 (< (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (<= B 0)))
TEST-UP-=-<=-<=
Beginning proof of TEST-UP-=-<=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (<= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-=-<=-=
Beginning proof of TEST-UP-=-<=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (<= B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-=-<=->=
Beginning proof of TEST-UP-=-<=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (<= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-=-<=->
Beginning proof of TEST-UP-=-<=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (<= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (<= B 0)))
TEST-UP-=-=-<
Beginning proof of TEST-UP-=-=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (= B 0))
 (< (* A B) 0))
Which simplifies
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (= B 0)))
TEST-UP-=-=-<=
Beginning proof of TEST-UP-=-=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-=-=-=
Beginning proof of TEST-UP-=-=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (= B 0))
 (= (* A B) 0))
Which simplifies to ...
(TRUE)
TEST-UP-=-=->=
Beginning proof of TEST-UP-=-=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-=-=->
Beginning proof of TEST-UP-=-=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (= B 0))
 (> (* A B) 0))
Which simplifies
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (= B 0)))
TEST-UP-=->=-<
Beginning proof of TEST-UP-=->=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (>= B 0))
 (< (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (>= B 0)))
TEST-UP-=->=-<=
Beginning proof of TEST-UP-=->=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (>= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-=->=-=
Beginning proof of TEST-UP-=->=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (>= B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-=->=->=
Beginning proof of TEST-UP-=->=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (>= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP-=->=->
Beginning proof of TEST-UP-=->=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (>= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (>= B 0)))
TEST-UP-=->-<
Beginning proof of TEST-UP-=->-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (> B 0))
 (< (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (>= B 1)))
TEST-UP-=->-<=
Beginning proof of TEST-UP-=->-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (> B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-=->-=
Beginning proof of TEST-UP-=->-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (> B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-=->->=
Beginning proof of TEST-UP-=->->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (> B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP-=->->
Beginning proof of TEST-UP-=->-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0) (> B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= A 0))
 (NOT (>= B 1)))
TEST-UP->=-<-<
Beginning proof of TEST-UP->=-<-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (< B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= (+ 1 B) 0))
 (<= (+ 1 (* A B)) 0))
TEST-UP->=-<-<=
Beginning proof of TEST-UP->=-<-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (< B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->=-<-=
Beginning proof of TEST-UP->=-<-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (< B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= (+ 1 B) 0))
 (= (* A B) 0))
TEST-UP->=-<->=
Beginning proof of TEST-UP->=-<->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (< B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= (+ 1 B) 0))
 (>= (* A B) 0))
TEST-UP->=-<->
Beginning proof of TEST-UP->=-<-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (< B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0))
 (NOT (<= (+ 1 B) 0)))
TEST-UP->=-<=-<
Beginning proof of TEST-UP->=-<=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= B 0))
 (<= (+ 1 (* A B)) 0))
TEST-UP->=-<=-<=
Beginning proof of TEST-UP->=-<=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP->=-<=-=
Beginning proof of TEST-UP->=-<=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= B 0))
 (= (* A B) 0))
TEST-UP->=-<=->=
Beginning proof of TEST-UP->=-<=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= B 0))
 (>= (* A B) 0))
TEST-UP->=-<=->
Beginning proof of TEST-UP->=-<=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (<= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0))
 (NOT (<= B 0)))
TEST-UP->=-=-<
Beginning proof of TEST-UP->=-=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (= B 0))
 (< (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0))
 (NOT (= B 0)))
TEST-UP->=-=-<=
Beginning proof of TEST-UP->=-=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP->=-=-=
Beginning proof of TEST-UP->=-=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (= B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP->=-=->=
Beginning proof of TEST-UP->=-=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP->=-=->
Beginning proof of TEST-UP->=-=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0))
 (NOT (= B 0)))
TEST-UP->=->=-<
Beginning proof of TEST-UP->=->=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0))
 (NOT (>= B 0)))
TEST-UP->=->=-<=
Beginning proof of TEST-UP->=->=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 0))
 (<= (* A B) 0))
TEST-UP->=->=-=
Beginning proof of TEST-UP->=->=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 0))
 (= (* A B) 0))
TEST-UP->=->=->=
Beginning proof of TEST-UP->=->=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE to ...
(TRUE)
TEST-UP->=->=->
Beginning proof of TEST-UP->=->=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 0))
 (>= (* A B) 1))
TEST-UP->=->-<
Beginning proof of TEST-UP->=->-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (> B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0))
 (NOT (>= B 1)))
TEST-UP->=->-<=
Beginning proof of TEST-UP->=->-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (> B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 1))
 (<= (* A B) 0))
TEST-UP->=->-=
Beginning proof of TEST-UP->=->-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (> B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 1))
 (= (* A B) 0))
TEST-UP->=->->=
Beginning proof of TEST-UP->=->->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (> B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->=->->
Beginning proof of TEST-UP->=->-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (> B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 0) (>= B 1))
 (>= (* A B) 1))
TEST-UP->-<-<
Beginning proof of TEST-UP->-<-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (< B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->-<-<=
Beginning proof of TEST-UP->-<-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (< B 0))
 (<= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->-<-=
Beginning proof of TEST-UP->-<-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (< B 0))
 (= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (<= (+ 1 B) 0)))
TEST-UP->-<->=
Beginning proof of TEST-UP->-<->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (< B 0))
 (>= (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (<= (+ 1 B) 0)))
TEST-UP->-<->
Beginning proof of TEST-UP->-<-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (< B 0))
 (> (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (<= (+ 1 B) 0)))
TEST-UP->-<=-<
Beginning proof of TEST-UP->-<=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (<= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1) (<= B 0))
 (<= (+ 1 (* A B)) 0))
TEST-UP->-<=-<=
Beginning proof of TEST-UP->-<=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (<= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->-<=-=
Beginning proof of TEST-UP->-<=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (<= B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1) (<= B 0))
 (= (* A B) 0))
TEST-UP->-<=->=
Beginning proof of TEST-UP->-<=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (<= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1) (<= B 0))
 (>= (* A B) 0))
TEST-UP->-<=->
Beginning proof of TEST-UP->-<=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (<= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (<= B 0)))
TEST-UP->-=-<
Beginning proof of TEST-UP->-=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (= B 0))
 (< (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (= B 0)))
TEST-UP->-=-<=
Beginning proof of TEST-UP->-=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->-=-=
Beginning proof of TEST-UP->-=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (= B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->-=->=
Beginning proof of TEST-UP->-=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->-=->
Beginning proof of TEST-UP->-=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (= B 0)))
TEST-UP->->=-<
Beginning proof of TEST-UP->->=-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (>= B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (>= B 0)))
TEST-UP->->=-<=
Beginning proof of TEST-UP->->=-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (>= B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1) (>= B 0))
 (<= (* A B) 0))
TEST-UP->->=-=
Beginning proof of TEST-UP->->=-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (>= B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1) (>= B 0))
 (= (* A B) 0))
TEST-UP->->=->=
Beginning proof of TEST-UP->->=->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (>= B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->->=->
Beginning proof of TEST-UP->->=-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (>= B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1) (>= B 0))
 (>= (* A B) 1))
TEST-UP->->-<
Beginning proof of TEST-UP->->-< ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (> B 0))
 (< (* A B) 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (>= B 1)))
TEST-UP->->-<=
Beginning proof of TEST-UP->->-<= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (> B 0))
 (<= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (>= B 1)))
TEST-UP->->-=
Beginning proof of TEST-UP->->-= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (> B 0))
 (= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= A 1))
 (NOT (>= B 1)))
TEST-UP->->->=
Beginning proof of TEST-UP->->->= ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (> B 0))
 (>= (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-UP->->->
Beginning proof of TEST-UP->->-> ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> A 0) (> B 0))
 (> (* A B) 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-<-<
Beginning proof of TEST-DOWN-RIGHT-<-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT-<-<-<=
Beginning proof of TEST-DOWN-RIGHT-<-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT-<-<-=
Beginning proof of TEST-DOWN-RIGHT-<-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT-<-<->=
Beginning proof of TEST-DOWN-RIGHT-<-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-<->
Beginning proof of TEST-DOWN-RIGHT-<-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-<=-<
Beginning proof of TEST-DOWN-RIGHT-<-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= A 0)))
TEST-DOWN-RIGHT-<-<=-<=
Beginning proof of TEST-DOWN-RIGHT-<-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= A 0)))
TEST-DOWN-RIGHT-<-<=-=
Beginning proof of TEST-DOWN-RIGHT-<-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= A 0)))
TEST-DOWN-RIGHT-<-<=->=
Beginning proof of TEST-DOWN-RIGHT-<-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-<=->
Beginning proof of TEST-DOWN-RIGHT-<-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-=-<
Beginning proof of TEST-DOWN-RIGHT-<-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-=-<=
Beginning proof of TEST-DOWN-RIGHT-<-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-=-=
Beginning proof of TEST-DOWN-RIGHT-<-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-=->=
Beginning proof of TEST-DOWN-RIGHT-<-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<-=->
Beginning proof of TEST-DOWN-RIGHT-<-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<->=-<
Beginning proof of TEST-DOWN-RIGHT-<->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<->=-<=
Beginning proof of TEST-DOWN-RIGHT-<->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<->=-=
Beginning proof of TEST-DOWN-RIGHT-<->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= A 0)))
TEST-DOWN-RIGHT-<->=->=
Beginning proof of TEST-DOWN-RIGHT-<->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= A 0)))
TEST-DOWN-RIGHT-<->=->
Beginning proof of TEST-DOWN-RIGHT-<->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= A 0)))
TEST-DOWN-RIGHT-<->-<
Beginning proof of TEST-DOWN-RIGHT-<->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<->-<=
Beginning proof of TEST-DOWN-RIGHT-<->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<->-=
Beginning proof of TEST-DOWN-RIGHT-<->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT-<->->=
Beginning proof of TEST-DOWN-RIGHT-<->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT-<->->
Beginning proof of TEST-DOWN-RIGHT-<->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT-<=-<-<
Beginning proof of TEST-DOWN-RIGHT-<=-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT-<=-<-<=
Beginning proof of TEST-DOWN-RIGHT-<=-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0)
  (<= (+ 1 A) 0))
 (<= B 0))
TEST-DOWN-RIGHT-<=-<-=
Beginning proof of TEST-DOWN-RIGHT-<=-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0)
  (<= (+ 1 A) 0))
 (= B 0))
TEST-DOWN-RIGHT-<=-<->=
Beginning proof of TEST-DOWN-RIGHT-<=-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<=-<->
Beginning proof of TEST-DOWN-RIGHT-<=-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0)
  (<= (+ 1 A) 0))
 (>= B 1))
TEST-DOWN-RIGHT-<=-<=-<
Beginning proof of TEST-DOWN-RIGHT-<=-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT-<=-<=-<=
Beginning proof of TEST-DOWN-RIGHT-<=-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= A 0))
 (<= B 0))
TEST-DOWN-RIGHT-<=-<=-=
Beginning proof of TEST-DOWN-RIGHT-<=-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= A 0))
 (= B 0))
TEST-DOWN-RIGHT-<=-<=->=
Beginning proof of TEST-DOWN-RIGHT-<=-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= A 0))
 (>= B 0))
TEST-DOWN-RIGHT-<=-<=->
Beginning proof of TEST-DOWN-RIGHT-<=-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= A 0))
 (>= B 1))
TEST-DOWN-RIGHT-<=-=-<
Beginning proof of TEST-DOWN-RIGHT-<=-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT-<=-=-<=
Beginning proof of TEST-DOWN-RIGHT-<=-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= A 0))
 (<= B 0))
TEST-DOWN-RIGHT-<=-=-=
Beginning proof of TEST-DOWN-RIGHT-<=-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= A 0))
 (= B 0))
TEST-DOWN-RIGHT-<=-=->=
Beginning proof of TEST-DOWN-RIGHT-<=-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= A 0))
 (>= B 0))
TEST-DOWN-RIGHT-<=-=->
Beginning proof of TEST-DOWN-RIGHT-<=-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= A 0))
 (>= B 1))
TEST-DOWN-RIGHT-<=->=-<
Beginning proof of TEST-DOWN-RIGHT-<=->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT-<=->=-<=
Beginning proof of TEST-DOWN-RIGHT-<=->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 0))
 (<= B 0))
TEST-DOWN-RIGHT-<=->=-=
Beginning proof of TEST-DOWN-RIGHT-<=->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 0))
 (= B 0))
TEST-DOWN-RIGHT-<=->=->=
Beginning proof of TEST-DOWN-RIGHT-<=->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 0))
 (>= B 0))
TEST-DOWN-RIGHT-<=->=->
Beginning proof of TEST-DOWN-RIGHT-<=->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 0))
 (>= B 1))
TEST-DOWN-RIGHT-<=->-<
Beginning proof of TEST-DOWN-RIGHT-<=->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 1))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT-<=->-<=
Beginning proof of TEST-DOWN-RIGHT-<=->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> A 0))
 (<= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-<=->-=
Beginning proof of TEST-DOWN-RIGHT-<=->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> A 0))
 (= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 1))
 (= B 0))
TEST-DOWN-RIGHT-<=->->=
Beginning proof of TEST-DOWN-RIGHT-<=->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> A 0))
 (>= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= A 1))
 (>= B 0))
TEST-DOWN-RIGHT-<=->->
Beginning proof of TEST-DOWN-RIGHT-<=->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT-=-<-<
Beginning proof of TEST-DOWN-RIGHT-=-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT-=-<-<=
Beginning proof of TEST-DOWN-RIGHT-=-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-=-<-=
Beginning proof of TEST-DOWN-RIGHT-=-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-=-<->=
Beginning proof of TEST-DOWN-RIGHT-=-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-=-<->
Beginning proof of TEST-DOWN-RIGHT-=-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT-=-<=-<
Beginning proof of TEST-DOWN-RIGHT-=-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT-=-<=-<=
Beginning proof of TEST-DOWN-RIGHT-=-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= A 0))
 (<= B 0))
TEST-DOWN-RIGHT-=-<=-=
Beginning proof of TEST-DOWN-RIGHT-=-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= A 0))
 (= B 0))
TEST-DOWN-RIGHT-=-<=->=
Beginning proof of TEST-DOWN-RIGHT-=-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= A 0))
 (>= B 0))
TEST-DOWN-RIGHT-=-<=->
Beginning proof of TEST-DOWN-RIGHT-=-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= A 0))
 (>= B 1))
TEST-DOWN-RIGHT-=-=-<
Beginning proof of TEST-DOWN-RIGHT-=-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT-=-=-<=
Beginning proof of TEST-DOWN-RIGHT-=-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= A 0))
 (<= B 0))
TEST-DOWN-RIGHT-=-=-=
Beginning proof of TEST-DOWN-RIGHT-=-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= A 0))
 (= B 0))
TEST-DOWN-RIGHT-=-=->=
Beginning proof of TEST-DOWN-RIGHT-=-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= A 0))
 (>= B 0))
TEST-DOWN-RIGHT-=-=->
Beginning proof of TEST-DOWN-RIGHT-=-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= A 0))
 (>= B 1))
TEST-DOWN-RIGHT-=->=-<
Beginning proof of TEST-DOWN-RIGHT-=->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT-=->=-<=
Beginning proof of TEST-DOWN-RIGHT-=->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= A 0))
 (<= B 0))
TEST-DOWN-RIGHT-=->=-=
Beginning proof of TEST-DOWN-RIGHT-=->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= A 0))
 (= B 0))
TEST-DOWN-RIGHT-=->=->=
Beginning proof of TEST-DOWN-RIGHT-=->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= A 0))
 (>= B 0))
TEST-DOWN-RIGHT-=->=->
Beginning proof of TEST-DOWN-RIGHT-=->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= A 0))
 (>= B 1))
TEST-DOWN-RIGHT-=->-<
Beginning proof of TEST-DOWN-RIGHT-=->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> A 0))
 (< B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT-=->-<=
Beginning proof of TEST-DOWN-RIGHT-=->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> A 0))
 (<= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-=->-=
Beginning proof of TEST-DOWN-RIGHT-=->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> A 0))
 (= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-=->->=
Beginning proof of TEST-DOWN-RIGHT-=->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> A 0))
 (>= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT-=->->
Beginning proof of TEST-DOWN-RIGHT-=->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT->=-<-<
Beginning proof of TEST-DOWN-RIGHT->=-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0)
  (<= (+ 1 A) 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT->=-<-<=
Beginning proof of TEST-DOWN-RIGHT->=-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->=-<-=
Beginning proof of TEST-DOWN-RIGHT->=-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0)
  (<= (+ 1 A) 0))
 (= B 0))
TEST-DOWN-RIGHT->=-<->=
Beginning proof of TEST-DOWN-RIGHT->=-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0)
  (<= (+ 1 A) 0))
 (>= B 0))
TEST-DOWN-RIGHT->=-<->
Beginning proof of TEST-DOWN-RIGHT->=-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT->=-<=-<
Beginning proof of TEST-DOWN-RIGHT->=-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT->=-<=-<=
Beginning proof of TEST-DOWN-RIGHT->=-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= A 0))
 (<= B 0))
TEST-DOWN-RIGHT->=-<=-=
Beginning proof of TEST-DOWN-RIGHT->=-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= A 0))
 (= B 0))
TEST-DOWN-RIGHT->=-<=->=
Beginning proof of TEST-DOWN-RIGHT->=-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= A 0))
 (>= B 0))
TEST-DOWN-RIGHT->=-<=->
Beginning proof of TEST-DOWN-RIGHT->=-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= A 0))
 (>= B 1))
TEST-DOWN-RIGHT->=-=-<
Beginning proof of TEST-DOWN-RIGHT->=-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT->=-=-<=
Beginning proof of TEST-DOWN-RIGHT->=-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= A 0))
 (<= B 0))
TEST-DOWN-RIGHT->=-=-=
Beginning proof of TEST-DOWN-RIGHT->=-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= A 0))
 (= B 0))
TEST-DOWN-RIGHT->=-=->=
Beginning proof of TEST-DOWN-RIGHT->=-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= A 0))
 (>= B 0))
TEST-DOWN-RIGHT->=-=->
Beginning proof of TEST-DOWN-RIGHT->=-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= A 0))
 (>= B 1))
TEST-DOWN-RIGHT->=->=-<
Beginning proof of TEST-DOWN-RIGHT->=->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 0))
 (<= (+ 1 B) 0))
TEST-DOWN-RIGHT->=->=-<=
Beginning proof of TEST-DOWN-RIGHT->=->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 0))
 (<= B 0))
TEST-DOWN-RIGHT->=->=-=
Beginning proof of TEST-DOWN-RIGHT->=->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 0))
 (= B 0))
TEST-DOWN-RIGHT->=->=->=
Beginning proof of TEST-DOWN-RIGHT->=->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 0))
 (>= B 0))
TEST-DOWN-RIGHT->=->=->
Beginning proof of TEST-DOWN-RIGHT->=->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 0))
 (>= B 1))
TEST-DOWN-RIGHT->=->-<
Beginning proof of TEST-DOWN-RIGHT->=->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT->=->-<=
Beginning proof of TEST-DOWN-RIGHT->=->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> A 0))
 (<= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 1))
 (<= B 0))
TEST-DOWN-RIGHT->=->-=
Beginning proof of TEST-DOWN-RIGHT->=->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> A 0))
 (= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 1))
 (= B 0))
TEST-DOWN-RIGHT->=->->=
Beginning proof of TEST-DOWN-RIGHT->=->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> A 0))
 (>= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->=->->
Beginning proof of TEST-DOWN-RIGHT->=->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= A 1))
 (>= B 1))
TEST-DOWN-RIGHT->-<-<
Beginning proof of TEST-DOWN-RIGHT->-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->-<-<=
Beginning proof of TEST-DOWN-RIGHT->-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< A 0))
 (<= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->-<-=
Beginning proof of TEST-DOWN-RIGHT->-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< A 0))
 (= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT->-<->=
Beginning proof of TEST-DOWN-RIGHT->-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< A 0))
 (>= B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT->-<->
Beginning proof of TEST-DOWN-RIGHT->-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< A 0))
 (> B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= (+ 1 A) 0)))
TEST-DOWN-RIGHT->-<=-<
Beginning proof of TEST-DOWN-RIGHT->-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->-<=-<=
Beginning proof of TEST-DOWN-RIGHT->-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= A 0))
 (<= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->-<=-=
Beginning proof of TEST-DOWN-RIGHT->-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= A 0))
 (= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= A 0)))
TEST-DOWN-RIGHT->-<=->=
Beginning proof of TEST-DOWN-RIGHT->-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= A 0))
 (>= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= A 0)))
TEST-DOWN-RIGHT->-<=->
Beginning proof of TEST-DOWN-RIGHT->-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= A 0)))
TEST-DOWN-RIGHT->-=-<
Beginning proof of TEST-DOWN-RIGHT->-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= A 0))
 (< B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->-=-<=
Beginning proof of TEST-DOWN-RIGHT->-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= A 0))
 (<= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->-=-=
Beginning proof of TEST-DOWN-RIGHT->-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= A 0))
 (= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->-=->=
Beginning proof of TEST-DOWN-RIGHT->-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= A 0))
 (>= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->-=->
Beginning proof of TEST-DOWN-RIGHT->-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->->=-<
Beginning proof of TEST-DOWN-RIGHT->->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= A 0)))
TEST-DOWN-RIGHT->->=-<=
Beginning proof of TEST-DOWN-RIGHT->->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= A 0))
 (<= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= A 0)))
TEST-DOWN-RIGHT->->=-=
Beginning proof of TEST-DOWN-RIGHT->->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= A 0))
 (= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= A 0)))
TEST-DOWN-RIGHT->->=->=
Beginning proof of TEST-DOWN-RIGHT->->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= A 0))
 (>= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->->=->
Beginning proof of TEST-DOWN-RIGHT->->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->->-<
Beginning proof of TEST-DOWN-RIGHT->->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> A 0))
 (< B 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT->->-<=
Beginning proof of TEST-DOWN-RIGHT->->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> A 0))
 (<= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT->->-=
Beginning proof of TEST-DOWN-RIGHT->->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> A 0))
 (= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= A 1)))
TEST-DOWN-RIGHT->->->=
Beginning proof of TEST-DOWN-RIGHT->->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> A 0))
 (>= B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-RIGHT->->->
Beginning proof of TEST-DOWN-RIGHT->->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> A 0))
 (> B 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-<-<
Beginning proof of TEST-DOWN-LEFT-<-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT-<-<-<=
Beginning proof of TEST-DOWN-LEFT-<-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT-<-<-=
Beginning proof of TEST-DOWN-LEFT-<-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT-<-<->=
Beginning proof of TEST-DOWN-LEFT-<-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-<->
Beginning proof of TEST-DOWN-LEFT-<-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (< B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-<=-<
Beginning proof of TEST-DOWN-LEFT-<-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= B 0)))
TEST-DOWN-LEFT-<-<=-<=
Beginning proof of TEST-DOWN-LEFT-<-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= B 0)))
TEST-DOWN-LEFT-<-<=-=
Beginning proof of TEST-DOWN-LEFT-<-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (<= B 0)))
TEST-DOWN-LEFT-<-<=->=
Beginning proof of TEST-DOWN-LEFT-<-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-<=->
Beginning proof of TEST-DOWN-LEFT-<-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (<= B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-=-<
Beginning proof of TEST-DOWN-LEFT-<-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-=-<=
Beginning proof of TEST-DOWN-LEFT-<-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-=-=
Beginning proof of TEST-DOWN-LEFT-<-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-=->=
Beginning proof of TEST-DOWN-LEFT-<-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<-=->
Beginning proof of TEST-DOWN-LEFT-<-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (= B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<->=-<
Beginning proof of TEST-DOWN-LEFT-<->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<->=-<=
Beginning proof of TEST-DOWN-LEFT-<->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<->=-=
Beginning proof of TEST-DOWN-LEFT-<->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= B 0)))
TEST-DOWN-LEFT-<->=->=
Beginning proof of TEST-DOWN-LEFT-<->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= B 0)))
TEST-DOWN-LEFT-<->=->
Beginning proof of TEST-DOWN-LEFT-<->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (>= B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= B 0)))
TEST-DOWN-LEFT-<->-<
Beginning proof of TEST-DOWN-LEFT-<->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<->-<=
Beginning proof of TEST-DOWN-LEFT-<->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<->-=
Beginning proof of TEST-DOWN-LEFT-<->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= B 1)))
TEST-DOWN-LEFT-<->->=
Beginning proof of TEST-DOWN-LEFT-<->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= B 1)))
TEST-DOWN-LEFT-<->->
Beginning proof of TEST-DOWN-LEFT-<->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (< (* A B) 0) (> B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (+ 1 (* A B)) 0))
 (NOT (>= B 1)))
TEST-DOWN-LEFT-<=-<-<
Beginning proof of TEST-DOWN-LEFT-<=-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT-<=-<-<=
Beginning proof of TEST-DOWN-LEFT-<=-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0)
  (<= (+ 1 B) 0))
 (<= A 0))
TEST-DOWN-LEFT-<=-<-=
Beginning proof of TEST-DOWN-LEFT-<=-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0)
  (<= (+ 1 B) 0))
 (= A 0))
TEST-DOWN-LEFT-<=-<->=
Beginning proof of TEST-DOWN-LEFT-<=-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<=-<->
Beginning proof of TEST-DOWN-LEFT-<=-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (< B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0)
  (<= (+ 1 B) 0))
 (>= A 1))
TEST-DOWN-LEFT-<=-<=-<
Beginning proof of TEST-DOWN-LEFT-<=-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT-<=-<=-<=
Beginning proof of TEST-DOWN-LEFT-<=-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= B 0))
 (<= A 0))
TEST-DOWN-LEFT-<=-<=-=
Beginning proof of TEST-DOWN-LEFT-<=-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= B 0))
 (= A 0))
TEST-DOWN-LEFT-<=-<=->=
Beginning proof of TEST-DOWN-LEFT-<=-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= B 0))
 (>= A 0))
TEST-DOWN-LEFT-<=-<=->
Beginning proof of TEST-DOWN-LEFT-<=-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (<= B 0))
 (>= A 1))
TEST-DOWN-LEFT-<=-=-<
Beginning proof of TEST-DOWN-LEFT-<=-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT-<=-=-<=
Beginning proof of TEST-DOWN-LEFT-<=-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= B 0))
 (<= A 0))
TEST-DOWN-LEFT-<=-=-=
Beginning proof of TEST-DOWN-LEFT-<=-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= B 0))
 (= A 0))
TEST-DOWN-LEFT-<=-=->=
Beginning proof of TEST-DOWN-LEFT-<=-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= B 0))
 (>= A 0))
TEST-DOWN-LEFT-<=-=->
Beginning proof of TEST-DOWN-LEFT-<=-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (= B 0))
 (>= A 1))
TEST-DOWN-LEFT-<=->=-<
Beginning proof of TEST-DOWN-LEFT-<=->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT-<=->=-<=
Beginning proof of TEST-DOWN-LEFT-<=->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 0))
 (<= A 0))
TEST-DOWN-LEFT-<=->=-=
Beginning proof of TEST-DOWN-LEFT-<=->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 0))
 (= A 0))
TEST-DOWN-LEFT-<=->=->=
Beginning proof of TEST-DOWN-LEFT-<=->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 0))
 (>= A 0))
TEST-DOWN-LEFT-<=->=->
Beginning proof of TEST-DOWN-LEFT-<=->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 0))
 (>= A 1))
TEST-DOWN-LEFT-<=->-<
Beginning proof of TEST-DOWN-LEFT-<=->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 1))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT-<=->-<=
Beginning proof of TEST-DOWN-LEFT-<=->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> B 0))
 (<= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-<=->-=
Beginning proof of TEST-DOWN-LEFT-<=->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> B 0))
 (= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 1))
 (= A 0))
TEST-DOWN-LEFT-<=->->=
Beginning proof of TEST-DOWN-LEFT-<=->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> B 0))
 (>= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (>= B 1))
 (>= A 0))
TEST-DOWN-LEFT-<=->->
Beginning proof of TEST-DOWN-LEFT-<=->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0) (> B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (<= (* A B) 0))
 (NOT (>= B 1)))
TEST-DOWN-LEFT-=-<-<
Beginning proof of TEST-DOWN-LEFT-=-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT-=-<-<=
Beginning proof of TEST-DOWN-LEFT-=-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-=-<-=
Beginning proof of TEST-DOWN-LEFT-=-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-=-<->=
Beginning proof of TEST-DOWN-LEFT-=-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-=-<->
Beginning proof of TEST-DOWN-LEFT-=-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (< B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT-=-<=-<
Beginning proof of TEST-DOWN-LEFT-=-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT-=-<=-<=
Beginning proof of TEST-DOWN-LEFT-=-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= B 0))
 (<= A 0))
TEST-DOWN-LEFT-=-<=-=
Beginning proof of TEST-DOWN-LEFT-=-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= B 0))
 (= A 0))
TEST-DOWN-LEFT-=-<=->=
Beginning proof of TEST-DOWN-LEFT-=-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= B 0))
 (>= A 0))
TEST-DOWN-LEFT-=-<=->
Beginning proof of TEST-DOWN-LEFT-=-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (<= B 0))
 (>= A 1))
TEST-DOWN-LEFT-=-=-<
Beginning proof of TEST-DOWN-LEFT-=-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT-=-=-<=
Beginning proof of TEST-DOWN-LEFT-=-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= B 0))
 (<= A 0))
TEST-DOWN-LEFT-=-=-=
Beginning proof of TEST-DOWN-LEFT-=-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= B 0))
 (= A 0))
TEST-DOWN-LEFT-=-=->=
Beginning proof of TEST-DOWN-LEFT-=-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= B 0))
 (>= A 0))
TEST-DOWN-LEFT-=-=->
Beginning proof of TEST-DOWN-LEFT-=-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (= B 0))
 (>= A 1))
TEST-DOWN-LEFT-=->=-<
Beginning proof of TEST-DOWN-LEFT-=->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT-=->=-<=
Beginning proof of TEST-DOWN-LEFT-=->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= B 0))
 (<= A 0))
TEST-DOWN-LEFT-=->=-=
Beginning proof of TEST-DOWN-LEFT-=->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= B 0))
 (= A 0))
TEST-DOWN-LEFT-=->=->=
Beginning proof of TEST-DOWN-LEFT-=->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= B 0))
 (>= A 0))
TEST-DOWN-LEFT-=->=->
Beginning proof of TEST-DOWN-LEFT-=->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (>= B 0))
 (>= A 1))
TEST-DOWN-LEFT-=->-<
Beginning proof of TEST-DOWN-LEFT-=->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> B 0))
 (< A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0))
 (NOT (>= B 1)))
TEST-DOWN-LEFT-=->-<=
Beginning proof of TEST-DOWN-LEFT-=->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> B 0))
 (<= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-=->-=
Beginning proof of TEST-DOWN-LEFT-=->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> B 0))
 (= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-=->->=
Beginning proof of TEST-DOWN-LEFT-=->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> B 0))
 (>= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT-=->->
Beginning proof of TEST-DOWN-LEFT-=->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0) (> B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (= (* A B) 0))
 (NOT (>= B 1)))
TEST-DOWN-LEFT->=-<-<
Beginning proof of TEST-DOWN-LEFT->=-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0)
  (<= (+ 1 B) 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT->=-<-<=
Beginning proof of TEST-DOWN-LEFT->=-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->=-<-=
Beginning proof of TEST-DOWN-LEFT->=-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0)
  (<= (+ 1 B) 0))
 (= A 0))
TEST-DOWN-LEFT->=-<->=
Beginning proof of TEST-DOWN-LEFT->=-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0)
  (<= (+ 1 B) 0))
 (>= A 0))
TEST-DOWN-LEFT->=-<->
Beginning proof of TEST-DOWN-LEFT->=-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (< B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT->=-<=-<
Beginning proof of TEST-DOWN-LEFT->=-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT->=-<=-<=
Beginning proof of TEST-DOWN-LEFT->=-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= B 0))
 (<= A 0))
TEST-DOWN-LEFT->=-<=-=
Beginning proof of TEST-DOWN-LEFT->=-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= B 0))
 (= A 0))
TEST-DOWN-LEFT->=-<=->=
Beginning proof of TEST-DOWN-LEFT->=-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= B 0))
 (>= A 0))
TEST-DOWN-LEFT->=-<=->
Beginning proof of TEST-DOWN-LEFT->=-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (<= B 0))
 (>= A 1))
TEST-DOWN-LEFT->=-=-<
Beginning proof of TEST-DOWN-LEFT->=-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT->=-=-<=
Beginning proof of TEST-DOWN-LEFT->=-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= B 0))
 (<= A 0))
TEST-DOWN-LEFT->=-=-=
Beginning proof of TEST-DOWN-LEFT->=-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= B 0))
 (= A 0))
TEST-DOWN-LEFT->=-=->=
Beginning proof of TEST-DOWN-LEFT->=-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= B 0))
 (>= A 0))
TEST-DOWN-LEFT->=-=->
Beginning proof of TEST-DOWN-LEFT->=-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (= B 0))
 (>= A 1))
TEST-DOWN-LEFT->=->=-<
Beginning proof of TEST-DOWN-LEFT->=->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 0))
 (<= (+ 1 A) 0))
TEST-DOWN-LEFT->=->=-<=
Beginning proof of TEST-DOWN-LEFT->=->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 0))
 (<= A 0))
TEST-DOWN-LEFT->=->=-=
Beginning proof of TEST-DOWN-LEFT->=->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 0))
 (= A 0))
TEST-DOWN-LEFT->=->=->=
Beginning proof of TEST-DOWN-LEFT->=->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 0))
 (>= A 0))
TEST-DOWN-LEFT->=->=->
Beginning proof of TEST-DOWN-LEFT->=->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 0))
 (>= A 1))
TEST-DOWN-LEFT->=->-<
Beginning proof of TEST-DOWN-LEFT->=->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0))
 (NOT (>= B 1)))
TEST-DOWN-LEFT->=->-<=
Beginning proof of TEST-DOWN-LEFT->=->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> B 0))
 (<= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 1))
 (<= A 0))
TEST-DOWN-LEFT->=->-=
Beginning proof of TEST-DOWN-LEFT->=->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> B 0))
 (= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 1))
 (= A 0))
TEST-DOWN-LEFT->=->->=
Beginning proof of TEST-DOWN-LEFT->=->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> B 0))
 (>= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->=->->
Beginning proof of TEST-DOWN-LEFT->=->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (> B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 0) (>= B 1))
 (>= A 1))
TEST-DOWN-LEFT->-<-<
Beginning proof of TEST-DOWN-LEFT->-<-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->-<-<=
Beginning proof of TEST-DOWN-LEFT->-<-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< B 0))
 (<= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->-<-=
Beginning proof of TEST-DOWN-LEFT->-<-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< B 0))
 (= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT->-<->=
Beginning proof of TEST-DOWN-LEFT->-<->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< B 0))
 (>= A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT->-<->
Beginning proof of TEST-DOWN-LEFT->-<-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (< B 0))
 (> A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= (+ 1 B) 0)))
TEST-DOWN-LEFT->-<=-<
Beginning proof of TEST-DOWN-LEFT->-<=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->-<=-<=
Beginning proof of TEST-DOWN-LEFT->-<=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= B 0))
 (<= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->-<=-=
Beginning proof of TEST-DOWN-LEFT->-<=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= B 0))
 (= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= B 0)))
TEST-DOWN-LEFT->-<=->=
Beginning proof of TEST-DOWN-LEFT->-<=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= B 0))
 (>= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= B 0)))
TEST-DOWN-LEFT->-<=->
Beginning proof of TEST-DOWN-LEFT->-<=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (<= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (<= B 0)))
TEST-DOWN-LEFT->-=-<
Beginning proof of TEST-DOWN-LEFT->-=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= B 0))
 (< A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->-=-<=
Beginning proof of TEST-DOWN-LEFT->-=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= B 0))
 (<= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->-=-=
Beginning proof of TEST-DOWN-LEFT->-=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= B 0))
 (= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->-=->=
Beginning proof of TEST-DOWN-LEFT->-=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= B 0))
 (>= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->-=->
Beginning proof of TEST-DOWN-LEFT->-=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->->=-<
Beginning proof of TEST-DOWN-LEFT->->=-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= B 0)))
TEST-DOWN-LEFT->->=-<=
Beginning proof of TEST-DOWN-LEFT->->=-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= B 0))
 (<= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= B 0)))
TEST-DOWN-LEFT->->=-=
Beginning proof of TEST-DOWN-LEFT->->=-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= B 0))
 (= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= B 0)))
TEST-DOWN-LEFT->->=->=
Beginning proof of TEST-DOWN-LEFT->->=->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= B 0))
 (>= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->->=->
Beginning proof of TEST-DOWN-LEFT->->=-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (>= B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->->-<
Beginning proof of TEST-DOWN-LEFT->->-< ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> B 0))
 (< A 0))
Which simplifies
 when rewriting with SUCC.INT.RULE
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= B 1)))
TEST-DOWN-LEFT->->-<=
Beginning proof of TEST-DOWN-LEFT->->-<= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> B 0))
 (<= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= B 1)))
TEST-DOWN-LEFT->->-=
Beginning proof of TEST-DOWN-LEFT->->-= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> B 0))
 (= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(IMPLIES (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (>= (* A B) 1))
 (NOT (>= B 1)))
TEST-DOWN-LEFT->->->=
Beginning proof of TEST-DOWN-LEFT->->->= ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> B 0))
 (>= A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
TEST-DOWN-LEFT->->->
Beginning proof of TEST-DOWN-LEFT->->-> ...
(IMPLIES
 (AND (= (TYPE-OF A) (INT)) (= (TYPE-OF B) (INT)) (> (* A B) 0) (> B 0))
 (> A 0))
Which simplifies
 forward chaining using >=.SAME.TYPE
 with the assumptions SUCC.INT to ...
(TRUE)
Done.